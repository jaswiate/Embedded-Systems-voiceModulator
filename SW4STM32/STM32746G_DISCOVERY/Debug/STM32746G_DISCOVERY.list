
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b60  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004040  08006d28  08006d28  00007d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad68  0800ad68  0000bd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad70  0800ad70  0000bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001b4  20000000  0800ad78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00020e40  200001c0  0800af2c  0000c1c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  20021000  0800af2c  0000d000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c1b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f11c  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042db  00000000  00000000  0002b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000c73c  00000000  00000000  0002f5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012f8  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000012d7  00000000  00000000  0003d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000293cc  00000000  00000000  0003e2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000202cb  00000000  00000000  000676b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001083e1  00000000  00000000  0008797e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0018fd5f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000039a4  00000000  00000000  0018fda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a4  00000000  00000000  00193748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001c0 	.word	0x200001c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006d10 	.word	0x08006d10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001c4 	.word	0x200001c4
 8000204:	08006d10 	.word	0x08006d10

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8000ea4:	2901      	cmp	r1, #1
{
 8000ea6:	b510      	push	{r4, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000ea8:	b2c4      	uxtb	r4, r0
  switch (Output) 
 8000eaa:	d00f      	beq.n	8000ecc <wm8994_SetOutputMode+0x28>
 8000eac:	2903      	cmp	r1, #3
 8000eae:	d12d      	bne.n	8000f0c <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8000eb0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000eb4:	2105      	movs	r1, #5
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f000 fd96 	bl	80019e8 <AUDIO_IO_Write>
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f240 6101 	movw	r1, #1537	@ 0x601
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 fd90 	bl	80019e8 <AUDIO_IO_Write>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	e00c      	b.n	8000ee6 <wm8994_SetOutputMode+0x42>
 8000ecc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000ed0:	2105      	movs	r1, #5
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f000 fd88 	bl	80019e8 <AUDIO_IO_Write>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f240 6101 	movw	r1, #1537	@ 0x601
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 fd82 	bl	80019e8 <AUDIO_IO_Write>
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f240 6102 	movw	r1, #1538	@ 0x602
 8000eea:	4620      	mov	r0, r4
 8000eec:	f000 fd7c 	bl	80019e8 <AUDIO_IO_Write>
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	f240 6104 	movw	r1, #1540	@ 0x604
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 fd76 	bl	80019e8 <AUDIO_IO_Write>
 8000efc:	2202      	movs	r2, #2
 8000efe:	4620      	mov	r0, r4
 8000f00:	f240 6105 	movw	r1, #1541	@ 0x605
 8000f04:	f000 fd70 	bl	80019e8 <AUDIO_IO_Write>
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f0c:	f240 3203 	movw	r2, #771	@ 0x303
 8000f10:	2105      	movs	r1, #5
 8000f12:	4620      	mov	r0, r4
 8000f14:	f000 fd68 	bl	80019e8 <AUDIO_IO_Write>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f240 6101 	movw	r1, #1537	@ 0x601
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f000 fd62 	bl	80019e8 <AUDIO_IO_Write>
 8000f24:	2201      	movs	r2, #1
 8000f26:	f240 6102 	movw	r1, #1538	@ 0x602
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f000 fd5c 	bl	80019e8 <AUDIO_IO_Write>
 8000f30:	2200      	movs	r2, #0
 8000f32:	f240 6104 	movw	r1, #1540	@ 0x604
 8000f36:	4620      	mov	r0, r4
 8000f38:	f000 fd56 	bl	80019e8 <AUDIO_IO_Write>
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	e7de      	b.n	8000efe <wm8994_SetOutputMode+0x5a>

08000f40 <wm8994_SetFrequency>:
{
 8000f40:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000f42:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000f46:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d025      	beq.n	8000f98 <wm8994_SetFrequency+0x58>
 8000f4c:	d80b      	bhi.n	8000f66 <wm8994_SetFrequency+0x26>
 8000f4e:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8000f52:	4299      	cmp	r1, r3
 8000f54:	d01e      	beq.n	8000f94 <wm8994_SetFrequency+0x54>
 8000f56:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 8000f5a:	d017      	beq.n	8000f8c <wm8994_SetFrequency+0x4c>
 8000f5c:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 8000f60:	d00d      	beq.n	8000f7e <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f62:	2283      	movs	r2, #131	@ 0x83
 8000f64:	e00c      	b.n	8000f80 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 8000f66:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d016      	beq.n	8000f9c <wm8994_SetFrequency+0x5c>
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <wm8994_SetFrequency+0x60>)
 8000f70:	4299      	cmp	r1, r3
 8000f72:	d00d      	beq.n	8000f90 <wm8994_SetFrequency+0x50>
 8000f74:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 8000f78:	d1f3      	bne.n	8000f62 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f7a:	2263      	movs	r2, #99	@ 0x63
 8000f7c:	e000      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000f7e:	2203      	movs	r2, #3
 8000f80:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000f84:	f000 fd30 	bl	80019e8 <AUDIO_IO_Write>
}
 8000f88:	2000      	movs	r0, #0
 8000f8a:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f8c:	2233      	movs	r2, #51	@ 0x33
 8000f8e:	e7f7      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000f90:	22a3      	movs	r2, #163	@ 0xa3
 8000f92:	e7f5      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000f94:	2213      	movs	r2, #19
 8000f96:	e7f3      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000f98:	2243      	movs	r2, #67	@ 0x43
 8000f9a:	e7f1      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000f9c:	2273      	movs	r2, #115	@ 0x73
 8000f9e:	e7ef      	b.n	8000f80 <wm8994_SetFrequency+0x40>
 8000fa0:	00017700 	.word	0x00017700

08000fa4 <wm8994_Reset>:
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	b2c0      	uxtb	r0, r0
{
 8000fa8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000faa:	4611      	mov	r1, r2
 8000fac:	f000 fd1c 	bl	80019e8 <AUDIO_IO_Write>
  outputEnabled = 0;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	@ (8000fbc <wm8994_Reset+0x18>)
 8000fb2:	2000      	movs	r0, #0
  inputEnabled=0;
 8000fb4:	e9c3 0000 	strd	r0, r0, [r3]
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001dc 	.word	0x200001dc

08000fc0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8000fc0:	f000 bd10 	b.w	80019e4 <AUDIO_IO_DeInit>

08000fc4 <wm8994_ReadID>:
{
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 8000fc8:	f000 fd06 	bl	80019d8 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8000fcc:	2100      	movs	r1, #0
 8000fce:	b2e0      	uxtb	r0, r4
 8000fd0:	f000 fd1e 	bl	8001a10 <AUDIO_IO_Read>
}
 8000fd4:	bd10      	pop	{r4, pc}
	...

08000fd8 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <wm8994_SetMute+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
{
 8000fdc:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 8000fde:	b183      	cbz	r3, 8001002 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8000fe0:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000fe2:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 8000fe4:	d10f      	bne.n	8001006 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000fe6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fea:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f000 fcfa 	bl	80019e8 <AUDIO_IO_Write>
 8000ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff8:	f240 4122 	movw	r1, #1058	@ 0x422
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f000 fcf3 	bl	80019e8 <AUDIO_IO_Write>
}
 8001002:	2000      	movs	r0, #0
 8001004:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001006:	2210      	movs	r2, #16
 8001008:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800100c:	4620      	mov	r0, r4
 800100e:	f000 fceb 	bl	80019e8 <AUDIO_IO_Write>
 8001012:	2210      	movs	r2, #16
 8001014:	e7f0      	b.n	8000ff8 <wm8994_SetMute+0x20>
 8001016:	bf00      	nop
 8001018:	200001dc 	.word	0x200001dc

0800101c <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	2100      	movs	r1, #0
 800101e:	f7ff bfdb 	b.w	8000fd8 <wm8994_SetMute>

08001022 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001022:	2100      	movs	r1, #0
 8001024:	f7ff bfd8 	b.w	8000fd8 <wm8994_SetMute>

08001028 <wm8994_Pause>:
{  
 8001028:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800102a:	2101      	movs	r1, #1
{  
 800102c:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800102e:	f7ff ffd3 	bl	8000fd8 <wm8994_SetMute>
 8001032:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001034:	2201      	movs	r2, #1
 8001036:	b2e8      	uxtb	r0, r5
 8001038:	2102      	movs	r1, #2
 800103a:	f000 fcd5 	bl	80019e8 <AUDIO_IO_Write>
}
 800103e:	4620      	mov	r0, r4
 8001040:	bd38      	pop	{r3, r4, r5, pc}
	...

08001044 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001044:	2964      	cmp	r1, #100	@ 0x64
{
 8001046:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800104a:	f04f 0764 	mov.w	r7, #100	@ 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800104e:	bf98      	it	ls
 8001050:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
  if (outputEnabled != 0)
 8001054:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8001144 <wm8994_SetVolume+0x100>
{
 8001058:	4605      	mov	r5, r0
 800105a:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 800105c:	f8d9 6000 	ldr.w	r6, [r9]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001060:	bf9c      	itt	ls
 8001062:	fbb3 f3f7 	udivls	r3, r3, r7
 8001066:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
 8001068:	b326      	cbz	r6, 80010b4 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 800106a:	2f3e      	cmp	r7, #62	@ 0x3e
 800106c:	d91d      	bls.n	80010aa <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800106e:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001070:	2100      	movs	r1, #0
 8001072:	f7ff ffb1 	bl	8000fd8 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001076:	f240 127f 	movw	r2, #383	@ 0x17f
 800107a:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800107c:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 800107e:	4638      	mov	r0, r7
 8001080:	f000 fcb2 	bl	80019e8 <AUDIO_IO_Write>
 8001084:	f240 127f 	movw	r2, #383	@ 0x17f
 8001088:	211d      	movs	r1, #29
 800108a:	4638      	mov	r0, r7
 800108c:	f000 fcac 	bl	80019e8 <AUDIO_IO_Write>
 8001090:	f240 127f 	movw	r2, #383	@ 0x17f
 8001094:	2126      	movs	r1, #38	@ 0x26
 8001096:	4638      	mov	r0, r7
 8001098:	f000 fca6 	bl	80019e8 <AUDIO_IO_Write>
 800109c:	f240 127f 	movw	r2, #383	@ 0x17f
 80010a0:	2127      	movs	r1, #39	@ 0x27
 80010a2:	4638      	mov	r0, r7
 80010a4:	f000 fca0 	bl	80019e8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80010a8:	e004      	b.n	80010b4 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 80010aa:	bb79      	cbnz	r1, 800110c <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80010ac:	2101      	movs	r1, #1
 80010ae:	f7ff ff93 	bl	8000fd8 <wm8994_SetMute>
 80010b2:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80010b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80010b8:	b32b      	cbz	r3, 8001106 <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80010ba:	2c63      	cmp	r4, #99	@ 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80010bc:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80010be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80010c2:	bf9a      	itte	ls
 80010c4:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 80010c8:	2364      	movls	r3, #100	@ 0x64
 80010ca:	24ef      	movhi	r4, #239	@ 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 80010cc:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80010ce:	bf9e      	ittt	ls
 80010d0:	0124      	lslls	r4, r4, #4
 80010d2:	fbb4 f4f3 	udivls	r4, r4, r3
 80010d6:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80010d8:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 80010dc:	4622      	mov	r2, r4
 80010de:	f000 fc83 	bl	80019e8 <AUDIO_IO_Write>
 80010e2:	4622      	mov	r2, r4
 80010e4:	f240 4101 	movw	r1, #1025	@ 0x401
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 fc7d 	bl	80019e8 <AUDIO_IO_Write>
 80010ee:	4622      	mov	r2, r4
 80010f0:	f240 4104 	movw	r1, #1028	@ 0x404
 80010f4:	4628      	mov	r0, r5
 80010f6:	f000 fc77 	bl	80019e8 <AUDIO_IO_Write>
 80010fa:	4622      	mov	r2, r4
 80010fc:	f240 4105 	movw	r1, #1029	@ 0x405
 8001100:	4628      	mov	r0, r5
 8001102:	f000 fc71 	bl	80019e8 <AUDIO_IO_Write>
}
 8001106:	4630      	mov	r0, r6
 8001108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800110c:	fa5f f885 	uxtb.w	r8, r5
 8001110:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001114:	2100      	movs	r1, #0
 8001116:	f7ff ff5f 	bl	8000fd8 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 800111a:	463a      	mov	r2, r7
 800111c:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800111e:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001120:	4640      	mov	r0, r8
 8001122:	f000 fc61 	bl	80019e8 <AUDIO_IO_Write>
 8001126:	463a      	mov	r2, r7
 8001128:	211d      	movs	r1, #29
 800112a:	4640      	mov	r0, r8
 800112c:	f000 fc5c 	bl	80019e8 <AUDIO_IO_Write>
 8001130:	463a      	mov	r2, r7
 8001132:	2126      	movs	r1, #38	@ 0x26
 8001134:	4640      	mov	r0, r8
 8001136:	f000 fc57 	bl	80019e8 <AUDIO_IO_Write>
 800113a:	463a      	mov	r2, r7
 800113c:	2127      	movs	r1, #39	@ 0x27
 800113e:	4640      	mov	r0, r8
 8001140:	e7b0      	b.n	80010a4 <wm8994_SetVolume+0x60>
 8001142:	bf00      	nop
 8001144:	200001dc 	.word	0x200001dc

08001148 <wm8994_Init>:
{
 8001148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	4681      	mov	r9, r0
 800114e:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001150:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
{
 8001154:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001156:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 800115a:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 800115c:	f000 fc3c 	bl	80019d8 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001160:	2203      	movs	r2, #3
 8001162:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001166:	4620      	mov	r0, r4
 8001168:	f000 fc3e 	bl	80019e8 <AUDIO_IO_Write>
 800116c:	2200      	movs	r2, #0
 800116e:	f640 0117 	movw	r1, #2071	@ 0x817
 8001172:	4620      	mov	r0, r4
 8001174:	f000 fc38 	bl	80019e8 <AUDIO_IO_Write>
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800117e:	4620      	mov	r0, r4
 8001180:	f000 fc32 	bl	80019e8 <AUDIO_IO_Write>
 8001184:	226c      	movs	r2, #108	@ 0x6c
 8001186:	2139      	movs	r1, #57	@ 0x39
 8001188:	4620      	mov	r0, r4
 800118a:	f000 fc2d 	bl	80019e8 <AUDIO_IO_Write>
  if (input_device > 0)
 800118e:	2d00      	cmp	r5, #0
 8001190:	d062      	beq.n	8001258 <wm8994_Init+0x110>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001192:	2213      	movs	r2, #19
 8001194:	2101      	movs	r1, #1
 8001196:	4620      	mov	r0, r4
 8001198:	f000 fc26 	bl	80019e8 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 800119c:	2032      	movs	r0, #50	@ 0x32
 800119e:	f8df b504 	ldr.w	fp, [pc, #1284]	@ 80016a4 <wm8994_Init+0x55c>
 80011a2:	f000 fc4d 	bl	8001a40 <AUDIO_IO_Delay>
  if (output_device > 0)
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	f000 80ce 	beq.w	8001348 <wm8994_Init+0x200>
    outputEnabled = 1;
 80011ac:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 80011b0:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 80011b2:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 80011b6:	f000 80ad 	beq.w	8001314 <wm8994_Init+0x1cc>
 80011ba:	2e03      	cmp	r6, #3
 80011bc:	d04e      	beq.n	800125c <wm8994_Init+0x114>
 80011be:	4546      	cmp	r6, r8
 80011c0:	f040 80a8 	bne.w	8001314 <wm8994_Init+0x1cc>
 AUDIO_IO_Write(Addr, Reg, Value);
 80011c4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80011c8:	2105      	movs	r1, #5
 80011ca:	4620      	mov	r0, r4
 80011cc:	f000 fc0c 	bl	80019e8 <AUDIO_IO_Write>
 80011d0:	2200      	movs	r2, #0
 80011d2:	f240 6101 	movw	r1, #1537	@ 0x601
 80011d6:	4620      	mov	r0, r4
 80011d8:	f000 fc06 	bl	80019e8 <AUDIO_IO_Write>
 80011dc:	2200      	movs	r2, #0
 80011de:	f240 6102 	movw	r1, #1538	@ 0x602
 80011e2:	4620      	mov	r0, r4
 80011e4:	f000 fc00 	bl	80019e8 <AUDIO_IO_Write>
 80011e8:	2202      	movs	r2, #2
 80011ea:	f240 6104 	movw	r1, #1540	@ 0x604
 80011ee:	4620      	mov	r0, r4
 80011f0:	f000 fbfa 	bl	80019e8 <AUDIO_IO_Write>
 80011f4:	2202      	movs	r2, #2
 80011f6:	f240 6105 	movw	r1, #1541	@ 0x605
 80011fa:	4620      	mov	r0, r4
 80011fc:	f000 fbf4 	bl	80019e8 <AUDIO_IO_Write>
  if (input_device > 0)
 8001200:	2d00      	cmp	r5, #0
 8001202:	f000 8101 	beq.w	8001408 <wm8994_Init+0x2c0>
    inputEnabled = 1;
 8001206:	f04f 0801 	mov.w	r8, #1
    switch (input_device)
 800120a:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
    inputEnabled = 1;
 800120e:	f8cb 8004 	str.w	r8, [fp, #4]
    switch (input_device)
 8001212:	f000 80c7 	beq.w	80013a4 <wm8994_Init+0x25c>
 8001216:	f200 809a 	bhi.w	800134e <wm8994_Init+0x206>
 800121a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800121e:	f000 80f0 	beq.w	8001402 <wm8994_Init+0x2ba>
 8001222:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8001226:	f000 8096 	beq.w	8001356 <wm8994_Init+0x20e>
  switch (AudioFreq)
 800122a:	f5b7 4ffa 	cmp.w	r7, #32000	@ 0x7d00
 800122e:	f000 81f8 	beq.w	8001622 <wm8994_Init+0x4da>
 8001232:	f200 80f3 	bhi.w	800141c <wm8994_Init+0x2d4>
 8001236:	f5b7 5f7a 	cmp.w	r7, #16000	@ 0x3e80
 800123a:	f000 81f0 	beq.w	800161e <wm8994_Init+0x4d6>
 800123e:	f200 80e6 	bhi.w	800140e <wm8994_Init+0x2c6>
 8001242:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 8001246:	f000 80f9 	beq.w	800143c <wm8994_Init+0x2f4>
 800124a:	f642 3311 	movw	r3, #11025	@ 0x2b11
 800124e:	429f      	cmp	r7, r3
 8001250:	f000 81eb 	beq.w	800162a <wm8994_Init+0x4e2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001254:	2283      	movs	r2, #131	@ 0x83
 8001256:	e0f2      	b.n	800143e <wm8994_Init+0x2f6>
 8001258:	2203      	movs	r2, #3
 800125a:	e79b      	b.n	8001194 <wm8994_Init+0x4c>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800125c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001260:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001264:	f04f 0105 	mov.w	r1, #5
 8001268:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800126a:	d149      	bne.n	8001300 <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 800126c:	f000 fbbc 	bl	80019e8 <AUDIO_IO_Write>
 8001270:	4632      	mov	r2, r6
 8001272:	f240 6101 	movw	r1, #1537	@ 0x601
 8001276:	4620      	mov	r0, r4
 8001278:	f000 fbb6 	bl	80019e8 <AUDIO_IO_Write>
 800127c:	4632      	mov	r2, r6
 800127e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001282:	4620      	mov	r0, r4
 8001284:	f000 fbb0 	bl	80019e8 <AUDIO_IO_Write>
 8001288:	4632      	mov	r2, r6
 800128a:	f240 6104 	movw	r1, #1540	@ 0x604
 800128e:	4620      	mov	r0, r4
 8001290:	f000 fbaa 	bl	80019e8 <AUDIO_IO_Write>
 8001294:	4632      	mov	r2, r6
 8001296:	f240 6105 	movw	r1, #1541	@ 0x605
 800129a:	4620      	mov	r0, r4
 800129c:	f000 fba4 	bl	80019e8 <AUDIO_IO_Write>
    inputEnabled = 1;
 80012a0:	f8cb 8004 	str.w	r8, [fp, #4]
 AUDIO_IO_Write(Addr, Reg, Value);
 80012a4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80012a8:	2104      	movs	r1, #4
 80012aa:	4620      	mov	r0, r4
 80012ac:	f000 fb9c 	bl	80019e8 <AUDIO_IO_Write>
 80012b0:	22db      	movs	r2, #219	@ 0xdb
 80012b2:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80012b6:	4620      	mov	r0, r4
 80012b8:	f000 fb96 	bl	80019e8 <AUDIO_IO_Write>
 80012bc:	22db      	movs	r2, #219	@ 0xdb
 80012be:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80012c2:	4620      	mov	r0, r4
 80012c4:	f000 fb90 	bl	80019e8 <AUDIO_IO_Write>
 80012c8:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80012cc:	2102      	movs	r1, #2
 80012ce:	4620      	mov	r0, r4
 80012d0:	f000 fb8a 	bl	80019e8 <AUDIO_IO_Write>
 80012d4:	2202      	movs	r2, #2
 80012d6:	f240 6106 	movw	r1, #1542	@ 0x606
 80012da:	4620      	mov	r0, r4
 80012dc:	f000 fb84 	bl	80019e8 <AUDIO_IO_Write>
 80012e0:	2202      	movs	r2, #2
 80012e2:	f240 6107 	movw	r1, #1543	@ 0x607
 80012e6:	4620      	mov	r0, r4
 80012e8:	f000 fb7e 	bl	80019e8 <AUDIO_IO_Write>
 80012ec:	2202      	movs	r2, #2
 80012ee:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80012f2:	4620      	mov	r0, r4
 80012f4:	f000 fb78 	bl	80019e8 <AUDIO_IO_Write>
 80012f8:	2202      	movs	r2, #2
 80012fa:	f240 6109 	movw	r1, #1545	@ 0x609
 80012fe:	e07b      	b.n	80013f8 <wm8994_Init+0x2b0>
 8001300:	f000 fb72 	bl	80019e8 <AUDIO_IO_Write>
 8001304:	4642      	mov	r2, r8
 8001306:	f240 6101 	movw	r1, #1537	@ 0x601
 800130a:	4620      	mov	r0, r4
 800130c:	f000 fb6c 	bl	80019e8 <AUDIO_IO_Write>
 8001310:	4642      	mov	r2, r8
 8001312:	e764      	b.n	80011de <wm8994_Init+0x96>
 8001314:	f240 3203 	movw	r2, #771	@ 0x303
 8001318:	2105      	movs	r1, #5
 800131a:	4620      	mov	r0, r4
 800131c:	f000 fb64 	bl	80019e8 <AUDIO_IO_Write>
 8001320:	4642      	mov	r2, r8
 8001322:	f240 6101 	movw	r1, #1537	@ 0x601
 8001326:	4620      	mov	r0, r4
 8001328:	f000 fb5e 	bl	80019e8 <AUDIO_IO_Write>
 800132c:	4642      	mov	r2, r8
 800132e:	f240 6102 	movw	r1, #1538	@ 0x602
 8001332:	4620      	mov	r0, r4
 8001334:	f000 fb58 	bl	80019e8 <AUDIO_IO_Write>
 8001338:	2200      	movs	r2, #0
 800133a:	f240 6104 	movw	r1, #1540	@ 0x604
 800133e:	4620      	mov	r0, r4
 8001340:	f000 fb52 	bl	80019e8 <AUDIO_IO_Write>
 8001344:	2200      	movs	r2, #0
 8001346:	e756      	b.n	80011f6 <wm8994_Init+0xae>
    outputEnabled = 0;
 8001348:	f8cb 6000 	str.w	r6, [fp]
 800134c:	e758      	b.n	8001200 <wm8994_Init+0xb8>
    switch (input_device)
 800134e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001352:	d0a7      	beq.n	80012a4 <wm8994_Init+0x15c>
 8001354:	e769      	b.n	800122a <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001356:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 800135a:	2104      	movs	r1, #4
 800135c:	4620      	mov	r0, r4
 800135e:	f000 fb43 	bl	80019e8 <AUDIO_IO_Write>
 8001362:	22db      	movs	r2, #219	@ 0xdb
 8001364:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8001368:	4620      	mov	r0, r4
 800136a:	f000 fb3d 	bl	80019e8 <AUDIO_IO_Write>
 800136e:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8001372:	2102      	movs	r1, #2
 8001374:	4620      	mov	r0, r4
 8001376:	f000 fb37 	bl	80019e8 <AUDIO_IO_Write>
 800137a:	2202      	movs	r2, #2
 800137c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8001380:	4620      	mov	r0, r4
 8001382:	f000 fb31 	bl	80019e8 <AUDIO_IO_Write>
 8001386:	2202      	movs	r2, #2
 8001388:	f240 6109 	movw	r1, #1545	@ 0x609
 800138c:	4620      	mov	r0, r4
 800138e:	f000 fb2b 	bl	80019e8 <AUDIO_IO_Write>
 8001392:	220e      	movs	r2, #14
 8001394:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001398:	4620      	mov	r0, r4
 800139a:	f000 fb25 	bl	80019e8 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800139e:	f04f 0800 	mov.w	r8, #0
 80013a2:	e742      	b.n	800122a <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 80013a4:	2211      	movs	r2, #17
 80013a6:	2128      	movs	r1, #40	@ 0x28
 80013a8:	4620      	mov	r0, r4
 80013aa:	f000 fb1d 	bl	80019e8 <AUDIO_IO_Write>
 80013ae:	2235      	movs	r2, #53	@ 0x35
 80013b0:	2129      	movs	r1, #41	@ 0x29
 80013b2:	4620      	mov	r0, r4
 80013b4:	f000 fb18 	bl	80019e8 <AUDIO_IO_Write>
 80013b8:	2235      	movs	r2, #53	@ 0x35
 80013ba:	212a      	movs	r1, #42	@ 0x2a
 80013bc:	4620      	mov	r0, r4
 80013be:	f000 fb13 	bl	80019e8 <AUDIO_IO_Write>
 80013c2:	f240 3203 	movw	r2, #771	@ 0x303
 80013c6:	2104      	movs	r1, #4
 80013c8:	4620      	mov	r0, r4
 80013ca:	f000 fb0d 	bl	80019e8 <AUDIO_IO_Write>
 80013ce:	22db      	movs	r2, #219	@ 0xdb
 80013d0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 fb07 	bl	80019e8 <AUDIO_IO_Write>
 80013da:	f246 3250 	movw	r2, #25424	@ 0x6350
 80013de:	2102      	movs	r1, #2
 80013e0:	4620      	mov	r0, r4
 80013e2:	f000 fb01 	bl	80019e8 <AUDIO_IO_Write>
 80013e6:	2202      	movs	r2, #2
 80013e8:	f240 6106 	movw	r1, #1542	@ 0x606
 80013ec:	4620      	mov	r0, r4
 80013ee:	f000 fafb 	bl	80019e8 <AUDIO_IO_Write>
 80013f2:	2202      	movs	r2, #2
 80013f4:	f240 6107 	movw	r1, #1543	@ 0x607
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 faf5 	bl	80019e8 <AUDIO_IO_Write>
 80013fe:	220d      	movs	r2, #13
 8001400:	e7c8      	b.n	8001394 <wm8994_Init+0x24c>
 8001402:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8001406:	e7de      	b.n	80013c6 <wm8994_Init+0x27e>
    inputEnabled = 0;
 8001408:	f8cb 5004 	str.w	r5, [fp, #4]
 800140c:	e7c7      	b.n	800139e <wm8994_Init+0x256>
  switch (AudioFreq)
 800140e:	f245 6322 	movw	r3, #22050	@ 0x5622
 8001412:	429f      	cmp	r7, r3
 8001414:	f47f af1e 	bne.w	8001254 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001418:	2243      	movs	r2, #67	@ 0x43
 800141a:	e010      	b.n	800143e <wm8994_Init+0x2f6>
  switch (AudioFreq)
 800141c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8001420:	429f      	cmp	r7, r3
 8001422:	f43f af17 	beq.w	8001254 <wm8994_Init+0x10c>
 8001426:	4b9d      	ldr	r3, [pc, #628]	@ (800169c <wm8994_Init+0x554>)
 8001428:	429f      	cmp	r7, r3
 800142a:	f000 80fc 	beq.w	8001626 <wm8994_Init+0x4de>
 800142e:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001432:	429f      	cmp	r7, r3
 8001434:	f47f af0e 	bne.w	8001254 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001438:	2273      	movs	r2, #115	@ 0x73
 800143a:	e000      	b.n	800143e <wm8994_Init+0x2f6>
 800143c:	2203      	movs	r2, #3
 800143e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001442:	4620      	mov	r0, r4
 8001444:	f000 fad0 	bl	80019e8 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001448:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800144c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001450:	4620      	mov	r0, r4
 8001452:	bf0c      	ite	eq
 8001454:	f244 0218 	movweq	r2, #16408	@ 0x4018
 8001458:	f244 0210 	movwne	r2, #16400	@ 0x4010
 800145c:	f000 fac4 	bl	80019e8 <AUDIO_IO_Write>
 8001460:	2200      	movs	r2, #0
 8001462:	f240 3102 	movw	r1, #770	@ 0x302
 8001466:	4620      	mov	r0, r4
 8001468:	f000 fabe 	bl	80019e8 <AUDIO_IO_Write>
 800146c:	220a      	movs	r2, #10
 800146e:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8001472:	4620      	mov	r0, r4
 8001474:	f000 fab8 	bl	80019e8 <AUDIO_IO_Write>
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800147e:	4620      	mov	r0, r4
 8001480:	f000 fab2 	bl	80019e8 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8001484:	2e00      	cmp	r6, #0
 8001486:	f000 80a9 	beq.w	80015dc <wm8994_Init+0x494>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800148a:	2e02      	cmp	r6, #2
 800148c:	d123      	bne.n	80014d6 <wm8994_Init+0x38e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800148e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001492:	212d      	movs	r1, #45	@ 0x2d
 8001494:	4620      	mov	r0, r4
      if(ColdStartup)
 8001496:	4e82      	ldr	r6, [pc, #520]	@ (80016a0 <wm8994_Init+0x558>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8001498:	f000 faa6 	bl	80019e8 <AUDIO_IO_Write>
 800149c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014a0:	212e      	movs	r1, #46	@ 0x2e
 80014a2:	4620      	mov	r0, r4
 80014a4:	f000 faa0 	bl	80019e8 <AUDIO_IO_Write>
      if(ColdStartup)
 80014a8:	7833      	ldrb	r3, [r6, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80bf 	beq.w	800162e <wm8994_Init+0x4e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80014b6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80014ba:	f000 fa95 	bl	80019e8 <AUDIO_IO_Write>
        ColdStartup=0;
 80014be:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 80014c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
        ColdStartup=0;
 80014c4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 80014c6:	f000 fabb 	bl	8001a40 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80014d0:	4620      	mov	r0, r4
 80014d2:	f000 fa89 	bl	80019e8 <AUDIO_IO_Write>
 80014d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014da:	2103      	movs	r1, #3
 80014dc:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80014de:	f243 3603 	movw	r6, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 80014e2:	f000 fa81 	bl	80019e8 <AUDIO_IO_Write>
 80014e6:	2200      	movs	r2, #0
 80014e8:	2122      	movs	r1, #34	@ 0x22
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 fa7c 	bl	80019e8 <AUDIO_IO_Write>
 80014f0:	2200      	movs	r2, #0
 80014f2:	2123      	movs	r1, #35	@ 0x23
 80014f4:	4620      	mov	r0, r4
 80014f6:	f000 fa77 	bl	80019e8 <AUDIO_IO_Write>
 80014fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014fe:	2136      	movs	r1, #54	@ 0x36
 8001500:	4620      	mov	r0, r4
 8001502:	f000 fa71 	bl	80019e8 <AUDIO_IO_Write>
 8001506:	f243 0203 	movw	r2, #12291	@ 0x3003
 800150a:	2101      	movs	r1, #1
 800150c:	4620      	mov	r0, r4
 800150e:	f000 fa6b 	bl	80019e8 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001512:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001516:	f04f 0151 	mov.w	r1, #81	@ 0x51
 800151a:	4620      	mov	r0, r4
 800151c:	bf0c      	ite	eq
 800151e:	f240 2205 	movweq	r2, #517	@ 0x205
 8001522:	2205      	movne	r2, #5
 8001524:	f000 fa60 	bl	80019e8 <AUDIO_IO_Write>
 8001528:	f243 3203 	movw	r2, #13059	@ 0x3303
 800152c:	2101      	movs	r1, #1
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fa5a 	bl	80019e8 <AUDIO_IO_Write>
 8001534:	2222      	movs	r2, #34	@ 0x22
 8001536:	2160      	movs	r1, #96	@ 0x60
 8001538:	4620      	mov	r0, r4
 800153a:	f000 fa55 	bl	80019e8 <AUDIO_IO_Write>
 800153e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8001542:	214c      	movs	r1, #76	@ 0x4c
 8001544:	4620      	mov	r0, r4
 8001546:	f000 fa4f 	bl	80019e8 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 fa78 	bl	8001a40 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001550:	2201      	movs	r2, #1
 8001552:	212d      	movs	r1, #45	@ 0x2d
 8001554:	4620      	mov	r0, r4
 8001556:	f000 fa47 	bl	80019e8 <AUDIO_IO_Write>
 800155a:	2201      	movs	r2, #1
 800155c:	212e      	movs	r1, #46	@ 0x2e
 800155e:	4620      	mov	r0, r4
 8001560:	f000 fa42 	bl	80019e8 <AUDIO_IO_Write>
 8001564:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8001568:	2103      	movs	r1, #3
 800156a:	4620      	mov	r0, r4
 800156c:	f000 fa3c 	bl	80019e8 <AUDIO_IO_Write>
 8001570:	2233      	movs	r2, #51	@ 0x33
 8001572:	2154      	movs	r1, #84	@ 0x54
 8001574:	4620      	mov	r0, r4
 8001576:	f000 fa37 	bl	80019e8 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 800157a:	f240 1001 	movw	r0, #257	@ 0x101
 800157e:	f000 fa5f 	bl	8001a40 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001582:	22ee      	movs	r2, #238	@ 0xee
 8001584:	2160      	movs	r1, #96	@ 0x60
 8001586:	4620      	mov	r0, r4
 8001588:	f000 fa2e 	bl	80019e8 <AUDIO_IO_Write>
 800158c:	22c0      	movs	r2, #192	@ 0xc0
 800158e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001592:	4620      	mov	r0, r4
 8001594:	f000 fa28 	bl	80019e8 <AUDIO_IO_Write>
 8001598:	22c0      	movs	r2, #192	@ 0xc0
 800159a:	f240 6111 	movw	r1, #1553	@ 0x611
 800159e:	4620      	mov	r0, r4
 80015a0:	f000 fa22 	bl	80019e8 <AUDIO_IO_Write>
 80015a4:	2210      	movs	r2, #16
 80015a6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 fa1c 	bl	80019e8 <AUDIO_IO_Write>
 80015b0:	22c0      	movs	r2, #192	@ 0xc0
 80015b2:	f240 6112 	movw	r1, #1554	@ 0x612
 80015b6:	4620      	mov	r0, r4
 80015b8:	f000 fa16 	bl	80019e8 <AUDIO_IO_Write>
 80015bc:	22c0      	movs	r2, #192	@ 0xc0
 80015be:	f240 6113 	movw	r1, #1555	@ 0x613
 80015c2:	4620      	mov	r0, r4
 80015c4:	f000 fa10 	bl	80019e8 <AUDIO_IO_Write>
 80015c8:	2210      	movs	r2, #16
 80015ca:	f240 4122 	movw	r1, #1058	@ 0x422
 80015ce:	4620      	mov	r0, r4
 80015d0:	f000 fa0a 	bl	80019e8 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 80015d4:	4651      	mov	r1, sl
 80015d6:	4648      	mov	r0, r9
 80015d8:	f7ff fd34 	bl	8001044 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 80015dc:	b1e5      	cbz	r5, 8001618 <wm8994_Init+0x4d0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80015de:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80015e2:	d002      	beq.n	80015ea <wm8994_Init+0x4a2>
 80015e4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80015e8:	d12a      	bne.n	8001640 <wm8994_Init+0x4f8>
 AUDIO_IO_Write(Addr, Reg, Value);
 80015ea:	f046 0213 	orr.w	r2, r6, #19
 80015ee:	2101      	movs	r1, #1
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 f9f9 	bl	80019e8 <AUDIO_IO_Write>
 80015f6:	2202      	movs	r2, #2
 80015f8:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80015fc:	4620      	mov	r0, r4
 80015fe:	f000 f9f3 	bl	80019e8 <AUDIO_IO_Write>
 8001602:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001606:	f240 4111 	movw	r1, #1041	@ 0x411
 800160a:	4620      	mov	r0, r4
 800160c:	f000 f9ec 	bl	80019e8 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001610:	4651      	mov	r1, sl
 8001612:	4648      	mov	r0, r9
 8001614:	f7ff fd16 	bl	8001044 <wm8994_SetVolume>
}
 8001618:	4640      	mov	r0, r8
 800161a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800161e:	2233      	movs	r2, #51	@ 0x33
 8001620:	e70d      	b.n	800143e <wm8994_Init+0x2f6>
 8001622:	2263      	movs	r2, #99	@ 0x63
 8001624:	e70b      	b.n	800143e <wm8994_Init+0x2f6>
 8001626:	22a3      	movs	r2, #163	@ 0xa3
 8001628:	e709      	b.n	800143e <wm8994_Init+0x2f6>
 800162a:	2213      	movs	r2, #19
 800162c:	e707      	b.n	800143e <wm8994_Init+0x2f6>
 800162e:	4620      	mov	r0, r4
 8001630:	f248 1208 	movw	r2, #33032	@ 0x8108
 8001634:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001638:	f000 f9d6 	bl	80019e8 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 800163c:	2032      	movs	r0, #50	@ 0x32
 800163e:	e742      	b.n	80014c6 <wm8994_Init+0x37e>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001640:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8001644:	d115      	bne.n	8001672 <wm8994_Init+0x52a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001646:	f046 0213 	orr.w	r2, r6, #19
 800164a:	2101      	movs	r1, #1
 800164c:	4620      	mov	r0, r4
 800164e:	f000 f9cb 	bl	80019e8 <AUDIO_IO_Write>
 8001652:	2202      	movs	r2, #2
 8001654:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001658:	4620      	mov	r0, r4
 800165a:	f000 f9c5 	bl	80019e8 <AUDIO_IO_Write>
 800165e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001662:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001666:	4620      	mov	r0, r4
 8001668:	f000 f9be 	bl	80019e8 <AUDIO_IO_Write>
 800166c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001670:	e7c9      	b.n	8001606 <wm8994_Init+0x4be>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001672:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 8001676:	d002      	beq.n	800167e <wm8994_Init+0x536>
 8001678:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800167c:	d1c8      	bne.n	8001610 <wm8994_Init+0x4c8>
 AUDIO_IO_Write(Addr, Reg, Value);
 800167e:	220b      	movs	r2, #11
 8001680:	2118      	movs	r1, #24
 8001682:	4620      	mov	r0, r4
 8001684:	f000 f9b0 	bl	80019e8 <AUDIO_IO_Write>
 8001688:	220b      	movs	r2, #11
 800168a:	211a      	movs	r1, #26
 800168c:	4620      	mov	r0, r4
 800168e:	f000 f9ab 	bl	80019e8 <AUDIO_IO_Write>
 8001692:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8001696:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800169a:	e7b6      	b.n	800160a <wm8994_Init+0x4c2>
 800169c:	00017700 	.word	0x00017700
 80016a0:	20000000 	.word	0x20000000
 80016a4:	200001dc 	.word	0x200001dc

080016a8 <wm8994_Stop>:
{
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 80016aa:	4f19      	ldr	r7, [pc, #100]	@ (8001710 <wm8994_Stop+0x68>)
{
 80016ac:	4604      	mov	r4, r0
 80016ae:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 80016b0:	683d      	ldr	r5, [r7, #0]
 80016b2:	b355      	cbz	r5, 800170a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80016b4:	2101      	movs	r1, #1
 80016b6:	f7ff fc8f 	bl	8000fd8 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80016ba:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80016bc:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 80016be:	d024      	beq.n	800170a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80016c0:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 80016c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 f98c 	bl	80019e8 <AUDIO_IO_Write>
 80016d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d4:	f240 4122 	movw	r1, #1058	@ 0x422
 80016d8:	4620      	mov	r0, r4
 80016da:	f000 f985 	bl	80019e8 <AUDIO_IO_Write>
 80016de:	2200      	movs	r2, #0
 80016e0:	212d      	movs	r1, #45	@ 0x2d
 80016e2:	4620      	mov	r0, r4
 80016e4:	f000 f980 	bl	80019e8 <AUDIO_IO_Write>
 80016e8:	2200      	movs	r2, #0
 80016ea:	212e      	movs	r1, #46	@ 0x2e
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 f97b 	bl	80019e8 <AUDIO_IO_Write>
 80016f2:	2200      	movs	r2, #0
 80016f4:	2105      	movs	r1, #5
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 f976 	bl	80019e8 <AUDIO_IO_Write>
 80016fc:	2200      	movs	r2, #0
 80016fe:	4620      	mov	r0, r4
 8001700:	4611      	mov	r1, r2
 8001702:	f000 f971 	bl	80019e8 <AUDIO_IO_Write>
      outputEnabled = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
}
 800170a:	4628      	mov	r0, r5
 800170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800170e:	bf00      	nop
 8001710:	200001dc 	.word	0x200001dc

08001714 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800171a:	f002 fa7d 	bl	8003c18 <HAL_I2C_GetState>
 800171e:	2800      	cmp	r0, #0
 8001720:	f040 8096 	bne.w	8001850 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001724:	4b4b      	ldr	r3, [pc, #300]	@ (8001854 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001726:	2600      	movs	r6, #0
 8001728:	4c4b      	ldr	r4, [pc, #300]	@ (8001858 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800172a:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 800172c:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800172e:	bf0c      	ite	eq
 8001730:	4a4a      	ldreq	r2, [pc, #296]	@ (800185c <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001732:	4a4b      	ldrne	r2, [pc, #300]	@ (8001860 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001734:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001736:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8001738:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <I2Cx_Init+0x150>)
 800173a:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800173e:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001742:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001746:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800174a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800174c:	d143      	bne.n	80017d6 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800174e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001752:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001754:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001758:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800175a:	6323      	str	r3, [r4, #48]	@ 0x30
 800175c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 800175e:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001768:	2312      	movs	r3, #18
 800176a:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800176e:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001770:	483d      	ldr	r0, [pc, #244]	@ (8001868 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001772:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001776:	f001 fdf7 	bl	8003368 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800177a:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800177e:	a905      	add	r1, sp, #20
 8001780:	4839      	ldr	r0, [pc, #228]	@ (8001868 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001782:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001784:	f001 fdf0 	bl	8003368 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800178a:	4632      	mov	r2, r6
 800178c:	210f      	movs	r1, #15
 800178e:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001790:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001794:	6423      	str	r3, [r4, #64]	@ 0x40
 8001796:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179c:	9302      	str	r3, [sp, #8]
 800179e:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80017a0:	6a23      	ldr	r3, [r4, #32]
 80017a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017a6:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80017a8:	6a23      	ldr	r3, [r4, #32]
 80017aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017ae:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80017b0:	f001 f9f6 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80017b4:	2048      	movs	r0, #72	@ 0x48
 80017b6:	f001 fa25 	bl	8002c04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80017ba:	2049      	movs	r0, #73	@ 0x49
 80017bc:	4632      	mov	r2, r6
 80017be:	210f      	movs	r1, #15
 80017c0:	f001 f9ee 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80017c4:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80017c6:	f001 fa1d 	bl	8002c04 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80017ca:	4628      	mov	r0, r5
  }
}
 80017cc:	b00a      	add	sp, #40	@ 0x28
 80017ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 80017d2:	f001 bff9 	b.w	80037c8 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80017d6:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017da:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80017de:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017e0:	4822      	ldr	r0, [pc, #136]	@ (800186c <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80017e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80017e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 80017e6:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80017f6:	2304      	movs	r3, #4
 80017f8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017fc:	a905      	add	r1, sp, #20
 80017fe:	f001 fdb3 	bl	8003368 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001802:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001806:	a905      	add	r1, sp, #20
 8001808:	4818      	ldr	r0, [pc, #96]	@ (800186c <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800180a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800180c:	f001 fdac 	bl	8003368 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001812:	4632      	mov	r2, r6
 8001814:	210f      	movs	r1, #15
 8001816:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800181c:	6423      	str	r3, [r4, #64]	@ 0x40
 800181e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001824:	9304      	str	r3, [sp, #16]
 8001826:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001828:	6a23      	ldr	r3, [r4, #32]
 800182a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800182e:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001830:	6a23      	ldr	r3, [r4, #32]
 8001832:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001836:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001838:	f001 f9b2 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800183c:	201f      	movs	r0, #31
 800183e:	f001 f9e1 	bl	8002c04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001842:	2020      	movs	r0, #32
 8001844:	4632      	mov	r2, r6
 8001846:	210f      	movs	r1, #15
 8001848:	f001 f9aa 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800184c:	2020      	movs	r0, #32
 800184e:	e7ba      	b.n	80017c6 <I2Cx_Init+0xb2>
}
 8001850:	b00a      	add	sp, #40	@ 0x28
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	200001e4 	.word	0x200001e4
 8001858:	40023800 	.word	0x40023800
 800185c:	40005c00 	.word	0x40005c00
 8001860:	40005400 	.word	0x40005400
 8001864:	40912732 	.word	0x40912732
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40020400 	.word	0x40020400

08001870 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001870:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001872:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 8001876:	b085      	sub	sp, #20
 8001878:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800187a:	9402      	str	r4, [sp, #8]
 800187c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8001880:	9401      	str	r4, [sp, #4]
 8001882:	9c08      	ldr	r4, [sp, #32]
 8001884:	9400      	str	r4, [sp, #0]
 8001886:	f002 f80f 	bl	80038a8 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 800188a:	4604      	mov	r4, r0
 800188c:	b128      	cbz	r0, 800189a <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800188e:	4628      	mov	r0, r5
 8001890:	f001 fff0 	bl	8003874 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff ff3d 	bl	8001714 <I2Cx_Init>
}
 800189a:	4620      	mov	r0, r4
 800189c:	b005      	add	sp, #20
 800189e:	bd30      	pop	{r4, r5, pc}

080018a0 <I2Cx_ReadMultiple>:
{
 80018a0:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018a2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 80018a6:	b085      	sub	sp, #20
 80018a8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018aa:	9402      	str	r4, [sp, #8]
 80018ac:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80018b0:	9401      	str	r4, [sp, #4]
 80018b2:	9c08      	ldr	r4, [sp, #32]
 80018b4:	9400      	str	r4, [sp, #0]
 80018b6:	f002 f8d1 	bl	8003a5c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80018ba:	4604      	mov	r4, r0
 80018bc:	b128      	cbz	r0, 80018ca <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80018be:	4628      	mov	r0, r5
 80018c0:	f001 ffd8 	bl	8003874 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80018c4:	4628      	mov	r0, r5
 80018c6:	f7ff ff25 	bl	8001714 <I2Cx_Init>
}
 80018ca:	4620      	mov	r0, r4
 80018cc:	b005      	add	sp, #20
 80018ce:	bd30      	pop	{r4, r5, pc}

080018d0 <BSP_LED_Init>:
{
 80018d0:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 80018d2:	4604      	mov	r4, r0
{
 80018d4:	b087      	sub	sp, #28
  if (Led == LED1)
 80018d6:	b9c8      	cbnz	r0, 800190c <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80018dc:	a901      	add	r1, sp, #4
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 80018e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80018f8:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 80018fe:	f001 fd33 	bl	8003368 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001902:	4622      	mov	r2, r4
 8001904:	4629      	mov	r1, r5
 8001906:	4803      	ldr	r0, [pc, #12]	@ (8001914 <BSP_LED_Init+0x44>)
 8001908:	f001 fe18 	bl	800353c <HAL_GPIO_WritePin>
}
 800190c:	b007      	add	sp, #28
 800190e:	bd30      	pop	{r4, r5, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40022000 	.word	0x40022000

08001918 <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001918:	4b25      	ldr	r3, [pc, #148]	@ (80019b0 <BSP_PB_Init+0x98>)
 800191a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800191c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8001920:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001922:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8001924:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	4604      	mov	r4, r0
 800192a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192e:	b990      	cbnz	r0, 8001956 <BSP_PB_Init+0x3e>
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001934:	b9b9      	cbnz	r1, 8001966 <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001938:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800193a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800193e:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001942:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001944:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001946:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <BSP_PB_Init+0xa0>)
 800194a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800194e:	f001 fd0b 	bl	8003368 <HAL_GPIO_Init>
}
 8001952:	b008      	add	sp, #32
 8001954:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001956:	2801      	cmp	r0, #1
 8001958:	d102      	bne.n	8001960 <BSP_PB_Init+0x48>
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9b01      	ldr	r3, [sp, #4]
 800195e:	e7e9      	b.n	8001934 <BSP_PB_Init+0x1c>
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	9b02      	ldr	r3, [sp, #8]
 8001964:	e7e6      	b.n	8001934 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001966:	2901      	cmp	r1, #1
 8001968:	d1f3      	bne.n	8001952 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800196a:	4d12      	ldr	r5, [pc, #72]	@ (80019b4 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800196c:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800196e:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001970:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001974:	42b4      	cmp	r4, r6
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001976:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800197a:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800197c:	f04f 0302 	mov.w	r3, #2
 8001980:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8001984:	bf0c      	ite	eq
 8001986:	f44f 1388 	moveq.w	r3, #1114112	@ 0x110000
 800198a:	f44f 1304 	movne.w	r3, #2162688	@ 0x210000
 800198e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <BSP_PB_Init+0xa0>)
 8001992:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001996:	f001 fce7 	bl	8003368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800199a:	f995 4006 	ldrsb.w	r4, [r5, #6]
 800199e:	4632      	mov	r2, r6
 80019a0:	210f      	movs	r1, #15
 80019a2:	4620      	mov	r0, r4
 80019a4:	f001 f8fc 	bl	8002ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80019a8:	4620      	mov	r0, r4
 80019aa:	f001 f92b 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 80019ae:	e7d0      	b.n	8001952 <BSP_PB_Init+0x3a>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08006d28 	.word	0x08006d28
 80019b8:	20000034 	.word	0x20000034

080019bc <BSP_PB_GetState>:
{
 80019bc:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <BSP_PB_GetState+0x14>)
 80019c0:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <BSP_PB_GetState+0x18>)
 80019c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80019ca:	f001 fdb1 	bl	8003530 <HAL_GPIO_ReadPin>
}
 80019ce:	bd08      	pop	{r3, pc}
 80019d0:	08006d28 	.word	0x08006d28
 80019d4:	20000034 	.word	0x20000034

080019d8 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 80019d8:	4801      	ldr	r0, [pc, #4]	@ (80019e0 <AUDIO_IO_Init+0x8>)
 80019da:	f7ff be9b 	b.w	8001714 <I2Cx_Init>
 80019de:	bf00      	nop
 80019e0:	200001e4 	.word	0x200001e4

080019e4 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 80019e4:	4770      	bx	lr
	...

080019e8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80019e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80019ea:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80019ec:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80019ee:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80019f2:	f10d 020e 	add.w	r2, sp, #14
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	9200      	str	r2, [sp, #0]
 80019fa:	460a      	mov	r2, r1
 80019fc:	4601      	mov	r1, r0
 80019fe:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <AUDIO_IO_Write+0x24>)
 8001a00:	f7ff ff36 	bl	8001870 <I2Cx_WriteMultiple>
}
 8001a04:	b005      	add	sp, #20
 8001a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a0a:	bf00      	nop
 8001a0c:	200001e4 	.word	0x200001e4

08001a10 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001a12:	2300      	movs	r3, #0
{
 8001a14:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001a16:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 8001a1a:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001a1e:	2302      	movs	r3, #2
 8001a20:	9100      	str	r1, [sp, #0]
 8001a22:	4601      	mov	r1, r0
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <AUDIO_IO_Read+0x2c>)
 8001a28:	f7ff ff3a 	bl	80018a0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001a2c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001a30:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8001a32:	b280      	uxth	r0, r0
 8001a34:	b005      	add	sp, #20
 8001a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a3a:	bf00      	nop
 8001a3c:	200001e4 	.word	0x200001e4

08001a40 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001a40:	f001 b88a 	b.w	8002b58 <HAL_Delay>

08001a44 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a48:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <SAIx_Out_DeInit+0x1c>)
 8001a4a:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001a4c:	6853      	ldr	r3, [r2, #4]
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a52:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001a54:	f003 b973 	b.w	8004d3e <HAL_SAI_DeInit>
 8001a58:	40015c04 	.word	0x40015c04
 8001a5c:	40015c00 	.word	0x40015c00
 8001a60:	2000028c 	.word	0x2000028c

08001a64 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001a66:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001a68:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <SAIx_In_DeInit+0x20>)
 8001a6a:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001a6e:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a74:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8001a76:	f003 b962 	b.w	8004d3e <HAL_SAI_DeInit>
 8001a7a:	bf00      	nop
 8001a7c:	40015c24 	.word	0x40015c24
 8001a80:	40015c00 	.word	0x40015c00
 8001a84:	2000028c 	.word	0x2000028c

08001a88 <SAIx_In_Init>:
{
 8001a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001a8e:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a90:	4c35      	ldr	r4, [pc, #212]	@ (8001b68 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001a92:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001a94:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8001b70 <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001a98:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a9c:	6023      	str	r3, [r4, #0]
{
 8001a9e:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001aa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001aa4:	f44f 2a80 	mov.w	sl, #262144	@ 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001aa8:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab0:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001ab4:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001ab6:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001ab8:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001aba:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 8001abc:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001abe:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001ac0:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ac2:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ac4:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ac6:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ac8:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001aca:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001acc:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad4:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001ad6:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001ad8:	e9c4 9117 	strd	r9, r1, [r4, #92]	@ 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001adc:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001ae0:	e9c4 b512 	strd	fp, r5, [r4, #72]	@ 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001ae4:	e9c4 a514 	strd	sl, r5, [r4, #80]	@ 0x50
  HAL_SAI_Init(&haudio_out_sai);
 8001ae8:	f003 f84c 	bl	8004b84 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001aec:	481f      	ldr	r0, [pc, #124]	@ (8001b6c <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001aee:	2380      	movs	r3, #128	@ 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001af0:	2240      	movs	r2, #64	@ 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001af2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001af6:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001afa:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001afc:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8001b00:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b04:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001b06:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b0a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  HAL_SAI_Init(&haudio_in_sai);
 8001b0e:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001b12:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b16:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b1a:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8001b1e:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8001b22:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b26:	f8c4 609c 	str.w	r6, [r4, #156]	@ 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001b2a:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b2e:	e9c4 352e 	strd	r3, r5, [r4, #184]	@ 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001b32:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b34:	e9c4 b533 	strd	fp, r5, [r4, #204]	@ 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001b38:	e9c4 2331 	strd	r2, r3, [r4, #196]	@ 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001b3c:	e9c4 a535 	strd	sl, r5, [r4, #212]	@ 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8001b40:	e9c4 5937 	strd	r5, r9, [r4, #220]	@ 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8001b44:	f003 f81e 	bl	8004b84 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001b48:	6822      	ldr	r2, [r4, #0]
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	ea43 030b 	orr.w	r3, r3, fp
 8001b50:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8001b52:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	ea43 030b 	orr.w	r3, r3, fp
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	b003      	add	sp, #12
 8001b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b64:	40015c04 	.word	0x40015c04
 8001b68:	2000028c 	.word	0x2000028c
 8001b6c:	40015c24 	.word	0x40015c24
 8001b70:	40015c00 	.word	0x40015c00

08001b74 <BSP_AUDIO_OUT_Play>:
{
 8001b74:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <BSP_AUDIO_OUT_Play+0x38>)
{
 8001b78:	4605      	mov	r5, r0
 8001b7a:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001b7c:	b28a      	uxth	r2, r1
 8001b7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b82:	4601      	mov	r1, r0
 8001b84:	2034      	movs	r0, #52	@ 0x34
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4798      	blx	r3
 8001b8a:	b960      	cbnz	r0, 8001ba6 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001b8c:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 8001b90:	4629      	mov	r1, r5
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <BSP_AUDIO_OUT_Play+0x38>)
 8001b94:	bf34      	ite	cc
 8001b96:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001b9a:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 8001b9e:	f003 f935 	bl	8004e0c <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 8001ba2:	2000      	movs	r0, #0
}
 8001ba4:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e7fc      	b.n	8001ba4 <BSP_AUDIO_OUT_Play+0x30>
 8001baa:	bf00      	nop
 8001bac:	2000028c 	.word	0x2000028c

08001bb0 <BSP_AUDIO_OUT_Stop>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001bb2:	4d0a      	ldr	r5, [pc, #40]	@ (8001bdc <BSP_AUDIO_OUT_Stop+0x2c>)
{
 8001bb4:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f003 f8df 	bl	8004d7a <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001bbc:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	2034      	movs	r0, #52	@ 0x34
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4798      	blx	r3
 8001bc8:	b930      	cbnz	r0, 8001bd8 <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 8001bca:	2c01      	cmp	r4, #1
 8001bcc:	d102      	bne.n	8001bd4 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f000 ffc2 	bl	8002b58 <HAL_Delay>
    return AUDIO_OK;
 8001bd4:	2000      	movs	r0, #0
}
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e7fc      	b.n	8001bd6 <BSP_AUDIO_OUT_Stop+0x26>
 8001bdc:	2000028c 	.word	0x2000028c

08001be0 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 8001be0:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001be2:	4c08      	ldr	r4, [pc, #32]	@ (8001c04 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	6813      	ldr	r3, [r2, #0]
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8001bee:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f002 ffc7 	bl	8004b84 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	bf00      	nop
 8001c04:	2000028c 	.word	0x2000028c

08001c08 <HAL_SAI_TxCpltCallback>:
{
 8001c08:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8001c0a:	f003 fbc1 	bl	8005390 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8001c0e:	bd08      	pop	{r3, pc}

08001c10 <HAL_SAI_TxHalfCpltCallback>:
{
 8001c10:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001c12:	f003 fbc7 	bl	80053a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001c16:	bd08      	pop	{r3, pc}

08001c18 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001c1c:	4c4d      	ldr	r4, [pc, #308]	@ (8001d54 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c20:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c24:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001c26:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c28:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c2a:	f04f 080a 	mov.w	r8, #10
{ 
 8001c2e:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001c30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001c34:	a905      	add	r1, sp, #20
 8001c36:	4848      	ldr	r0, [pc, #288]	@ (8001d58 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001c38:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001c3c:	6463      	str	r3, [r4, #68]	@ 0x44
 8001c3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001c48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001c5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c60:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001c6c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c72:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c76:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c82:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c84:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c88:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001c8c:	f001 fb6c 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001c90:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c92:	a905      	add	r1, sp, #20
 8001c94:	4830      	ldr	r0, [pc, #192]	@ (8001d58 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001c96:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c9a:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c9e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001ca2:	f001 fb61 	bl	8003368 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001ca6:	a905      	add	r1, sp, #20
 8001ca8:	482b      	ldr	r0, [pc, #172]	@ (8001d58 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001caa:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cae:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001cb2:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001cb6:	f001 fb57 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001cba:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001cbc:	a905      	add	r1, sp, #20
 8001cbe:	4826      	ldr	r0, [pc, #152]	@ (8001d58 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001cc0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001cc4:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001cc8:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001ccc:	f001 fb4c 	bl	8003368 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001cd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001cd2:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001cd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8001cda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce0:	9304      	str	r3, [sp, #16]
 8001ce2:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <BSP_AUDIO_OUT_MspInit+0x144>)
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d129      	bne.n	8001d3e <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <BSP_AUDIO_OUT_MspInit+0x148>)
 8001cec:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001cf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001cf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001cf8:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001cfc:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d00:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001d04:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001d08:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001d0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d10:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d18:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001d22:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001d26:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001d28:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001d2a:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001d2c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d30:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001d34:	f001 f866 	bl	8002e04 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f000 ffe5 	bl	8002d08 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210e      	movs	r1, #14
 8001d42:	203c      	movs	r0, #60	@ 0x3c
 8001d44:	f000 ff2c 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001d48:	203c      	movs	r0, #60	@ 0x3c
 8001d4a:	f000 ff5b 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 8001d4e:	b00a      	add	sp, #40	@ 0x28
 8001d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40015c04 	.word	0x40015c04
 8001d60:	2000028c 	.word	0x2000028c
 8001d64:	40026470 	.word	0x40026470

08001d68 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001d68:	b510      	push	{r4, lr}
 8001d6a:	b0a2      	sub	sp, #136	@ 0x88
 8001d6c:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d6e:	a801      	add	r0, sp, #4
 8001d70:	f002 fdc0 	bl	80048f4 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001d74:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d007      	beq.n	8001d8c <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001d7c:	f245 6322 	movw	r3, #22050	@ 0x5622
 8001d80:	429c      	cmp	r4, r3
 8001d82:	d003      	beq.n	8001d8c <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001d84:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	d111      	bne.n	8001db0 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001d8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d90:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001d92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d96:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001d98:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8001d9c:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001da2:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001da4:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001da6:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001da8:	f002 fb1a 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
}
 8001dac:	b022      	add	sp, #136	@ 0x88
 8001dae:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001db0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001db4:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001db6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dba:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001dbc:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8001dc0:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001dc2:	2307      	movs	r3, #7
 8001dc4:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e7ec      	b.n	8001da4 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08001dcc <BSP_AUDIO_OUT_Init>:
{ 
 8001dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dd0:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001dd2:	4c2f      	ldr	r4, [pc, #188]	@ (8001e90 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 8001dd4:	4681      	mov	r9, r0
 8001dd6:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001dd8:	4d2e      	ldr	r5, [pc, #184]	@ (8001e94 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 8001dda:	f7ff fe33 	bl	8001a44 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001dde:	4639      	mov	r1, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff ffc0 	bl	8001d68 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001de8:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001dea:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001dec:	f003 f92a 	bl	8005044 <HAL_SAI_GetState>
 8001df0:	4601      	mov	r1, r0
 8001df2:	b910      	cbnz	r0, 8001dfa <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff ff0f 	bl	8001c18 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001dfa:	4a27      	ldr	r2, [pc, #156]	@ (8001e98 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001dfc:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001dfe:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e00:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001e02:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e04:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 8001e06:	4822      	ldr	r0, [pc, #136]	@ (8001e90 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001e0c:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 8001e9c <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001e10:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001e12:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001e14:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001e16:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8001e18:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001e1a:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e1c:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001e1e:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e20:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001e22:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e24:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e26:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e2e:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001e36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e3a:	e9c4 3512 	strd	r3, r5, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001e3e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001e42:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001e46:	230f      	movs	r3, #15
 8001e48:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 8001e4c:	f002 fe9a 	bl	8004b84 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001e50:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001e52:	2034      	movs	r0, #52	@ 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e5a:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001e5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001e60:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001e62:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001e66:	4298      	cmp	r0, r3
 8001e68:	d10f      	bne.n	8001e8a <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001e6a:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 8001e6e:	2034      	movs	r0, #52	@ 0x34
 8001e70:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8001e72:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001e76:	463b      	mov	r3, r7
 8001e78:	f8d8 4000 	ldr.w	r4, [r8]
 8001e7c:	4652      	mov	r2, sl
 8001e7e:	4649      	mov	r1, r9
 8001e80:	2034      	movs	r0, #52	@ 0x34
 8001e82:	47a0      	blx	r4
    ret = AUDIO_OK;
 8001e84:	4628      	mov	r0, r5
}
 8001e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 8001e8a:	4630      	mov	r0, r6
 8001e8c:	e7fb      	b.n	8001e86 <BSP_AUDIO_OUT_Init+0xba>
 8001e8e:	bf00      	nop
 8001e90:	2000028c 	.word	0x2000028c
 8001e94:	40015c04 	.word	0x40015c04
 8001e98:	40015c00 	.word	0x40015c00
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001ea0:	b28a      	uxth	r2, r1
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <BSP_AUDIO_IN_Record+0x10>)
{
 8001ea6:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001ea8:	f003 f81c 	bl	8004ee4 <HAL_SAI_Receive_DMA>
}
 8001eac:	2000      	movs	r0, #0
 8001eae:	bd08      	pop	{r3, pc}
 8001eb0:	20000310 	.word	0x20000310

08001eb4 <BSP_AUDIO_IN_Stop>:
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001eb6:	4d0b      	ldr	r5, [pc, #44]	@ (8001ee4 <BSP_AUDIO_IN_Stop+0x30>)
{
 8001eb8:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001eba:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8001ebe:	f002 ff5c 	bl	8004d7a <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001ec2:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	2034      	movs	r0, #52	@ 0x34
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4798      	blx	r3
 8001ece:	b930      	cbnz	r0, 8001ede <BSP_AUDIO_IN_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 8001ed0:	2c01      	cmp	r4, #1
 8001ed2:	d102      	bne.n	8001eda <BSP_AUDIO_IN_Stop+0x26>
      HAL_Delay(1);
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f000 fe3f 	bl	8002b58 <HAL_Delay>
    return AUDIO_OK;
 8001eda:	2000      	movs	r0, #0
}
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001ede:	2001      	movs	r0, #1
 8001ee0:	e7fc      	b.n	8001edc <BSP_AUDIO_IN_Stop+0x28>
 8001ee2:	bf00      	nop
 8001ee4:	2000028c 	.word	0x2000028c

08001ee8 <HAL_SAI_RxCpltCallback>:
{
 8001ee8:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001eea:	f003 fca3 	bl	8005834 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001eee:	bd08      	pop	{r3, pc}

08001ef0 <HAL_SAI_RxHalfCpltCallback>:
{
 8001ef0:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001ef2:	f003 fca5 	bl	8005840 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001ef6:	bd08      	pop	{r3, pc}

08001ef8 <HAL_SAI_ErrorCallback>:
{
 8001ef8:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001efa:	480a      	ldr	r0, [pc, #40]	@ (8001f24 <HAL_SAI_ErrorCallback+0x2c>)
 8001efc:	f003 f8a2 	bl	8005044 <HAL_SAI_GetState>
 8001f00:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001f02:	4809      	ldr	r0, [pc, #36]	@ (8001f28 <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001f04:	f005 05ef 	and.w	r5, r5, #239	@ 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001f08:	f003 f89c 	bl	8005044 <HAL_SAI_GetState>
 8001f0c:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001f0e:	2d02      	cmp	r5, #2
 8001f10:	d101      	bne.n	8001f16 <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 8001f12:	f003 fa53 	bl	80053bc <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001f16:	f004 04df 	and.w	r4, r4, #223	@ 0xdf
 8001f1a:	2c02      	cmp	r4, #2
 8001f1c:	d101      	bne.n	8001f22 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 8001f1e:	f003 fc95 	bl	800584c <BSP_AUDIO_IN_Error_CallBack>
}
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	2000028c 	.word	0x2000028c
 8001f28:	20000310 	.word	0x20000310

08001f2c <BSP_AUDIO_IN_MspInit>:
{
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001f30:	4c3d      	ldr	r4, [pc, #244]	@ (8002028 <BSP_AUDIO_IN_MspInit+0xfc>)
{
 8001f32:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001f34:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001f36:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001f38:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001f3a:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 8001f3e:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001f40:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001f42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001f46:	4839      	ldr	r0, [pc, #228]	@ (800202c <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001f48:	6463      	str	r3, [r4, #68]	@ 0x44
 8001f4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001f54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001f66:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001f68:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001f6c:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f6e:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001f72:	f001 f9f9 	bl	8003368 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8001f76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001f78:	a905      	add	r1, sp, #20
 8001f7a:	482d      	ldr	r0, [pc, #180]	@ (8002030 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 8001f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f80:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	9303      	str	r3, [sp, #12]
 8001f8a:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f90:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f94:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001f98:	f001 f9e6 	bl	8003368 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001f9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001f9e:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fa6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fac:	9304      	str	r3, [sp, #16]
 8001fae:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001fb0:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <BSP_AUDIO_IN_MspInit+0x108>)
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d125      	bne.n	8002002 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001fb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001fc0:	f44f 7080 	mov.w	r0, #256	@ 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001fc4:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001fc8:	f8c3 5190 	str.w	r5, [r3, #400]	@ 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001fcc:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001fd0:	6734      	str	r4, [r6, #112]	@ 0x70
 8001fd2:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001fd6:	e9c3 1260 	strd	r1, r2, [r3, #384]	@ 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001fda:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fde:	e9c3 0262 	strd	r0, r2, [r3, #392]	@ 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001fe2:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001fe4:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001fe6:	e9c3 2565 	strd	r2, r5, [r3, #404]	@ 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001fea:	4a14      	ldr	r2, [pc, #80]	@ (800203c <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001fec:	e9c3 555c 	strd	r5, r5, [r3, #368]	@ 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ff0:	e9c3 585e 	strd	r5, r8, [r3, #376]	@ 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ff4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001ff8:	f000 ff04 	bl	8002e04 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f000 fe83 	bl	8002d08 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	210f      	movs	r1, #15
 8002006:	2046      	movs	r0, #70	@ 0x46
 8002008:	f000 fdca 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800200c:	2046      	movs	r0, #70	@ 0x46
 800200e:	f000 fdf9 	bl	8002c04 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	210f      	movs	r1, #15
 8002016:	2028      	movs	r0, #40	@ 0x28
 8002018:	f000 fdc2 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800201c:	2028      	movs	r0, #40	@ 0x28
 800201e:	f000 fdf1 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 8002022:	b00a      	add	sp, #40	@ 0x28
 8002024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40015c24 	.word	0x40015c24
 8002038:	2000028c 	.word	0x2000028c
 800203c:	400264b8 	.word	0x400264b8

08002040 <BSP_AUDIO_IN_InitEx>:
{
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8002042:	f420 7380 	bic.w	r3, r0, #256	@ 0x100
{
 8002046:	4604      	mov	r4, r0
 8002048:	460d      	mov	r5, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 800204a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204e:	d001      	beq.n	8002054 <BSP_AUDIO_IN_InitEx+0x14>
    ret = AUDIO_ERROR;
 8002050:	2001      	movs	r0, #1
}
 8002052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002054:	4e1c      	ldr	r6, [pc, #112]	@ (80020c8 <BSP_AUDIO_IN_InitEx+0x88>)
    SAIx_In_DeInit();
 8002056:	f7ff fd05 	bl	8001a64 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800205a:	2200      	movs	r2, #0
 800205c:	4629      	mov	r1, r5
 800205e:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8002062:	f7ff fe81 	bl	8001d68 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002066:	4630      	mov	r0, r6
 8002068:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <BSP_AUDIO_IN_InitEx+0x8c>)
 800206a:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800206e:	f002 ffe9 	bl	8005044 <HAL_SAI_GetState>
 8002072:	4607      	mov	r7, r0
 8002074:	b948      	cbnz	r0, 800208a <BSP_AUDIO_IN_InitEx+0x4a>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8002076:	4601      	mov	r1, r0
 8002078:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 800207c:	f7ff fdcc 	bl	8001c18 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002080:	4639      	mov	r1, r7
 8002082:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8002086:	f7ff ff51 	bl	8001f2c <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800208a:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800208e:	4f10      	ldr	r7, [pc, #64]	@ (80020d0 <BSP_AUDIO_IN_InitEx+0x90>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8002090:	462a      	mov	r2, r5
 8002092:	f04f 0001 	mov.w	r0, #1
 8002096:	bf0c      	ite	eq
 8002098:	210a      	moveq	r1, #10
 800209a:	2105      	movne	r1, #5
 800209c:	f7ff fcf4 	bl	8001a88 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2034      	movs	r0, #52	@ 0x34
 80020a4:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 80020a6:	f648 1394 	movw	r3, #35220	@ 0x8994
 80020aa:	4298      	cmp	r0, r3
 80020ac:	d1d0      	bne.n	8002050 <BSP_AUDIO_IN_InitEx+0x10>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80020ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b0:	2034      	movs	r0, #52	@ 0x34
 80020b2:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 80020b4:	f8c6 7108 	str.w	r7, [r6, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80020b8:	462b      	mov	r3, r5
 80020ba:	683e      	ldr	r6, [r7, #0]
 80020bc:	2264      	movs	r2, #100	@ 0x64
 80020be:	4621      	mov	r1, r4
 80020c0:	2034      	movs	r0, #52	@ 0x34
 80020c2:	47b0      	blx	r6
      ret = AUDIO_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e7c4      	b.n	8002052 <BSP_AUDIO_IN_InitEx+0x12>
 80020c8:	2000028c 	.word	0x2000028c
 80020cc:	40015c24 	.word	0x40015c24
 80020d0:	20000004 	.word	0x20000004

080020d4 <BSP_AUDIO_IN_Init>:
{
 80020d4:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80020d6:	460a      	mov	r2, r1
 80020d8:	4601      	mov	r1, r0
 80020da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020de:	f7ff bfaf 	b.w	8002040 <BSP_AUDIO_IN_InitEx>
	...

080020e4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80020e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80020e8:	4c1a      	ldr	r4, [pc, #104]	@ (8002154 <LL_FillBuffer+0x70>)
{
 80020ea:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80020ec:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 80020f0:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020f2:	2234      	movs	r2, #52	@ 0x34
{
 80020f4:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80020f6:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80020f8:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020fa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 80020fe:	460e      	mov	r6, r1
 8002100:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002104:	fb02 4303 	mla	r3, r2, r3, r4
 8002108:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800210c:	1eab      	subs	r3, r5, #2
 800210e:	425d      	negs	r5, r3
 8002110:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002112:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002114:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002116:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <LL_FillBuffer+0x74>)
 800211a:	60a5      	str	r5, [r4, #8]
 800211c:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800211e:	f001 f819 	bl	8003154 <HAL_DMA2D_Init>
 8002122:	b9a0      	cbnz	r0, 800214e <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002124:	4649      	mov	r1, r9
 8002126:	4620      	mov	r0, r4
 8002128:	f001 f8d8 	bl	80032dc <HAL_DMA2D_ConfigLayer>
 800212c:	b978      	cbnz	r0, 800214e <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800212e:	463b      	mov	r3, r7
 8002130:	4632      	mov	r2, r6
 8002132:	4651      	mov	r1, sl
 8002134:	4620      	mov	r0, r4
 8002136:	f8cd 8000 	str.w	r8, [sp]
 800213a:	f001 f837 	bl	80031ac <HAL_DMA2D_Start>
 800213e:	b930      	cbnz	r0, 800214e <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002140:	210a      	movs	r1, #10
 8002142:	4620      	mov	r0, r4
      }
    }
  } 
}
 8002144:	b002      	add	sp, #8
 8002146:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800214a:	f001 b849 	b.w	80031e0 <HAL_DMA2D_PollForTransfer>
}
 800214e:	b002      	add	sp, #8
 8002150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002154:	20000504 	.word	0x20000504
 8002158:	4002b000 	.word	0x4002b000

0800215c <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <BSP_LCD_GetXSize+0x14>)
 800215e:	2134      	movs	r1, #52	@ 0x34
 8002160:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002164:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002168:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000504 	.word	0x20000504

08002174 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <BSP_LCD_GetYSize+0x14>)
 8002176:	2134      	movs	r1, #52	@ 0x34
 8002178:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800217c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002180:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000504 	.word	0x20000504

0800218c <BSP_LCD_LayerDefaultInit>:
{     
 800218c:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 800218e:	2400      	movs	r4, #0
{     
 8002190:	b08e      	sub	sp, #56	@ 0x38
 8002192:	460e      	mov	r6, r1
 8002194:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8002196:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002198:	f7ff ffe0 	bl	800215c <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 800219c:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80021a0:	f7ff ffe8 	bl	8002174 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 80021a4:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 80021aa:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 80021ae:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 80021b2:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 80021b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021b8:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021bc:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021be:	4c0f      	ldr	r4, [pc, #60]	@ (80021fc <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80021c4:	f7ff ffca 	bl	800215c <BSP_LCD_GetXSize>
 80021c8:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80021ca:	f7ff ffd3 	bl	8002174 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021ce:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80021d0:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80021d2:	a901      	add	r1, sp, #4
 80021d4:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80021d8:	f001 fe14 	bl	8003e04 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80021dc:	230c      	movs	r3, #12
 80021de:	fb03 4005 	mla	r0, r3, r5, r4
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <BSP_LCD_LayerDefaultInit+0x74>)
 80021ec:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80021f0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80021f4:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 80021f8:	b00e      	add	sp, #56	@ 0x38
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	20000504 	.word	0x20000504
 8002200:	2000004c 	.word	0x2000004c

08002204 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002204:	4b01      	ldr	r3, [pc, #4]	@ (800220c <BSP_LCD_SelectLayer+0x8>)
 8002206:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 800220a:	4770      	bx	lr
 800220c:	20000504 	.word	0x20000504

08002210 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <BSP_LCD_SetTextColor+0x14>)
 8002212:	210c      	movs	r1, #12
 8002214:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002218:	fb01 3302 	mla	r3, r1, r2, r3
 800221c:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000504 	.word	0x20000504

08002228 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <BSP_LCD_SetBackColor+0x14>)
 800222a:	210c      	movs	r1, #12
 800222c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002230:	fb01 3302 	mla	r3, r1, r2, r3
 8002234:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000504 	.word	0x20000504

08002240 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <BSP_LCD_SetFont+0x14>)
 8002242:	210c      	movs	r1, #12
 8002244:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002248:	fb01 3302 	mla	r3, r1, r2, r3
 800224c:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000504 	.word	0x20000504

08002258 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <BSP_LCD_GetFont+0x14>)
 800225a:	210c      	movs	r1, #12
 800225c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002260:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002264:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000504 	.word	0x20000504

08002270 <BSP_LCD_Clear>:
{ 
 8002270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002272:	4c0c      	ldr	r4, [pc, #48]	@ (80022a4 <BSP_LCD_Clear+0x34>)
{ 
 8002274:	4606      	mov	r6, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002276:	f7ff ff71 	bl	800215c <BSP_LCD_GetXSize>
 800227a:	4605      	mov	r5, r0
 800227c:	f8d4 70e8 	ldr.w	r7, [r4, #232]	@ 0xe8
 8002280:	f7ff ff78 	bl	8002174 <BSP_LCD_GetYSize>
 8002284:	2234      	movs	r2, #52	@ 0x34
 8002286:	4603      	mov	r3, r0
 8002288:	9601      	str	r6, [sp, #4]
 800228a:	4638      	mov	r0, r7
 800228c:	fb02 4407 	mla	r4, r2, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	9200      	str	r2, [sp, #0]
 8002294:	462a      	mov	r2, r5
 8002296:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800229a:	f7ff ff23 	bl	80020e4 <LL_FillBuffer>
}
 800229e:	b003      	add	sp, #12
 80022a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000504 	.word	0x20000504

080022a8 <BSP_LCD_DrawHLine>:
{
 80022a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80022ac:	4e14      	ldr	r6, [pc, #80]	@ (8002300 <BSP_LCD_DrawHLine+0x58>)
 80022ae:	2334      	movs	r3, #52	@ 0x34
{
 80022b0:	4689      	mov	r9, r1
 80022b2:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80022b4:	f8d6 70e8 	ldr.w	r7, [r6, #232]	@ 0xe8
{
 80022b8:	4690      	mov	r8, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80022ba:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022be:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80022c2:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022c6:	f7ff ff49 	bl	800215c <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80022ca:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022cc:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80022d0:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80022d4:	4642      	mov	r2, r8
 80022d6:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022da:	bf08      	it	eq
 80022dc:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80022e0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80022e4:	bf18      	it	ne
 80022e6:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80022ea:	4638      	mov	r0, r7
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	f7ff fef6 	bl	80020e4 <LL_FillBuffer>
}
 80022f8:	b002      	add	sp, #8
 80022fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fe:	bf00      	nop
 8002300:	20000504 	.word	0x20000504

08002304 <BSP_LCD_DrawVLine>:
{
 8002304:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002308:	4d15      	ldr	r5, [pc, #84]	@ (8002360 <BSP_LCD_DrawVLine+0x5c>)
 800230a:	2334      	movs	r3, #52	@ 0x34
{
 800230c:	4617      	mov	r7, r2
 800230e:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002310:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8002314:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002316:	fb03 5306 	mla	r3, r3, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800231a:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800231e:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002322:	f7ff ff1b 	bl	800215c <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002326:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002328:	fb00 8109 	mla	r1, r0, r9, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800232c:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002330:	f100 30ff 	add.w	r0, r0, #4294967295
 8002334:	fb03 5506 	mla	r5, r3, r6, r5
 8002338:	f04f 0201 	mov.w	r2, #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800233c:	bf08      	it	eq
 800233e:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002342:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002346:	bf18      	it	ne
 8002348:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800234c:	9000      	str	r0, [sp, #0]
 800234e:	4630      	mov	r0, r6
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	463b      	mov	r3, r7
 8002354:	f7ff fec6 	bl	80020e4 <LL_FillBuffer>
}
 8002358:	b002      	add	sp, #8
 800235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235e:	bf00      	nop
 8002360:	20000504 	.word	0x20000504

08002364 <BSP_LCD_DrawRect>:
{
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	461e      	mov	r6, r3
 8002368:	460d      	mov	r5, r1
 800236a:	4604      	mov	r4, r0
 800236c:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800236e:	f7ff ff9b 	bl	80022a8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8002372:	19a9      	adds	r1, r5, r6
 8002374:	463a      	mov	r2, r7
 8002376:	4620      	mov	r0, r4
 8002378:	b289      	uxth	r1, r1
 800237a:	f7ff ff95 	bl	80022a8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800237e:	4632      	mov	r2, r6
 8002380:	4629      	mov	r1, r5
 8002382:	4620      	mov	r0, r4
 8002384:	f7ff ffbe 	bl	8002304 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002388:	19e0      	adds	r0, r4, r7
 800238a:	4632      	mov	r2, r6
 800238c:	4629      	mov	r1, r5
 800238e:	b280      	uxth	r0, r0
}
 8002390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8002394:	f7ff bfb6 	b.w	8002304 <BSP_LCD_DrawVLine>

08002398 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002398:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <BSP_LCD_DrawPixel+0x3c>)
{
 800239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239e:	460e      	mov	r6, r1
 80023a0:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023a2:	2134      	movs	r1, #52	@ 0x34
 80023a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 80023a8:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023aa:	fb01 3302 	mla	r3, r1, r2, r3
 80023ae:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80023b2:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 80023b6:	f7ff fed1 	bl	800215c <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023ba:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80023be:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80023c2:	d104      	bne.n	80023ce <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80023c4:	b2a4      	uxth	r4, r4
 80023c6:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 80023ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80023ce:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 80023d2:	e7fa      	b.n	80023ca <BSP_LCD_DrawPixel+0x32>
 80023d4:	20000504 	.word	0x20000504

080023d8 <BSP_LCD_DisplayChar>:
{
 80023d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023dc:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023de:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 80023e0:	f04f 0800 	mov.w	r8, #0
{
 80023e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80023e8:	4928      	ldr	r1, [pc, #160]	@ (800248c <BSP_LCD_DisplayChar+0xb4>)
 80023ea:	200c      	movs	r0, #12
 80023ec:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 80023f0:	fb00 110b 	mla	r1, r0, fp, r1
 80023f4:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023f8:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80023fc:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002400:	f109 0607 	add.w	r6, r9, #7
 8002404:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002406:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800240a:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 800240c:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8002410:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 8002414:	f109 32ff 	add.w	r2, r9, #4294967295
 8002418:	fa52 f380 	uxtab	r3, r2, r0
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8002420:	45d0      	cmp	r8, sl
 8002422:	eb03 0208 	add.w	r2, r3, r8
 8002426:	b293      	uxth	r3, r2
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	d302      	bcc.n	8002432 <BSP_LCD_DisplayChar+0x5a>
}
 800242c:	b005      	add	sp, #20
 800242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8002432:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8002434:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8002436:	d004      	beq.n	8002442 <BSP_LCD_DisplayChar+0x6a>
 8002438:	2e02      	cmp	r6, #2
 800243a:	d109      	bne.n	8002450 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 800243c:	882c      	ldrh	r4, [r5, #0]
 800243e:	ba64      	rev16	r4, r4
 8002440:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8002442:	2700      	movs	r7, #0
 8002444:	45b9      	cmp	r9, r7
 8002446:	d80a      	bhi.n	800245e <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8002448:	f108 0801 	add.w	r8, r8, #1
 800244c:	4435      	add	r5, r6
 800244e:	e7e6      	b.n	800241e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002450:	786a      	ldrb	r2, [r5, #1]
 8002452:	0424      	lsls	r4, r4, #16
 8002454:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002458:	78aa      	ldrb	r2, [r5, #2]
 800245a:	4314      	orrs	r4, r2
      break;
 800245c:	e7f1      	b.n	8002442 <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800245e:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8002460:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002462:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8002464:	9b03      	ldr	r3, [sp, #12]
 8002466:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <BSP_LCD_DisplayChar+0xb4>)
 800246a:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 800246c:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 800246e:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002470:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 8002472:	4222      	tst	r2, r4
 8002474:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002478:	fb02 320b 	mla	r2, r2, fp, r3
 800247c:	bf14      	ite	ne
 800247e:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002482:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 8002486:	f7ff ff87 	bl	8002398 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800248a:	e7db      	b.n	8002444 <BSP_LCD_DisplayChar+0x6c>
 800248c:	20000504 	.word	0x20000504

08002490 <BSP_LCD_DisplayStringAt>:
{
 8002490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002494:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 8002496:	4610      	mov	r0, r2
{
 8002498:	469a      	mov	sl, r3
 800249a:	460e      	mov	r6, r1
 800249c:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 800249e:	f7fd feb3 	bl	8000208 <strlen>
 80024a2:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80024a4:	f7ff fe5a 	bl	800215c <BSP_LCD_GetXSize>
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <BSP_LCD_DisplayStringAt+0xa4>)
 80024aa:	210c      	movs	r1, #12
  switch (Mode)
 80024ac:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80024b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80024b4:	fb01 3302 	mla	r3, r1, r2, r3
 80024b8:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 80024c2:	d01e      	beq.n	8002502 <BSP_LCD_DisplayStringAt+0x72>
 80024c4:	f1ba 0f02 	cmp.w	sl, #2
 80024c8:	d023      	beq.n	8002512 <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80024ca:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 80024ce:	2400      	movs	r4, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bfd8      	it	le
 80024d4:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80024d8:	f7ff fe40 	bl	800215c <BSP_LCD_GetXSize>
 80024dc:	88bb      	ldrh	r3, [r7, #4]
 80024de:	b2a2      	uxth	r2, r4
 80024e0:	f815 9004 	ldrb.w	r9, [r5, r4]
 80024e4:	3401      	adds	r4, #1
 80024e6:	fb03 0012 	mls	r0, r3, r2, r0
 80024ea:	b280      	uxth	r0, r0
 80024ec:	4298      	cmp	r0, r3
 80024ee:	bf34      	ite	cc
 80024f0:	2000      	movcc	r0, #0
 80024f2:	2001      	movcs	r0, #1
 80024f4:	f1b9 0f00 	cmp.w	r9, #0
 80024f8:	bf08      	it	eq
 80024fa:	2000      	moveq	r0, #0
 80024fc:	b980      	cbnz	r0, 8002520 <BSP_LCD_DisplayStringAt+0x90>
}
 80024fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002502:	eba4 0409 	sub.w	r4, r4, r9
 8002506:	435c      	muls	r4, r3
 8002508:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800250c:	fa1f f880 	uxth.w	r8, r0
      break;
 8002510:	e7db      	b.n	80024ca <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002512:	eba4 0409 	sub.w	r4, r4, r9
 8002516:	fb14 f403 	smulbb	r4, r4, r3
 800251a:	eba4 0008 	sub.w	r0, r4, r8
 800251e:	e7f5      	b.n	800250c <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002520:	4640      	mov	r0, r8
 8002522:	464a      	mov	r2, r9
 8002524:	4631      	mov	r1, r6
 8002526:	f7ff ff57 	bl	80023d8 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	4443      	add	r3, r8
 800252e:	fa1f f883 	uxth.w	r8, r3
    i++;
 8002532:	e7d1      	b.n	80024d8 <BSP_LCD_DisplayStringAt+0x48>
 8002534:	20000504 	.word	0x20000504

08002538 <BSP_LCD_DisplayStringAtLine>:
{  
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	460c      	mov	r4, r1
 800253c:	4605      	mov	r5, r0
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800253e:	f7ff fe8b 	bl	8002258 <BSP_LCD_GetFont>
 8002542:	88c3      	ldrh	r3, [r0, #6]
 8002544:	4622      	mov	r2, r4
 8002546:	2000      	movs	r0, #0
 8002548:	fb13 f105 	smulbb	r1, r3, r5
 800254c:	2303      	movs	r3, #3
 800254e:	b289      	uxth	r1, r1
}
 8002550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002554:	f7ff bf9c 	b.w	8002490 <BSP_LCD_DisplayStringAt>

08002558 <BSP_LCD_FillRect>:
{
 8002558:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800255c:	4d1b      	ldr	r5, [pc, #108]	@ (80025cc <BSP_LCD_FillRect+0x74>)
{
 800255e:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002560:	230c      	movs	r3, #12
{
 8002562:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002564:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 8002568:	4617      	mov	r7, r2
 800256a:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800256c:	fb03 5306 	mla	r3, r3, r6, r5
 8002570:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8002574:	f7ff fe4c 	bl	8002210 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002578:	2334      	movs	r3, #52	@ 0x34
 800257a:	fb03 5306 	mla	r3, r3, r6, r5
 800257e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002582:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8002586:	2a02      	cmp	r2, #2
 8002588:	d118      	bne.n	80025bc <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800258a:	f7ff fde7 	bl	800215c <BSP_LCD_GetXSize>
 800258e:	fb00 4009 	mla	r0, r0, r9, r4
 8002592:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002596:	f7ff fde1 	bl	800215c <BSP_LCD_GetXSize>
 800259a:	230c      	movs	r3, #12
 800259c:	1bc0      	subs	r0, r0, r7
 800259e:	463a      	mov	r2, r7
 80025a0:	fb03 5106 	mla	r1, r3, r6, r5
 80025a4:	f8d1 30ec 	ldr.w	r3, [r1, #236]	@ 0xec
 80025a8:	4651      	mov	r1, sl
 80025aa:	9000      	str	r0, [sp, #0]
 80025ac:	4630      	mov	r0, r6
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	4643      	mov	r3, r8
 80025b2:	f7ff fd97 	bl	80020e4 <LL_FillBuffer>
}
 80025b6:	b002      	add	sp, #8
 80025b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80025bc:	f7ff fdce 	bl	800215c <BSP_LCD_GetXSize>
 80025c0:	fb00 4409 	mla	r4, r0, r9, r4
 80025c4:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 80025c8:	e7e5      	b.n	8002596 <BSP_LCD_FillRect+0x3e>
 80025ca:	bf00      	nop
 80025cc:	20000504 	.word	0x20000504

080025d0 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80025d2:	484c      	ldr	r0, [pc, #304]	@ (8002704 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025d6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 80025da:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44
{
 80025de:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025e2:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80025e4:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80025e6:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025e8:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80025ec:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80025f0:	4e45      	ldr	r6, [pc, #276]	@ (8002708 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80025f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80025fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002600:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260a:	f042 0210 	orr.w	r2, r2, #16
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002612:	f002 0210 	and.w	r2, r2, #16
 8002616:	9202      	str	r2, [sp, #8]
 8002618:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800261a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800261c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002620:	631a      	str	r2, [r3, #48]	@ 0x30
 8002622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002624:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002628:	9203      	str	r2, [sp, #12]
 800262a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800262c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
 8002634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002636:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800263a:	9204      	str	r2, [sp, #16]
 800263c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800263e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30
 8002646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002648:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800264c:	9205      	str	r2, [sp, #20]
 800264e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
 8002658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800265a:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 800265e:	9206      	str	r2, [sp, #24]
 8002660:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
 800266a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002670:	9207      	str	r2, [sp, #28]
 8002672:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002676:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800267e:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	9308      	str	r3, [sp, #32]
 8002686:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002688:	2310      	movs	r3, #16
 800268a:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002690:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002694:	f000 fe68 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002698:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800269a:	a909      	add	r1, sp, #36	@ 0x24
 800269c:	481b      	ldr	r0, [pc, #108]	@ (800270c <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800269e:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026a0:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026a4:	f000 fe60 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80026a8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80026ac:	a909      	add	r1, sp, #36	@ 0x24
 80026ae:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80026b0:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026b2:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80026b6:	f000 fe57 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80026ba:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80026be:	a909      	add	r1, sp, #36	@ 0x24
 80026c0:	4813      	ldr	r0, [pc, #76]	@ (8002710 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80026c2:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026c4:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80026c8:	f000 fe4e 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80026cc:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80026ce:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80026d0:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80026d2:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026d4:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80026d8:	4c0e      	ldr	r4, [pc, #56]	@ (8002714 <BSP_LCD_MspInit+0x144>)
 80026da:	4620      	mov	r0, r4
 80026dc:	f000 fe44 	bl	8003368 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80026e0:	a909      	add	r1, sp, #36	@ 0x24
 80026e2:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80026e4:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80026e6:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80026e8:	f000 fe3e 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80026ec:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80026ee:	a909      	add	r1, sp, #36	@ 0x24
 80026f0:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80026f2:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80026f6:	f000 fe37 	bl	8003368 <HAL_GPIO_Init>
}
 80026fa:	b00f      	add	sp, #60	@ 0x3c
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000
 800270c:	40021800 	.word	0x40021800
 8002710:	40022400 	.word	0x40022400
 8002714:	40022800 	.word	0x40022800

08002718 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002718:	4807      	ldr	r0, [pc, #28]	@ (8002738 <BSP_LCD_ClockConfig+0x20>)
 800271a:	2308      	movs	r3, #8
 800271c:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002720:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002722:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002726:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002728:	2305      	movs	r3, #5
 800272a:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800272c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002730:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002732:	f001 be55 	b.w	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	bf00      	nop
 8002738:	20000504 	.word	0x20000504

0800273c <BSP_LCD_Init>:
{    
 800273c:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800273e:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002740:	4c24      	ldr	r4, [pc, #144]	@ (80027d4 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002742:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002744:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002746:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800274a:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800274e:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002752:	230b      	movs	r3, #11
 8002754:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002758:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800275c:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800275e:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002762:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002766:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800276a:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800276e:	f7ff ffd3 	bl	8002718 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002772:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 8002776:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 800277a:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800277c:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002786:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800278a:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800278e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <BSP_LCD_Init+0x9c>)
 8002794:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002798:	f001 fb61 	bl	8003e5e <HAL_LTDC_GetState>
 800279c:	4601      	mov	r1, r0
 800279e:	b918      	cbnz	r0, 80027a8 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80027a0:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80027a4:	f7ff ff14 	bl	80025d0 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 80027a8:	480c      	ldr	r0, [pc, #48]	@ (80027dc <BSP_LCD_Init+0xa0>)
 80027aa:	f001 fabf 	bl	8003d2c <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027b4:	480a      	ldr	r0, [pc, #40]	@ (80027e0 <BSP_LCD_Init+0xa4>)
 80027b6:	f000 fec1 	bl	800353c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80027ba:	2201      	movs	r2, #1
 80027bc:	2108      	movs	r1, #8
 80027be:	4809      	ldr	r0, [pc, #36]	@ (80027e4 <BSP_LCD_Init+0xa8>)
 80027c0:	f000 febc 	bl	800353c <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 80027c4:	f000 f918 	bl	80029f8 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027c8:	4807      	ldr	r0, [pc, #28]	@ (80027e8 <BSP_LCD_Init+0xac>)
 80027ca:	f7ff fd39 	bl	8002240 <BSP_LCD_SetFont>
}
 80027ce:	2000      	movs	r0, #0
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	bf00      	nop
 80027d4:	20000504 	.word	0x20000504
 80027d8:	40016800 	.word	0x40016800
 80027dc:	20000544 	.word	0x20000544
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40022800 	.word	0x40022800
 80027e8:	2000004c 	.word	0x2000004c

080027ec <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80027ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80027f0:	4c21      	ldr	r4, [pc, #132]	@ (8002878 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80027f2:	2710      	movs	r7, #16
 80027f4:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 80027f6:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80027fa:	19e5      	adds	r5, r4, r7
 80027fc:	4621      	mov	r1, r4
{
 80027fe:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002800:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002804:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8002806:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800280a:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800280e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002812:	f002 fc3b 	bl	800508c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002816:	4630      	mov	r0, r6
 8002818:	f000 f99e 	bl	8002b58 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800281c:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800281e:	4621      	mov	r1, r4
 8002820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002824:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002826:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 800282a:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800282e:	f002 fc2d 	bl	800508c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002832:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002834:	4621      	mov	r1, r4
 8002836:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800283a:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800283c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002840:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002842:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002846:	f002 fc21 	bl	800508c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800284a:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800284e:	4621      	mov	r1, r4
 8002850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002854:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002856:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002858:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800285a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800285c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002860:	9b01      	ldr	r3, [sp, #4]
 8002862:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002864:	f002 fc12 	bl	800508c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002868:	4649      	mov	r1, r9
 800286a:	4628      	mov	r0, r5
}
 800286c:	b003      	add	sp, #12
 800286e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002872:	f002 bc2a 	b.w	80050ca <HAL_SDRAM_ProgramRefreshRate>
 8002876:	bf00      	nop
 8002878:	2000068c 	.word	0x2000068c

0800287c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800287c:	4b55      	ldr	r3, [pc, #340]	@ (80029d4 <BSP_SDRAM_MspInit+0x158>)
 800287e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002880:	f042 0201 	orr.w	r2, r2, #1
{  
 8002884:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002886:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 8002888:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 800288a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 800288c:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800288e:	a909      	add	r1, sp, #36	@ 0x24
 8002890:	4851      	ldr	r0, [pc, #324]	@ (80029d8 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002892:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002896:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8002898:	9201      	str	r2, [sp, #4]
 800289a:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800289c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800289e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a6:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80028aa:	9202      	str	r2, [sp, #8]
 80028ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b0:	f042 0204 	orr.w	r2, r2, #4
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b8:	f002 0204 	and.w	r2, r2, #4
 80028bc:	9203      	str	r2, [sp, #12]
 80028be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ca:	f002 0208 	and.w	r2, r2, #8
 80028ce:	9204      	str	r2, [sp, #16]
 80028d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d4:	f042 0210 	orr.w	r2, r2, #16
 80028d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80028da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028dc:	f002 0210 	and.w	r2, r2, #16
 80028e0:	9205      	str	r2, [sp, #20]
 80028e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ee:	f002 0220 	and.w	r2, r2, #32
 80028f2:	9206      	str	r2, [sp, #24]
 80028f4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80028fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002900:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002904:	9207      	str	r2, [sp, #28]
 8002906:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002910:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002918:	9308      	str	r3, [sp, #32]
 800291a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800291c:	2302      	movs	r3, #2
 800291e:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002922:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002924:	230c      	movs	r3, #12
 8002926:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002928:	2308      	movs	r3, #8
 800292a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800292c:	f000 fd1c 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002930:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002934:	a909      	add	r1, sp, #36	@ 0x24
 8002936:	4829      	ldr	r0, [pc, #164]	@ (80029dc <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002938:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800293a:	f000 fd15 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800293e:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002942:	a909      	add	r1, sp, #36	@ 0x24
 8002944:	4826      	ldr	r0, [pc, #152]	@ (80029e0 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002946:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002948:	f000 fd0e 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800294c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002950:	a909      	add	r1, sp, #36	@ 0x24
 8002952:	4824      	ldr	r0, [pc, #144]	@ (80029e4 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002954:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002956:	f000 fd07 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800295a:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800295e:	a909      	add	r1, sp, #36	@ 0x24
 8002960:	4821      	ldr	r0, [pc, #132]	@ (80029e8 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002962:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002964:	f000 fd00 	bl	8003368 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002968:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800296a:	a909      	add	r1, sp, #36	@ 0x24
 800296c:	481f      	ldr	r0, [pc, #124]	@ (80029ec <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800296e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002970:	f000 fcfa 	bl	8003368 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002976:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002978:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800297c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002980:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002982:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002984:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002986:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800298a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800298e:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002996:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800299a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800299e:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80029a2:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80029a4:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80029a8:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <BSP_SDRAM_MspInit+0x178>)
 80029aa:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80029ae:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80029b0:	6335      	str	r5, [r6, #48]	@ 0x30
 80029b2:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 80029b4:	f000 fa26 	bl	8002e04 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 f9a5 	bl	8002d08 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80029be:	4622      	mov	r2, r4
 80029c0:	210f      	movs	r1, #15
 80029c2:	2038      	movs	r0, #56	@ 0x38
 80029c4:	f000 f8ec 	bl	8002ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80029c8:	2038      	movs	r0, #56	@ 0x38
 80029ca:	f000 f91b 	bl	8002c04 <HAL_NVIC_EnableIRQ>
}
 80029ce:	b00e      	add	sp, #56	@ 0x38
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	2000068c 	.word	0x2000068c
 80029f4:	40026410 	.word	0x40026410

080029f8 <BSP_SDRAM_Init>:
{ 
 80029f8:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029fa:	4c1b      	ldr	r4, [pc, #108]	@ (8002a68 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 80029fc:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002a00:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a02:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a04:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a08:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8002a0a:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a0c:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8002a0e:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8002a12:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 8002a16:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a1a:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 8002a1c:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a20:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a24:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a2a:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a32:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a34:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a38:	f104 0510 	add.w	r5, r4, #16
 8002a3c:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a3e:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a42:	f7ff ff1b 	bl	800287c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a46:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	4c08      	ldr	r4, [pc, #32]	@ (8002a70 <BSP_SDRAM_Init+0x78>)
 8002a4e:	f002 fafd 	bl	800504c <HAL_SDRAM_Init>
 8002a52:	3800      	subs	r0, #0
 8002a54:	bf18      	it	ne
 8002a56:	2001      	movne	r0, #1
 8002a58:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a5a:	f240 6003 	movw	r0, #1539	@ 0x603
 8002a5e:	f7ff fec5 	bl	80027ec <BSP_SDRAM_Initialization_sequence>
}
 8002a62:	7820      	ldrb	r0, [r4, #0]
 8002a64:	bd38      	pop	{r3, r4, r5, pc}
 8002a66:	bf00      	nop
 8002a68:	2000068c 	.word	0x2000068c
 8002a6c:	a0000140 	.word	0xa0000140
 8002a70:	20000074 	.word	0x20000074

08002a74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a74:	490f      	ldr	r1, [pc, #60]	@ (8002ab4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a76:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <SystemInit+0x44>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a8e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 8002a96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a9c:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <SystemInit+0x48>)
 8002a9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002aa8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aaa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002aae:	608b      	str	r3, [r1, #8]
#endif
}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000ed00 	.word	0xe000ed00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	24003010 	.word	0x24003010

08002ac0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac6:	4e0e      	ldr	r6, [pc, #56]	@ (8002b00 <HAL_InitTick+0x3c>)
 8002ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 8002acc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ace:	7832      	ldrb	r2, [r6, #0]
 8002ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b04 <HAL_InitTick+0x40>)
 8002ad6:	6810      	ldr	r0, [r2, #0]
 8002ad8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002adc:	f000 f8a0 	bl	8002c20 <HAL_SYSTICK_Config>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	b950      	cbnz	r0, 8002afa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae4:	2d0f      	cmp	r5, #15
 8002ae6:	d808      	bhi.n	8002afa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4629      	mov	r1, r5
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f000 f856 	bl	8002ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af4:	4620      	mov	r0, r4
 8002af6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002afa:	2001      	movs	r0, #1
 8002afc:	e7fc      	b.n	8002af8 <HAL_InitTick+0x34>
 8002afe:	bf00      	nop
 8002b00:	2000007c 	.word	0x2000007c
 8002b04:	20000078 	.word	0x20000078

08002b08 <HAL_Init>:
{
 8002b08:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002b0a:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b14:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1c:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1e:	f000 f82d 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b22:	200f      	movs	r0, #15
 8002b24:	f7ff ffce 	bl	8002ac4 <HAL_InitTick>
  HAL_MspInit();
 8002b28:	f7ff ffca 	bl	8002ac0 <HAL_MspInit>
}
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	bd08      	pop	{r3, pc}
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b34:	4a03      	ldr	r2, [pc, #12]	@ (8002b44 <HAL_IncTick+0x10>)
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <HAL_IncTick+0x14>)
 8002b38:	6811      	ldr	r1, [r2, #0]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	440b      	add	r3, r1
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	200007ac 	.word	0x200007ac
 8002b48:	2000007c 	.word	0x2000007c

08002b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b4c:	4b01      	ldr	r3, [pc, #4]	@ (8002b54 <HAL_GetTick+0x8>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	200007ac 	.word	0x200007ac

08002b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff fff6 	bl	8002b4c <HAL_GetTick>
 8002b60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002b64:	bf1e      	ittt	ne
 8002b66:	4b04      	ldrne	r3, [pc, #16]	@ (8002b78 <HAL_Delay+0x20>)
 8002b68:	781b      	ldrbne	r3, [r3, #0]
 8002b6a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6c:	f7ff ffee 	bl	8002b4c <HAL_GetTick>
 8002b70:	1b43      	subs	r3, r0, r5
 8002b72:	42a3      	cmp	r3, r4
 8002b74:	d3fa      	bcc.n	8002b6c <HAL_Delay+0x14>
  {
  }
}
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	2000007c 	.word	0x2000007c

08002b7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b80:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b8a:	0412      	lsls	r2, r2, #16
 8002b8c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002b98:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba2:	b530      	push	{r4, r5, lr}
 8002ba4:	68dc      	ldr	r4, [r3, #12]
 8002ba6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002baa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	bf28      	it	cs
 8002bb4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbc:	bf8c      	ite	hi
 8002bbe:	3c03      	subhi	r4, #3
 8002bc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	fa03 f304 	lsl.w	r3, r3, r4
 8002bd8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002be0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002be2:	db06      	blt.n	8002bf2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002be8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002bec:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002bf0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	f000 000f 	and.w	r0, r0, #15
 8002bf6:	4a02      	ldr	r2, [pc, #8]	@ (8002c00 <HAL_NVIC_SetPriority+0x60>)
 8002bf8:	5413      	strb	r3, [r2, r0]
 8002bfa:	e7f9      	b.n	8002bf0 <HAL_NVIC_SetPriority+0x50>
 8002bfc:	e000ed00 	.word	0xe000ed00
 8002c00:	e000ed14 	.word	0xe000ed14

08002c04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c04:	2800      	cmp	r0, #0
 8002c06:	db07      	blt.n	8002c18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c08:	0941      	lsrs	r1, r0, #5
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f000 001f 	and.w	r0, r0, #31
 8002c10:	4a02      	ldr	r2, [pc, #8]	@ (8002c1c <HAL_NVIC_EnableIRQ+0x18>)
 8002c12:	4083      	lsls	r3, r0
 8002c14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c20:	3801      	subs	r0, #1
 8002c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002c26:	d20b      	bcs.n	8002c40 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <HAL_SYSTICK_Config+0x24>)
 8002c2e:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c30:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c32:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c38:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002c40:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c48:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c4c:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_MPU_Disable+0x18>)
 8002c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c50:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c56:	2200      	movs	r2, #0
 8002c58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_MPU_Enable+0x1c>)
 8002c66:	f040 0001 	orr.w	r0, r0, #1
 8002c6a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c7a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c84:	7843      	ldrb	r3, [r0, #1]
 8002c86:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <HAL_MPU_ConfigRegion+0x54>)
 8002c88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c8c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c98:	6843      	ldr	r3, [r0, #4]
 8002c9a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c9e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ca0:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ca2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ca4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ca8:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002caa:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cac:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cae:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cb2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cb4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cb8:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cbe:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cc4:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cca:	7a01      	ldrb	r1, [r0, #8]
 8002ccc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cd0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cdc:	6803      	ldr	r3, [r0, #0]
{
 8002cde:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce0:	2018      	movs	r0, #24
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	3910      	subs	r1, #16
 8002ce6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002cea:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cec:	4c05      	ldr	r4, [pc, #20]	@ (8002d04 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002cee:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cf0:	5c20      	ldrb	r0, [r4, r0]
 8002cf2:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cf4:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8002cf8:	f020 0003 	bic.w	r0, r0, #3
 8002cfc:	bf88      	it	hi
 8002cfe:	3004      	addhi	r0, #4
 8002d00:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002d02:	bd10      	pop	{r4, pc}
 8002d04:	0800aa34 	.word	0x0800aa34

08002d08 <HAL_DMA_Init>:
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff ff1e 	bl	8002b4c <HAL_GetTick>
 8002d10:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002d12:	2c00      	cmp	r4, #0
 8002d14:	d060      	beq.n	8002dd8 <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d16:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8002d18:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d1a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8002d24:	6813      	ldr	r3, [r2, #0]
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	6813      	ldr	r3, [r2, #0]
 8002d30:	07d8      	lsls	r0, r3, #31
 8002d32:	d42e      	bmi.n	8002d92 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002d34:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d36:	4832      	ldr	r0, [pc, #200]	@ (8002e00 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d38:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d3a:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002d40:	432b      	orrs	r3, r5
 8002d42:	68e5      	ldr	r5, [r4, #12]
 8002d44:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	6925      	ldr	r5, [r4, #16]
 8002d48:	432b      	orrs	r3, r5
 8002d4a:	6965      	ldr	r5, [r4, #20]
 8002d4c:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	69e5      	ldr	r5, [r4, #28]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d54:	6a25      	ldr	r5, [r4, #32]
 8002d56:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d58:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002d5c:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d5e:	bf02      	ittt	eq
 8002d60:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8002d64:	4335      	orreq	r5, r6
 8002d66:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d68:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8002d6a:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8002d6c:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002d72:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d76:	d135      	bne.n	8002de4 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8002d78:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d7a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002d7c:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d7e:	b38d      	cbz	r5, 8002de4 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d80:	b991      	cbnz	r1, 8002da8 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8002d82:	2801      	cmp	r0, #1
 8002d84:	d020      	beq.n	8002dc8 <HAL_DMA_Init+0xc0>
 8002d86:	f030 0102 	bics.w	r1, r0, #2
 8002d8a:	d12b      	bne.n	8002de4 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d8c:	01e9      	lsls	r1, r5, #7
 8002d8e:	d529      	bpl.n	8002de4 <HAL_DMA_Init+0xdc>
 8002d90:	e01d      	b.n	8002dce <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d92:	f7ff fedb 	bl	8002b4c <HAL_GetTick>
 8002d96:	1b40      	subs	r0, r0, r5
 8002d98:	2805      	cmp	r0, #5
 8002d9a:	d9c7      	bls.n	8002d2c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d9c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d9e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da0:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002da8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8002dac:	d116      	bne.n	8002ddc <HAL_DMA_Init+0xd4>
    switch (tmp)
 8002dae:	2803      	cmp	r0, #3
 8002db0:	d818      	bhi.n	8002de4 <HAL_DMA_Init+0xdc>
 8002db2:	a101      	add	r1, pc, #4	@ (adr r1, 8002db8 <HAL_DMA_Init+0xb0>)
 8002db4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8002db8:	08002dcf 	.word	0x08002dcf
 8002dbc:	08002d8d 	.word	0x08002d8d
 8002dc0:	08002dcf 	.word	0x08002dcf
 8002dc4:	08002dc9 	.word	0x08002dc9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc8:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8002dcc:	d10a      	bne.n	8002de4 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dce:	2340      	movs	r3, #64	@ 0x40
 8002dd0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e7e4      	b.n	8002da6 <HAL_DMA_Init+0x9e>
    switch (tmp)
 8002ddc:	2802      	cmp	r0, #2
 8002dde:	d9f6      	bls.n	8002dce <HAL_DMA_Init+0xc6>
 8002de0:	2803      	cmp	r0, #3
 8002de2:	d0d3      	beq.n	8002d8c <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8002de4:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff ff78 	bl	8002cdc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002dee:	233f      	movs	r3, #63	@ 0x3f
 8002df0:	4093      	lsls	r3, r2
 8002df2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df4:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002df6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002dfe:	e7d2      	b.n	8002da6 <HAL_DMA_Init+0x9e>
 8002e00:	f010803f 	.word	0xf010803f

08002e04 <HAL_DMA_DeInit>:
{
 8002e04:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002e06:	4605      	mov	r5, r0
 8002e08:	b320      	cbz	r0, 8002e54 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002e0a:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	b2dc      	uxtb	r4, r3
 8002e12:	d01d      	beq.n	8002e50 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002e14:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002e16:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002e20:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8002e22:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002e24:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002e26:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002e28:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002e2a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002e2c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e2e:	f7ff ff55 	bl	8002cdc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e32:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8002e34:	233f      	movs	r3, #63	@ 0x3f
 8002e36:	4093      	lsls	r3, r2
 8002e38:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8002e3c:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002e40:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8002e44:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002e48:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8002e4c:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8002e50:	4620      	mov	r0, r4
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e54:	2401      	movs	r4, #1
 8002e56:	e7fb      	b.n	8002e50 <HAL_DMA_DeInit+0x4c>

08002e58 <HAL_DMA_Start_IT>:
{
 8002e58:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002e5a:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8002e60:	2c01      	cmp	r4, #1
 8002e62:	d034      	beq.n	8002ece <HAL_DMA_Start_IT+0x76>
 8002e64:	2401      	movs	r4, #1
 8002e66:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e6a:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8002e6e:	2c01      	cmp	r4, #1
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	d129      	bne.n	8002eca <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e76:	2502      	movs	r5, #2
 8002e78:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7e:	6804      	ldr	r4, [r0, #0]
 8002e80:	6825      	ldr	r5, [r4, #0]
 8002e82:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8002e86:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002e88:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e8a:	6883      	ldr	r3, [r0, #8]
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d119      	bne.n	8002ec4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8002e90:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002e92:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e94:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8002e96:	233f      	movs	r3, #63	@ 0x3f
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	f043 0316 	orr.w	r3, r3, #22
 8002ea2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ea4:	6963      	ldr	r3, [r4, #20]
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eaa:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002eae:	b11b      	cbz	r3, 8002eb8 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	f043 0308 	orr.w	r3, r3, #8
 8002eb6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002eb8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6023      	str	r3, [r4, #0]
}
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8002ec4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ec6:	60e2      	str	r2, [r4, #12]
 8002ec8:	e7e4      	b.n	8002e94 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002eca:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8002ece:	2002      	movs	r0, #2
 8002ed0:	e7f7      	b.n	8002ec2 <HAL_DMA_Start_IT+0x6a>

08002ed2 <HAL_DMA_Abort>:
{
 8002ed2:	b570      	push	{r4, r5, r6, lr}
 8002ed4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff fe38 	bl	8002b4c <HAL_GetTick>
 8002edc:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ede:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d006      	beq.n	8002ef4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee6:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8002ee8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8002eec:	2300      	movs	r3, #0
 8002eee:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f022 0216 	bic.w	r2, r2, #22
 8002efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efe:	695a      	ldr	r2, [r3, #20]
 8002f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f04:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f06:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f08:	b90a      	cbnz	r2, 8002f0e <HAL_DMA_Abort+0x3c>
 8002f0a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002f0c:	b11a      	cbz	r2, 8002f16 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	f010 0001 	ands.w	r0, r0, #1
 8002f26:	d107      	bne.n	8002f38 <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f28:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002f2a:	233f      	movs	r3, #63	@ 0x3f
 8002f2c:	4093      	lsls	r3, r2
 8002f2e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8002f36:	e7d9      	b.n	8002eec <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f38:	f7ff fe08 	bl	8002b4c <HAL_GetTick>
 8002f3c:	1b40      	subs	r0, r0, r5
 8002f3e:	2805      	cmp	r0, #5
 8002f40:	d9ed      	bls.n	8002f1e <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f42:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f44:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f46:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f48:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8002f4c:	e7ce      	b.n	8002eec <HAL_DMA_Abort+0x1a>
	...

08002f50 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8002f50:	2300      	movs	r3, #0
{
 8002f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8002f54:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f56:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8002f58:	4b5b      	ldr	r3, [pc, #364]	@ (80030c8 <HAL_DMA_IRQHandler+0x178>)
{
 8002f5a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8002f5e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f60:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002f62:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f64:	409a      	lsls	r2, r3
 8002f66:	4232      	tst	r2, r6
 8002f68:	d00c      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6a:	6801      	ldr	r1, [r0, #0]
 8002f6c:	6808      	ldr	r0, [r1, #0]
 8002f6e:	0740      	lsls	r0, r0, #29
 8002f70:	d508      	bpl.n	8002f84 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f72:	6808      	ldr	r0, [r1, #0]
 8002f74:	f020 0004 	bic.w	r0, r0, #4
 8002f78:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f7a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	4232      	tst	r2, r6
 8002f8a:	d008      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f8c:	6821      	ldr	r1, [r4, #0]
 8002f8e:	6949      	ldr	r1, [r1, #20]
 8002f90:	0609      	lsls	r1, r1, #24
 8002f92:	d504      	bpl.n	8002f9e <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f94:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f96:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f98:	f042 0202 	orr.w	r2, r2, #2
 8002f9c:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	4232      	tst	r2, r6
 8002fa4:	d008      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fa6:	6821      	ldr	r1, [r4, #0]
 8002fa8:	6809      	ldr	r1, [r1, #0]
 8002faa:	0788      	lsls	r0, r1, #30
 8002fac:	d504      	bpl.n	8002fb8 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fae:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002fb2:	f042 0204 	orr.w	r2, r2, #4
 8002fb6:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	2210      	movs	r2, #16
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	4232      	tst	r2, r6
 8002fbe:	d010      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	0709      	lsls	r1, r1, #28
 8002fc6:	d50c      	bpl.n	8002fe2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fc8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	0350      	lsls	r0, r2, #13
 8002fce:	d537      	bpl.n	8003040 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0319      	lsls	r1, r3, #12
 8002fd4:	d401      	bmi.n	8002fda <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002fd8:	e000      	b.n	8002fdc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fda:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002fdc:	b10b      	cbz	r3, 8002fe2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002fde:	4620      	mov	r0, r4
 8002fe0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe2:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	408a      	lsls	r2, r1
 8002fe8:	4232      	tst	r2, r6
 8002fea:	d03a      	beq.n	8003062 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	06c6      	lsls	r6, r0, #27
 8002ff2:	d536      	bpl.n	8003062 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ff4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ff6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002ffa:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ffe:	d127      	bne.n	8003050 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003000:	f022 0216 	bic.w	r2, r2, #22
 8003004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800300c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003010:	b90a      	cbnz	r2, 8003016 <HAL_DMA_IRQHandler+0xc6>
 8003012:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003014:	b11a      	cbz	r2, 800301e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f022 0208 	bic.w	r2, r2, #8
 800301c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301e:	233f      	movs	r3, #63	@ 0x3f
 8003020:	408b      	lsls	r3, r1
 8003022:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003024:	2301      	movs	r3, #1
 8003026:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800302a:	2300      	movs	r3, #0
 800302c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003030:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8003032:	2b00      	cmp	r3, #0
 8003034:	d045      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003036:	4620      	mov	r0, r4
}
 8003038:	b003      	add	sp, #12
 800303a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800303e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	05d2      	lsls	r2, r2, #23
 8003044:	d4c7      	bmi.n	8002fd6 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f022 0208 	bic.w	r2, r2, #8
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e7c2      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003050:	0350      	lsls	r0, r2, #13
 8003052:	d527      	bpl.n	80030a4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0319      	lsls	r1, r3, #12
 8003058:	d431      	bmi.n	80030be <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800305a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 800305c:	b10b      	cbz	r3, 8003062 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800305e:	4620      	mov	r0, r4
 8003060:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003062:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003064:	b36b      	cbz	r3, 80030c2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003066:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003068:	07da      	lsls	r2, r3, #31
 800306a:	d519      	bpl.n	80030a0 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 800306c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8003070:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8003072:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003076:	2305      	movs	r3, #5
 8003078:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	42bb      	cmp	r3, r7
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	d802      	bhi.n	8003094 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	07db      	lsls	r3, r3, #31
 8003092:	d4f7      	bmi.n	8003084 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8003094:	2301      	movs	r3, #1
 8003096:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800309a:	2300      	movs	r3, #0
 800309c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80030a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80030a2:	e7c6      	b.n	8003032 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 80030aa:	d108      	bne.n	80030be <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	f021 0110 	bic.w	r1, r1, #16
 80030b2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80030b4:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80030b6:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80030ba:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 80030be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80030c0:	e7cc      	b.n	800305c <HAL_DMA_IRQHandler+0x10c>
}
 80030c2:	b003      	add	sp, #12
 80030c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000078 	.word	0x20000078

080030cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80030cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80030ce:	6804      	ldr	r4, [r0, #0]
 80030d0:	9d04      	ldr	r5, [sp, #16]
 80030d2:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 80030d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030d8:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80030da:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80030e2:	ea45 0506 	orr.w	r5, r5, r6
 80030e6:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80030e8:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80030ea:	d130      	bne.n	800314e <DMA2D_SetConfig+0x82>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030ec:	6885      	ldr	r5, [r0, #8]
 80030ee:	b11d      	cbz	r5, 80030f8 <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030f0:	2d01      	cmp	r5, #1
 80030f2:	d103      	bne.n	80030fc <DMA2D_SetConfig+0x30>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030f4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80030f8:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030fc:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80030fe:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003102:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003106:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003108:	d107      	bne.n	800311a <DMA2D_SetConfig+0x4e>
      tmp2 = (tmp2 >> 19U);
 800310a:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800310c:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800310e:	02c9      	lsls	r1, r1, #11
 8003110:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8003114:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8003118:	e7ee      	b.n	80030f8 <DMA2D_SetConfig+0x2c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800311a:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800311c:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003120:	d10a      	bne.n	8003138 <DMA2D_SetConfig+0x6c>
      tmp2 = (tmp2 >> 19U);
 8003122:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003124:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003126:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8003128:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800312a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 800312e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8003132:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003136:	e7df      	b.n	80030f8 <DMA2D_SetConfig+0x2c>
      tmp2 = (tmp2 >> 20U);
 8003138:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800313a:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800313c:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800313e:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003140:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003144:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003148:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800314c:	e7d4      	b.n	80030f8 <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800314e:	60e1      	str	r1, [r4, #12]
}
 8003150:	e7d3      	b.n	80030fa <DMA2D_SetConfig+0x2e>

08003152 <HAL_DMA2D_MspInit>:
}
 8003152:	4770      	bx	lr

08003154 <HAL_DMA2D_Init>:
{
 8003154:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8003156:	4604      	mov	r4, r0
 8003158:	b330      	cbz	r0, 80031a8 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800315a:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800315e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003162:	b91b      	cbnz	r3, 800316c <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8003164:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003168:	f7ff fff3 	bl	8003152 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800316c:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800316e:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003170:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003172:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003174:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003178:	6813      	ldr	r3, [r2, #0]
 800317a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800317e:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003180:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003182:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003184:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003186:	f023 0307 	bic.w	r3, r3, #7
 800318a:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800318c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800318e:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003190:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003192:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003196:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800319a:	430b      	orrs	r3, r1
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800319e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80031a0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80031a2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 80031a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
 80031aa:	e7fc      	b.n	80031a6 <HAL_DMA2D_Init+0x52>

080031ac <HAL_DMA2D_Start>:
{
 80031ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80031ae:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 80031b2:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80031b4:	2d01      	cmp	r5, #1
 80031b6:	f04f 0502 	mov.w	r5, #2
 80031ba:	d00f      	beq.n	80031dc <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031bc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 80031c0:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80031c2:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80031c4:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80031c8:	9500      	str	r5, [sp, #0]
 80031ca:	f7ff ff7f 	bl	80030cc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80031ce:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80031d0:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80031d2:	6813      	ldr	r3, [r2, #0]
 80031d4:	4333      	orrs	r3, r6
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	b002      	add	sp, #8
 80031da:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80031dc:	4628      	mov	r0, r5
 80031de:	e7fb      	b.n	80031d8 <HAL_DMA2D_Start+0x2c>

080031e0 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80031e0:	2300      	movs	r3, #0
{
 80031e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80031e4:	9301      	str	r3, [sp, #4]
{
 80031e6:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80031e8:	6803      	ldr	r3, [r0, #0]
{
 80031ea:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	07db      	lsls	r3, r3, #31
 80031f0:	d418      	bmi.n	8003224 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80031f2:	6822      	ldr	r2, [r4, #0]
 80031f4:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80031f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031f8:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80031fa:	069e      	lsls	r6, r3, #26
 80031fc:	d506      	bpl.n	800320c <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80031fe:	f7ff fca5 	bl	8002b4c <HAL_GetTick>
 8003202:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	06d2      	lsls	r2, r2, #27
 800320a:	d53f      	bpl.n	800328c <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	2212      	movs	r2, #18
  return HAL_OK;
 8003210:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003212:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003214:	2301      	movs	r3, #1
 8003216:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 800321a:	2300      	movs	r3, #0
 800321c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8003220:	b002      	add	sp, #8
 8003222:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003224:	f7ff fc92 	bl	8002b4c <HAL_GetTick>
 8003228:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	0792      	lsls	r2, r2, #30
 8003230:	d4df      	bmi.n	80031f2 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003236:	9a01      	ldr	r2, [sp, #4]
 8003238:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800323c:	d014      	beq.n	8003268 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800323e:	9a01      	ldr	r2, [sp, #4]
 8003240:	0695      	lsls	r5, r2, #26
 8003242:	d503      	bpl.n	800324c <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003244:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003246:	f042 0202 	orr.w	r2, r2, #2
 800324a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800324c:	9a01      	ldr	r2, [sp, #4]
 800324e:	07d0      	lsls	r0, r2, #31
 8003250:	d503      	bpl.n	800325a <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003252:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800325a:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800325c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800325e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003262:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8003266:	e7d8      	b.n	800321a <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 8003268:	1c69      	adds	r1, r5, #1
 800326a:	d0df      	beq.n	800322c <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7ff fc6e 	bl	8002b4c <HAL_GetTick>
 8003270:	1b80      	subs	r0, r0, r6
 8003272:	42a8      	cmp	r0, r5
 8003274:	d801      	bhi.n	800327a <HAL_DMA2D_PollForTransfer+0x9a>
 8003276:	2d00      	cmp	r5, #0
 8003278:	d1d7      	bne.n	800322a <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800327a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 800327c:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 800328a:	e7c6      	b.n	800321a <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003290:	9a01      	ldr	r2, [sp, #4]
 8003292:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8003296:	d016      	beq.n	80032c6 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003298:	9a01      	ldr	r2, [sp, #4]
 800329a:	0716      	lsls	r6, r2, #28
 800329c:	d503      	bpl.n	80032a6 <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800329e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80032a0:	f042 0204 	orr.w	r2, r2, #4
 80032a4:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80032a6:	9a01      	ldr	r2, [sp, #4]
 80032a8:	0695      	lsls	r5, r2, #26
 80032aa:	d503      	bpl.n	80032b4 <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032ac:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80032ae:	f042 0202 	orr.w	r2, r2, #2
 80032b2:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80032b4:	9a01      	ldr	r2, [sp, #4]
 80032b6:	07d0      	lsls	r0, r2, #31
 80032b8:	d503      	bpl.n	80032c2 <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80032ba:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032c2:	2229      	movs	r2, #41	@ 0x29
 80032c4:	e7ca      	b.n	800325c <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 80032c6:	1c69      	adds	r1, r5, #1
 80032c8:	d09d      	beq.n	8003206 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ca:	f7ff fc3f 	bl	8002b4c <HAL_GetTick>
 80032ce:	1b80      	subs	r0, r0, r6
 80032d0:	42a8      	cmp	r0, r5
 80032d2:	d8d2      	bhi.n	800327a <HAL_DMA2D_PollForTransfer+0x9a>
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	d195      	bne.n	8003204 <HAL_DMA2D_PollForTransfer+0x24>
 80032d8:	e7cf      	b.n	800327a <HAL_DMA2D_PollForTransfer+0x9a>
	...

080032dc <HAL_DMA2D_ConfigLayer>:
{
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80032de:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 80032e2:	4603      	mov	r3, r0
 80032e4:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 80032e6:	2a01      	cmp	r2, #1
 80032e8:	d02b      	beq.n	8003342 <HAL_DMA2D_ConfigLayer+0x66>
 80032ea:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032ec:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032f0:	010e      	lsls	r6, r1, #4
 80032f2:	4f1c      	ldr	r7, [pc, #112]	@ (8003364 <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 80032f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80032f8:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 80032fc:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8003300:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8003302:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003306:	3c09      	subs	r4, #9
 8003308:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800330a:	bf96      	itet	ls
 800330c:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003310:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003314:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003316:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003318:	b9a1      	cbnz	r1, 8003344 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800331a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800331c:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800331e:	ea01 0107 	and.w	r1, r1, r7
 8003322:	ea41 0100 	orr.w	r1, r1, r0
 8003326:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800332c:	d803      	bhi.n	8003336 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800332e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003330:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8003334:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003336:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 8003338:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800333a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 800333e:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 8003342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003344:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003346:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003348:	ea01 0107 	and.w	r1, r1, r7
 800334c:	ea41 0100 	orr.w	r1, r1, r0
 8003350:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003352:	eb03 0106 	add.w	r1, r3, r6
 8003356:	6989      	ldr	r1, [r1, #24]
 8003358:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800335a:	d8ec      	bhi.n	8003336 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800335c:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 8003360:	6215      	str	r5, [r2, #32]
 8003362:	e7e8      	b.n	8003336 <HAL_DMA2D_ConfigLayer+0x5a>
 8003364:	00fcfff0 	.word	0x00fcfff0

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800336c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 800352c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003372:	4a6c      	ldr	r2, [pc, #432]	@ (8003524 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8003374:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003376:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003378:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 800337e:	43ac      	bics	r4, r5
 8003380:	f040 80b7 	bne.w	80034f2 <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003384:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003386:	2703      	movs	r7, #3
 8003388:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800338c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003390:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003394:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003396:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800339a:	2f01      	cmp	r7, #1
 800339c:	d834      	bhi.n	8003408 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 800339e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033a0:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80033a4:	68cf      	ldr	r7, [r1, #12]
 80033a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80033aa:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80033ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80033b0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033b2:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80033ba:	409f      	lsls	r7, r3
 80033bc:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80033c0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80033c2:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c4:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033c6:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033ca:	688f      	ldr	r7, [r1, #8]
 80033cc:	fa07 f70e 	lsl.w	r7, r7, lr
 80033d0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 80033d4:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d6:	d119      	bne.n	800340c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 80033d8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033dc:	f003 0a07 	and.w	sl, r3, #7
 80033e0:	f04f 0b0f 	mov.w	fp, #15
 80033e4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80033e8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80033ec:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033f0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80033f4:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033f8:	690f      	ldr	r7, [r1, #16]
 80033fa:	fa07 f70a 	lsl.w	r7, r7, sl
 80033fe:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8003402:	f8c8 7020 	str.w	r7, [r8, #32]
 8003406:	e001      	b.n	800340c <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003408:	2c03      	cmp	r4, #3
 800340a:	d1da      	bne.n	80033c2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800340c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800340e:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003412:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003416:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800341a:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 800341e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003420:	d067      	beq.n	80034f2 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003422:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8003426:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800342a:	f003 0c03 	and.w	ip, r3, #3
 800342e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003432:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003436:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800343a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343e:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8003442:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8003446:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800344a:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8003452:	9401      	str	r4, [sp, #4]
 8003454:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003456:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003458:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800345c:	4c32      	ldr	r4, [pc, #200]	@ (8003528 <HAL_GPIO_Init+0x1c0>)
 800345e:	42a0      	cmp	r0, r4
 8003460:	d04e      	beq.n	8003500 <HAL_GPIO_Init+0x198>
 8003462:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003466:	42a0      	cmp	r0, r4
 8003468:	d04c      	beq.n	8003504 <HAL_GPIO_Init+0x19c>
 800346a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800346e:	42a0      	cmp	r0, r4
 8003470:	d04a      	beq.n	8003508 <HAL_GPIO_Init+0x1a0>
 8003472:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003476:	42a0      	cmp	r0, r4
 8003478:	d048      	beq.n	800350c <HAL_GPIO_Init+0x1a4>
 800347a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800347e:	42a0      	cmp	r0, r4
 8003480:	d046      	beq.n	8003510 <HAL_GPIO_Init+0x1a8>
 8003482:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003486:	42a0      	cmp	r0, r4
 8003488:	d044      	beq.n	8003514 <HAL_GPIO_Init+0x1ac>
 800348a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800348e:	42a0      	cmp	r0, r4
 8003490:	d042      	beq.n	8003518 <HAL_GPIO_Init+0x1b0>
 8003492:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003496:	42a0      	cmp	r0, r4
 8003498:	d040      	beq.n	800351c <HAL_GPIO_Init+0x1b4>
 800349a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800349e:	42a0      	cmp	r0, r4
 80034a0:	d03e      	beq.n	8003520 <HAL_GPIO_Init+0x1b8>
 80034a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80034a6:	42a0      	cmp	r0, r4
 80034a8:	bf14      	ite	ne
 80034aa:	240a      	movne	r4, #10
 80034ac:	2409      	moveq	r4, #9
 80034ae:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b2:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034b6:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80034ba:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80034bc:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 80034c0:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	bf0c      	ite	eq
 80034c4:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80034c6:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034c8:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 80034cc:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80034ce:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	bf0c      	ite	eq
 80034d2:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80034d4:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034d6:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 80034da:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80034dc:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80034de:	bf0c      	ite	eq
 80034e0:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 80034e2:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80034e6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80034e8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80034ea:	bf54      	ite	pl
 80034ec:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80034ee:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 80034f0:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80034f2:	3301      	adds	r3, #1
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	f47f af3d 	bne.w	8003374 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80034fa:	b003      	add	sp, #12
 80034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003500:	2400      	movs	r4, #0
 8003502:	e7d4      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003504:	2401      	movs	r4, #1
 8003506:	e7d2      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003508:	2402      	movs	r4, #2
 800350a:	e7d0      	b.n	80034ae <HAL_GPIO_Init+0x146>
 800350c:	2403      	movs	r4, #3
 800350e:	e7ce      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003510:	2404      	movs	r4, #4
 8003512:	e7cc      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003514:	2405      	movs	r4, #5
 8003516:	e7ca      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003518:	2406      	movs	r4, #6
 800351a:	e7c8      	b.n	80034ae <HAL_GPIO_Init+0x146>
 800351c:	2407      	movs	r4, #7
 800351e:	e7c6      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003520:	2408      	movs	r4, #8
 8003522:	e7c4      	b.n	80034ae <HAL_GPIO_Init+0x146>
 8003524:	40013c00 	.word	0x40013c00
 8003528:	40020000 	.word	0x40020000
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003530:	6903      	ldr	r3, [r0, #16]
 8003532:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003534:	bf14      	ite	ne
 8003536:	2001      	movne	r0, #1
 8003538:	2000      	moveq	r0, #0
 800353a:	4770      	bx	lr

0800353c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800353c:	b10a      	cbz	r2, 8003542 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800353e:	6181      	str	r1, [r0, #24]
  }
}
 8003540:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003542:	0409      	lsls	r1, r1, #16
 8003544:	e7fb      	b.n	800353e <HAL_GPIO_WritePin+0x2>
	...

08003548 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003548:	4a04      	ldr	r2, [pc, #16]	@ (800355c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800354a:	6951      	ldr	r1, [r2, #20]
 800354c:	4201      	tst	r1, r0
{
 800354e:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003550:	d002      	beq.n	8003558 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003552:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003554:	f002 fb2a 	bl	8005bac <HAL_GPIO_EXTI_Callback>
  }
}
 8003558:	bd08      	pop	{r3, pc}
 800355a:	bf00      	nop
 800355c:	40013c00 	.word	0x40013c00

08003560 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003560:	6803      	ldr	r3, [r0, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	0791      	lsls	r1, r2, #30
 8003566:	d501      	bpl.n	800356c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003568:	2200      	movs	r2, #0
 800356a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	07d2      	lsls	r2, r2, #31
 8003570:	d403      	bmi.n	800357a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	619a      	str	r2, [r3, #24]
  }
}
 800357a:	4770      	bx	lr

0800357c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800357c:	b530      	push	{r4, r5, lr}
 800357e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003580:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003584:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003586:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8003588:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800358e:	4a05      	ldr	r2, [pc, #20]	@ (80035a4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003590:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003592:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003596:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800359a:	ea20 0002 	bic.w	r0, r0, r2
 800359e:	4303      	orrs	r3, r0
 80035a0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035a2:	bd30      	pop	{r4, r5, pc}
 80035a4:	03ff63ff 	.word	0x03ff63ff

080035a8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80035a8:	6803      	ldr	r3, [r0, #0]
{
 80035aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80035ae:	699c      	ldr	r4, [r3, #24]
{
 80035b0:	4605      	mov	r5, r0
 80035b2:	460f      	mov	r7, r1
 80035b4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035b6:	f014 0410 	ands.w	r4, r4, #16
 80035ba:	d06f      	beq.n	800369c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80035bc:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035be:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	0690      	lsls	r0, r2, #26
 80035ca:	d461      	bmi.n	8003690 <I2C_IsErrorOccurred+0xe8>
 80035cc:	f1b8 0f00 	cmp.w	r8, #0
 80035d0:	d035      	beq.n	800363e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80035d2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80035d6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80035d8:	682e      	ldr	r6, [r5, #0]
 80035da:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035dc:	05d9      	lsls	r1, r3, #23
 80035de:	d505      	bpl.n	80035ec <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80035e4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80035e8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035ea:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035ec:	055a      	lsls	r2, r3, #21
 80035ee:	d505      	bpl.n	80035fc <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80035f4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80035f8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035fa:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035fc:	059b      	lsls	r3, r3, #22
 80035fe:	d54f      	bpl.n	80036a0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003600:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003604:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003608:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800360a:	4628      	mov	r0, r5
 800360c:	f7ff ffa8 	bl	8003560 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003610:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8003612:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003614:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003618:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800361c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8003626:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003628:	4323      	orrs	r3, r4
 800362a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800362c:	2320      	movs	r3, #32
 800362e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003638:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800363c:	e032      	b.n	80036a4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800363e:	1c7a      	adds	r2, r7, #1
 8003640:	d0c1      	beq.n	80035c6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7ff fa83 	bl	8002b4c <HAL_GetTick>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	42b8      	cmp	r0, r7
 800364a:	d801      	bhi.n	8003650 <I2C_IsErrorOccurred+0xa8>
 800364c:	2f00      	cmp	r7, #0
 800364e:	d1b9      	bne.n	80035c4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003654:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003658:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800365a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800365c:	0400      	lsls	r0, r0, #16
 800365e:	d50a      	bpl.n	8003676 <I2C_IsErrorOccurred+0xce>
 8003660:	0449      	lsls	r1, r1, #17
 8003662:	d408      	bmi.n	8003676 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8003664:	2a20      	cmp	r2, #32
 8003666:	d006      	beq.n	8003676 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800366e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003670:	f7ff fa6c 	bl	8002b4c <HAL_GetTick>
 8003674:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	d4a2      	bmi.n	80035c4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800367e:	f7ff fa65 	bl	8002b4c <HAL_GetTick>
 8003682:	1b80      	subs	r0, r0, r6
 8003684:	2819      	cmp	r0, #25
 8003686:	d9f6      	bls.n	8003676 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800368a:	f04f 0801 	mov.w	r8, #1
 800368e:	e799      	b.n	80035c4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8003690:	f1b8 0f00 	cmp.w	r8, #0
 8003694:	d19d      	bne.n	80035d2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003696:	2220      	movs	r2, #32
 8003698:	61da      	str	r2, [r3, #28]
 800369a:	e79a      	b.n	80035d2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	4620      	mov	r0, r4
 800369e:	e79b      	b.n	80035d8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1b2      	bne.n	800360a <I2C_IsErrorOccurred+0x62>
}
 80036a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036a8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4604      	mov	r4, r0
 80036ac:	460d      	mov	r5, r1
 80036ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	079b      	lsls	r3, r3, #30
 80036b6:	d501      	bpl.n	80036bc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80036b8:	2000      	movs	r0, #0
 80036ba:	e01f      	b.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036bc:	4632      	mov	r2, r6
 80036be:	4629      	mov	r1, r5
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff ff71 	bl	80035a8 <I2C_IsErrorOccurred>
 80036c6:	b9c0      	cbnz	r0, 80036fa <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	1c6a      	adds	r2, r5, #1
 80036ca:	d0f1      	beq.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7ff fa3e 	bl	8002b4c <HAL_GetTick>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	42a8      	cmp	r0, r5
 80036d4:	d801      	bhi.n	80036da <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80036d6:	2d00      	cmp	r5, #0
 80036d8:	d1ea      	bne.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f013 0302 	ands.w	r3, r3, #2
 80036e2:	d1e5      	bne.n	80036b0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80036e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	2220      	movs	r2, #32
 80036f2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
}
 80036fc:	bd70      	pop	{r4, r5, r6, pc}

080036fe <I2C_WaitOnFlagUntilTimeout>:
{
 80036fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003706:	4604      	mov	r4, r0
 8003708:	460f      	mov	r7, r1
 800370a:	4616      	mov	r6, r2
 800370c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	ea37 0303 	bics.w	r3, r7, r3
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	42b3      	cmp	r3, r6
 800371e:	d001      	beq.n	8003724 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003720:	2000      	movs	r0, #0
 8003722:	e025      	b.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003724:	4642      	mov	r2, r8
 8003726:	4629      	mov	r1, r5
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff ff3d 	bl	80035a8 <I2C_IsErrorOccurred>
 800372e:	b9f0      	cbnz	r0, 800376e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8003730:	1c6b      	adds	r3, r5, #1
 8003732:	d0ec      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003734:	f7ff fa0a 	bl	8002b4c <HAL_GetTick>
 8003738:	eba0 0008 	sub.w	r0, r0, r8
 800373c:	42a8      	cmp	r0, r5
 800373e:	d801      	bhi.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x46>
 8003740:	2d00      	cmp	r5, #0
 8003742:	d1e4      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	ea37 0303 	bics.w	r3, r7, r3
 800374c:	bf0c      	ite	eq
 800374e:	2301      	moveq	r3, #1
 8003750:	2300      	movne	r3, #0
 8003752:	42b3      	cmp	r3, r6
 8003754:	d1db      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003756:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003758:	f043 0320 	orr.w	r3, r3, #32
 800375c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800375e:	2320      	movs	r3, #32
 8003760:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	2300      	movs	r3, #0
 8003766:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800376a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800376e:	2001      	movs	r0, #1
}
 8003770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003774 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4604      	mov	r4, r0
 8003778:	460d      	mov	r5, r1
 800377a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	069b      	lsls	r3, r3, #26
 8003782:	d501      	bpl.n	8003788 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8003784:	2000      	movs	r0, #0
 8003786:	e01d      	b.n	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003788:	4632      	mov	r2, r6
 800378a:	4629      	mov	r1, r5
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff ff0b 	bl	80035a8 <I2C_IsErrorOccurred>
 8003792:	b9b0      	cbnz	r0, 80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7ff f9da 	bl	8002b4c <HAL_GetTick>
 8003798:	1b80      	subs	r0, r0, r6
 800379a:	42a8      	cmp	r0, r5
 800379c:	d801      	bhi.n	80037a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800379e:	2d00      	cmp	r5, #0
 80037a0:	d1ec      	bne.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f013 0320 	ands.w	r3, r3, #32
 80037aa:	d1e7      	bne.n	800377c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80037ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b2:	f042 0220 	orr.w	r2, r2, #32
 80037b6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	2220      	movs	r2, #32
 80037ba:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80037c2:	2001      	movs	r0, #1
}
 80037c4:	bd70      	pop	{r4, r5, r6, pc}

080037c6 <HAL_I2C_MspInit>:
}
 80037c6:	4770      	bx	lr

080037c8 <HAL_I2C_Init>:
{
 80037c8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80037ca:	4604      	mov	r4, r0
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d04e      	beq.n	800386e <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80037d4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037d8:	b91b      	cbnz	r3, 80037e2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80037de:	f7ff fff2 	bl	80037c6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e2:	2324      	movs	r3, #36	@ 0x24
 80037e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037f8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003800:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003802:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003806:	2901      	cmp	r1, #1
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800380a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800380e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003816:	e007      	b.n	8003828 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003818:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800381c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800381e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003820:	d1f6      	bne.n	8003810 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003828:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800382a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003836:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800383e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003840:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003844:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003846:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003848:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800384c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800384e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800385e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003860:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003862:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003866:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800386c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800386e:	2001      	movs	r0, #1
 8003870:	e7fc      	b.n	800386c <HAL_I2C_Init+0xa4>

08003872 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_DeInit>:
{
 8003874:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003876:	4604      	mov	r4, r0
 8003878:	b198      	cbz	r0, 80038a2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800387a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	2324      	movs	r3, #36	@ 0x24
 800387e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003882:	6813      	ldr	r3, [r2, #0]
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800388a:	f7ff fff2 	bl	8003872 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388e:	2000      	movs	r0, #0
 8003890:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8003892:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8003896:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80038a0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038a2:	2001      	movs	r0, #1
 80038a4:	e7fc      	b.n	80038a0 <HAL_I2C_DeInit+0x2c>
	...

080038a8 <HAL_I2C_Mem_Write>:
{
 80038a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80038b2:	4604      	mov	r4, r0
 80038b4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	2b20      	cmp	r3, #32
{
 80038b8:	4616      	mov	r6, r2
 80038ba:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80038be:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c2:	f040 80c6 	bne.w	8003a52 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80038c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80038c8:	b113      	cbz	r3, 80038d0 <HAL_I2C_Mem_Write+0x28>
 80038ca:	f1ba 0f00 	cmp.w	sl, #0
 80038ce:	d106      	bne.n	80038de <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
}
 80038d8:	b003      	add	sp, #12
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80038de:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f000 80b5 	beq.w	8003a52 <HAL_I2C_Mem_Write+0x1aa>
 80038e8:	f04f 0b01 	mov.w	fp, #1
 80038ec:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80038f0:	f7ff f92c 	bl	8002b4c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80038f6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f8:	9000      	str	r0, [sp, #0]
 80038fa:	465a      	mov	r2, fp
 80038fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003900:	4620      	mov	r0, r4
 8003902:	f7ff fefc 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 8003906:	2800      	cmp	r0, #0
 8003908:	d1e5      	bne.n	80038d6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800390a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800390c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800390e:	fa5f f289 	uxtb.w	r2, r9
 8003912:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003914:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003918:	2340      	movs	r3, #64	@ 0x40
 800391a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800391e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003920:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003922:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003924:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003926:	4b4c      	ldr	r3, [pc, #304]	@ (8003a58 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8003928:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003932:	f7ff fe23 	bl	800357c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003936:	462a      	mov	r2, r5
 8003938:	4641      	mov	r1, r8
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff feb4 	bl	80036a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003940:	bb18      	cbnz	r0, 800398a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003942:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003946:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003948:	d115      	bne.n	8003976 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	2200      	movs	r2, #0
 800394e:	2180      	movs	r1, #128	@ 0x80
 8003950:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003952:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003954:	4643      	mov	r3, r8
 8003956:	9500      	str	r5, [sp, #0]
 8003958:	f7ff fed1 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 800395c:	b9a8      	cbnz	r0, 800398a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2bff      	cmp	r3, #255	@ 0xff
 8003964:	d815      	bhi.n	8003992 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8003966:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003968:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800396c:	b292      	uxth	r2, r2
 800396e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	9000      	str	r0, [sp, #0]
 8003974:	e012      	b.n	800399c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003976:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003978:	4641      	mov	r1, r8
 800397a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800397e:	462a      	mov	r2, r5
 8003980:	f7ff fe92 	bl	80036a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003984:	b908      	cbnz	r0, 800398a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	e7df      	b.n	800394a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003990:	e7a1      	b.n	80038d6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003992:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003994:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003998:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800399a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800399c:	4639      	mov	r1, r7
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff fdec 	bl	800357c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a4:	462a      	mov	r2, r5
 80039a6:	4641      	mov	r1, r8
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff fe7d 	bl	80036a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d191      	bne.n	80038d6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039b4:	6822      	ldr	r2, [r4, #0]
 80039b6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80039ba:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80039bc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80039be:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80039c0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80039c2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80039c4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80039c6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80039c8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80039ca:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80039ce:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b1b3      	cbz	r3, 8003a02 <HAL_I2C_Mem_Write+0x15a>
 80039d4:	b9aa      	cbnz	r2, 8003a02 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	4643      	mov	r3, r8
 80039d8:	2180      	movs	r1, #128	@ 0x80
 80039da:	4620      	mov	r0, r4
 80039dc:	9500      	str	r5, [sp, #0]
 80039de:	f7ff fe8e 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f47f af77 	bne.w	80038d6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2bff      	cmp	r3, #255	@ 0xff
 80039ee:	d928      	bls.n	8003a42 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f0:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039fa:	4639      	mov	r1, r7
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff fdbd 	bl	800357c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003a02:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1cc      	bne.n	80039a4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff feb0 	bl	8003774 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f47f af5e 	bne.w	80038d6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003a26:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003a2a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003a38:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003a40:	e74a      	b.n	80038d8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8003a42:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	e7d3      	b.n	80039fa <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8003a52:	2002      	movs	r0, #2
 8003a54:	e740      	b.n	80038d8 <HAL_I2C_Mem_Write+0x30>
 8003a56:	bf00      	nop
 8003a58:	80002000 	.word	0x80002000

08003a5c <HAL_I2C_Mem_Read>:
{
 8003a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a60:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8003a66:	4604      	mov	r4, r0
 8003a68:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6a:	2b20      	cmp	r3, #32
{
 8003a6c:	4616      	mov	r6, r2
 8003a6e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8003a72:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a76:	f040 80c9 	bne.w	8003c0c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8003a7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003a7c:	b113      	cbz	r3, 8003a84 <HAL_I2C_Mem_Read+0x28>
 8003a7e:	f1ba 0f00 	cmp.w	sl, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a88:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
}
 8003a8c:	b003      	add	sp, #12
 8003a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8003a92:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	f000 80b8 	beq.w	8003c0c <HAL_I2C_Mem_Read+0x1b0>
 8003a9c:	f04f 0b01 	mov.w	fp, #1
 8003aa0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8003aa4:	f7ff f852 	bl	8002b4c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa8:	2319      	movs	r3, #25
 8003aaa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003aac:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aae:	465a      	mov	r2, fp
 8003ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff fe22 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d1e4      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8003ac2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ac4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aca:	2240      	movs	r2, #64	@ 0x40
 8003acc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8003ad0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad2:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ad4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8003ad6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ad8:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8003ada:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ade:	9200      	str	r2, [sp, #0]
 8003ae0:	fa5f f289 	uxtb.w	r2, r9
 8003ae4:	f7ff fd4a 	bl	800357c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4641      	mov	r1, r8
 8003aec:	4620      	mov	r0, r4
 8003aee:	f7ff fddb 	bl	80036a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af2:	bb20      	cbnz	r0, 8003b3e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af4:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afa:	d116      	bne.n	8003b2a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003afc:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003afe:	2200      	movs	r2, #0
 8003b00:	2140      	movs	r1, #64	@ 0x40
 8003b02:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b04:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	4643      	mov	r3, r8
 8003b08:	9500      	str	r5, [sp, #0]
 8003b0a:	f7ff fdf8 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	b9b0      	cbnz	r0, 8003b3e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2bff      	cmp	r3, #255	@ 0xff
 8003b16:	4b3f      	ldr	r3, [pc, #252]	@ (8003c14 <HAL_I2C_Mem_Read+0x1b8>)
 8003b18:	d815      	bhi.n	8003b46 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8003b1a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003b1c:	b292      	uxth	r2, r2
 8003b1e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b28:	e012      	b.n	8003b50 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b2a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	462a      	mov	r2, r5
 8003b34:	f7ff fdb8 	bl	80036a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b38:	b908      	cbnz	r0, 8003b3e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	e7de      	b.n	8003afc <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003b44:	e7a1      	b.n	8003a8a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = 1U;
 8003b46:	2201      	movs	r2, #1
 8003b48:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b50:	4639      	mov	r1, r7
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff fd12 	bl	800357c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b58:	4643      	mov	r3, r8
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4620      	mov	r0, r4
 8003b60:	9500      	str	r5, [sp, #0]
 8003b62:	f7ff fdcc 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d18f      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b70:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003b74:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003b76:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8003b78:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003b7a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003b7c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b7e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8003b80:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8003b82:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	b1b3      	cbz	r3, 8003bbc <HAL_I2C_Mem_Read+0x160>
 8003b8e:	b9aa      	cbnz	r2, 8003bbc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b90:	4643      	mov	r3, r8
 8003b92:	2180      	movs	r1, #128	@ 0x80
 8003b94:	4620      	mov	r0, r4
 8003b96:	9500      	str	r5, [sp, #0]
 8003b98:	f7ff fdb1 	bl	80036fe <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	f47f af74 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ba2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2bff      	cmp	r3, #255	@ 0xff
 8003ba8:	d928      	bls.n	8003bfc <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 8003baa:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = 1U;
 8003bb0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bb2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fce0 	bl	800357c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003bbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1c9      	bne.n	8003b58 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc4:	462a      	mov	r2, r5
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f7ff fdd3 	bl	8003774 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	f47f af5b 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd4:	6823      	ldr	r3, [r4, #0]
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8003be0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8003be4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003bf2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bf6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8003bfa:	e747      	b.n	8003a8c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8003bfc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8003c02:	b292      	uxth	r2, r2
 8003c04:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	9000      	str	r0, [sp, #0]
 8003c0a:	e7d3      	b.n	8003bb4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	e73d      	b.n	8003a8c <HAL_I2C_Mem_Read+0x30>
 8003c10:	80002000 	.word	0x80002000
 8003c14:	80002400 	.word	0x80002400

08003c18 <HAL_I2C_GetState>:
  return hi2c->State;
 8003c18:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8003c1c:	4770      	bx	lr

08003c1e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c1e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c20:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c22:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c26:	3284      	adds	r2, #132	@ 0x84
 8003c28:	1883      	adds	r3, r0, r2
{
 8003c2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c2e:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c30:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c34:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c36:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c3a:	684c      	ldr	r4, [r1, #4]
 8003c3c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c40:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c44:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c48:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003c4a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c4c:	68c5      	ldr	r5, [r0, #12]
 8003c4e:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8003c52:	443d      	add	r5, r7
 8003c54:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c58:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c5a:	68c6      	ldr	r6, [r0, #12]
 8003c5c:	68cd      	ldr	r5, [r1, #12]
 8003c5e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003c62:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003c64:	689d      	ldr	r5, [r3, #8]
 8003c66:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8003c6a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c6c:	688d      	ldr	r5, [r1, #8]
 8003c6e:	68c7      	ldr	r7, [r0, #12]
 8003c70:	3501      	adds	r5, #1
 8003c72:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003c76:	443d      	add	r5, r7
 8003c78:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c7c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c7e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c80:	691d      	ldr	r5, [r3, #16]
 8003c82:	f025 0507 	bic.w	r5, r5, #7
 8003c86:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c88:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c8a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c8c:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c90:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c94:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c98:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8003c9c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003ca0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003ca4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8003ca8:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003caa:	695d      	ldr	r5, [r3, #20]
 8003cac:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8003cb0:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cb2:	694d      	ldr	r5, [r1, #20]
 8003cb4:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cb6:	69dd      	ldr	r5, [r3, #28]
 8003cb8:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8003cbc:	f025 0507 	bic.w	r5, r5, #7
 8003cc0:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cc2:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8003cc6:	433d      	orrs	r5, r7
 8003cc8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003cca:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ccc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003cce:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003cd2:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003cd4:	b31e      	cbz	r6, 8003d1e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003cd6:	2e01      	cmp	r6, #1
 8003cd8:	d023      	beq.n	8003d22 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003cda:	1eb5      	subs	r5, r6, #2
 8003cdc:	2d02      	cmp	r5, #2
 8003cde:	d922      	bls.n	8003d26 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8003ce0:	2e07      	cmp	r6, #7
 8003ce2:	bf14      	ite	ne
 8003ce4:	2501      	movne	r5, #1
 8003ce6:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ce8:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cea:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003cee:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cf2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003cf4:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003cf6:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cf8:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cfa:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cfc:	436e      	muls	r6, r5
 8003cfe:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8003d02:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003d04:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003d06:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8003d0a:	f024 0407 	bic.w	r4, r4, #7
 8003d0e:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003d10:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d12:	5883      	ldr	r3, [r0, r2]
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	5083      	str	r3, [r0, r2]
}
 8003d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003d1e:	2504      	movs	r5, #4
 8003d20:	e7e2      	b.n	8003ce8 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003d22:	2503      	movs	r5, #3
 8003d24:	e7e0      	b.n	8003ce8 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003d26:	2502      	movs	r5, #2
 8003d28:	e7de      	b.n	8003ce8 <LTDC_SetConfig+0xca>

08003d2a <HAL_LTDC_MspInit>:
}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_LTDC_Init>:
{
 8003d2c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003d2e:	4604      	mov	r4, r0
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d063      	beq.n	8003dfc <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d34:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8003d38:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d3c:	b91b      	cbnz	r3, 8003d46 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003d3e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003d42:	f7ff fff2 	bl	8003d2a <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d46:	2302      	movs	r3, #2
 8003d48:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	699a      	ldr	r2, [r3, #24]
 8003d50:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d54:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d56:	6999      	ldr	r1, [r3, #24]
 8003d58:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003d5c:	4302      	orrs	r2, r0
 8003d5e:	68e0      	ldr	r0, [r4, #12]
 8003d60:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d62:	6920      	ldr	r0, [r4, #16]
 8003d64:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d66:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d68:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d6a:	4925      	ldr	r1, [pc, #148]	@ (8003e00 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d6c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	400a      	ands	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d7a:	69a0      	ldr	r0, [r4, #24]
 8003d7c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003d7e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d80:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	400a      	ands	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003d8e:	6a20      	ldr	r0, [r4, #32]
 8003d90:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d92:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003d94:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003da2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003da4:	4302      	orrs	r2, r0
 8003da6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003dac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003dae:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003db6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003db8:	430a      	orrs	r2, r1
 8003dba:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003dbe:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dc2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003dc6:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dcc:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8003dce:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8003dd2:	432a      	orrs	r2, r5
 8003dd4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003dd8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003dda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003de2:	f042 0206 	orr.w	r2, r2, #6
 8003de6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003df0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003df2:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003df6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	e7fc      	b.n	8003dfa <HAL_LTDC_Init+0xce>
 8003e00:	f000f800 	.word	0xf000f800

08003e04 <HAL_LTDC_ConfigLayer>:
{
 8003e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003e08:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	460f      	mov	r7, r1
 8003e10:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f04f 0002 	mov.w	r0, #2
 8003e18:	d01f      	beq.n	8003e5a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e1a:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8003e1c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e20:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e22:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e26:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8003e2a:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e2e:	3438      	adds	r4, #56	@ 0x38
 8003e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e3c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4662      	mov	r2, ip
 8003e42:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003e44:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003e46:	f7ff feea 	bl	8003c1e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e4a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003e4c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003e4e:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003e52:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8003e56:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8003e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e5e <HAL_LTDC_GetState>:
  return hltdc->State;
 8003e5e:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 8003e62:	4770      	bx	lr

08003e64 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003e66:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e6a:	4c19      	ldr	r4, [pc, #100]	@ (8003ed0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e70:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e82:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e84:	f7fe fe62 	bl	8002b4c <HAL_GetTick>
 8003e88:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	03da      	lsls	r2, r3, #15
 8003e8e:	d50c      	bpl.n	8003eaa <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e90:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e92:	4d0f      	ldr	r5, [pc, #60]	@ (8003ed0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e98:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003e9a:	f7fe fe57 	bl	8002b4c <HAL_GetTick>
 8003e9e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ea0:	686b      	ldr	r3, [r5, #4]
 8003ea2:	039b      	lsls	r3, r3, #14
 8003ea4:	d50a      	bpl.n	8003ebc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e006      	b.n	8003eb8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eaa:	f7fe fe4f 	bl	8002b4c <HAL_GetTick>
 8003eae:	1b40      	subs	r0, r0, r5
 8003eb0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003eb4:	d9e9      	bls.n	8003e8a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003eb6:	2003      	movs	r0, #3
}
 8003eb8:	b003      	add	sp, #12
 8003eba:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ebc:	f7fe fe46 	bl	8002b4c <HAL_GetTick>
 8003ec0:	1b00      	subs	r0, r0, r4
 8003ec2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003ec6:	d9eb      	bls.n	8003ea0 <HAL_PWREx_EnableOverDrive+0x3c>
 8003ec8:	e7f5      	b.n	8003eb6 <HAL_PWREx_EnableOverDrive+0x52>
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40007000 	.word	0x40007000

08003ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed8:	4604      	mov	r4, r0
 8003eda:	b340      	cbz	r0, 8003f2e <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	07de      	lsls	r6, r3, #31
 8003ee0:	d410      	bmi.n	8003f04 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	079d      	lsls	r5, r3, #30
 8003ee6:	d461      	bmi.n	8003fac <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	0719      	lsls	r1, r3, #28
 8003eec:	f100 80a6 	bmi.w	800403c <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	075a      	lsls	r2, r3, #29
 8003ef4:	f100 80c7 	bmi.w	8004086 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef8:	69a2      	ldr	r2, [r4, #24]
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	f040 8130 	bne.w	8004160 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003f00:	2000      	movs	r0, #0
 8003f02:	e02c      	b.n	8003f5e <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f04:	4b94      	ldr	r3, [pc, #592]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f002 020c 	and.w	r2, r2, #12
 8003f0c:	2a04      	cmp	r2, #4
 8003f0e:	d007      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	f002 020c 	and.w	r2, r2, #12
 8003f16:	2a08      	cmp	r2, #8
 8003f18:	d10b      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5e>
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	0259      	lsls	r1, r3, #9
 8003f1e:	d508      	bpl.n	8003f32 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	4b8d      	ldr	r3, [pc, #564]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	039a      	lsls	r2, r3, #14
 8003f26:	d5dc      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0xe>
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e015      	b.n	8003f5e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f32:	6863      	ldr	r3, [r4, #4]
 8003f34:	4d88      	ldr	r5, [pc, #544]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3a:	d113      	bne.n	8003f64 <HAL_RCC_OscConfig+0x90>
 8003f3c:	682b      	ldr	r3, [r5, #0]
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f44:	f7fe fe02 	bl	8002b4c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f48:	4e83      	ldr	r6, [pc, #524]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8003f4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	039b      	lsls	r3, r3, #14
 8003f50:	d4c7      	bmi.n	8003ee2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f52:	f7fe fdfb 	bl	8002b4c <HAL_GetTick>
 8003f56:	1b40      	subs	r0, r0, r5
 8003f58:	2864      	cmp	r0, #100	@ 0x64
 8003f5a:	d9f7      	bls.n	8003f4c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8003f5c:	2003      	movs	r0, #3
}
 8003f5e:	b002      	add	sp, #8
 8003f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	b99b      	cbnz	r3, 8003f8e <HAL_RCC_OscConfig+0xba>
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f76:	f7fe fde9 	bl	8002b4c <HAL_GetTick>
 8003f7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	039f      	lsls	r7, r3, #14
 8003f80:	d5af      	bpl.n	8003ee2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f82:	f7fe fde3 	bl	8002b4c <HAL_GetTick>
 8003f86:	1b80      	subs	r0, r0, r6
 8003f88:	2864      	cmp	r0, #100	@ 0x64
 8003f8a:	d9f7      	bls.n	8003f7c <HAL_RCC_OscConfig+0xa8>
 8003f8c:	e7e6      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	d103      	bne.n	8003f9e <HAL_RCC_OscConfig+0xca>
 8003f96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f9a:	602b      	str	r3, [r5, #0]
 8003f9c:	e7ce      	b.n	8003f3c <HAL_RCC_OscConfig+0x68>
 8003f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003faa:	e7ca      	b.n	8003f42 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fac:	4b6a      	ldr	r3, [pc, #424]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f012 0f0c 	tst.w	r2, #12
 8003fb4:	d007      	beq.n	8003fc6 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	f002 020c 	and.w	r2, r2, #12
 8003fbc:	2a08      	cmp	r2, #8
 8003fbe:	d111      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x110>
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	025d      	lsls	r5, r3, #9
 8003fc4:	d40e      	bmi.n	8003fe4 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc6:	4a64      	ldr	r2, [pc, #400]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	0799      	lsls	r1, r3, #30
 8003fcc:	d502      	bpl.n	8003fd4 <HAL_RCC_OscConfig+0x100>
 8003fce:	68e3      	ldr	r3, [r4, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d1ac      	bne.n	8003f2e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	6921      	ldr	r1, [r4, #16]
 8003fd8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003fdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003fe0:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	e781      	b.n	8003ee8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	4d5c      	ldr	r5, [pc, #368]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8003fe8:	b1bb      	cbz	r3, 800401a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fdab 	bl	8002b4c <HAL_GetTick>
 8003ff6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	079b      	lsls	r3, r3, #30
 8003ffc:	d507      	bpl.n	800400e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	682b      	ldr	r3, [r5, #0]
 8004000:	6922      	ldr	r2, [r4, #16]
 8004002:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004006:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	e76c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe fd9d 	bl	8002b4c <HAL_GetTick>
 8004012:	1b80      	subs	r0, r0, r6
 8004014:	2802      	cmp	r0, #2
 8004016:	d9ef      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x124>
 8004018:	e7a0      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004022:	f7fe fd93 	bl	8002b4c <HAL_GetTick>
 8004026:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	079f      	lsls	r7, r3, #30
 800402c:	f57f af5c 	bpl.w	8003ee8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe fd8c 	bl	8002b4c <HAL_GetTick>
 8004034:	1b80      	subs	r0, r0, r6
 8004036:	2802      	cmp	r0, #2
 8004038:	d9f6      	bls.n	8004028 <HAL_RCC_OscConfig+0x154>
 800403a:	e78f      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403c:	6963      	ldr	r3, [r4, #20]
 800403e:	4d46      	ldr	r5, [pc, #280]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8004040:	b183      	cbz	r3, 8004064 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8004042:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800404a:	f7fe fd7f 	bl	8002b4c <HAL_GetTick>
 800404e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004050:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004052:	079b      	lsls	r3, r3, #30
 8004054:	f53f af4c 	bmi.w	8003ef0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe fd78 	bl	8002b4c <HAL_GetTick>
 800405c:	1b80      	subs	r0, r0, r6
 800405e:	2802      	cmp	r0, #2
 8004060:	d9f6      	bls.n	8004050 <HAL_RCC_OscConfig+0x17c>
 8004062:	e77b      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8004064:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800406c:	f7fe fd6e 	bl	8002b4c <HAL_GetTick>
 8004070:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004072:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8004074:	079f      	lsls	r7, r3, #30
 8004076:	f57f af3b 	bpl.w	8003ef0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407a:	f7fe fd67 	bl	8002b4c <HAL_GetTick>
 800407e:	1b80      	subs	r0, r0, r6
 8004080:	2802      	cmp	r0, #2
 8004082:	d9f6      	bls.n	8004072 <HAL_RCC_OscConfig+0x19e>
 8004084:	e76a      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 8004088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408a:	00d5      	lsls	r5, r2, #3
 800408c:	d427      	bmi.n	80040de <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8004090:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a2:	4d2e      	ldr	r5, [pc, #184]	@ (800415c <HAL_RCC_OscConfig+0x288>)
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	05d8      	lsls	r0, r3, #23
 80040a8:	d51b      	bpl.n	80040e2 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	68a3      	ldr	r3, [r4, #8]
 80040ac:	4d2a      	ldr	r5, [pc, #168]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d127      	bne.n	8004102 <HAL_RCC_OscConfig+0x22e>
 80040b2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80040be:	f7fe fd45 	bl	8002b4c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	4e25      	ldr	r6, [pc, #148]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80040c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80040c8:	079a      	lsls	r2, r3, #30
 80040ca:	d53f      	bpl.n	800414c <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80040cc:	2f00      	cmp	r7, #0
 80040ce:	f43f af13 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <HAL_RCC_OscConfig+0x284>)
 80040d4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040da:	6413      	str	r3, [r2, #64]	@ 0x40
 80040dc:	e70c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80040de:	2700      	movs	r7, #0
 80040e0:	e7df      	b.n	80040a2 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 80040e2:	682b      	ldr	r3, [r5, #0]
 80040e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80040ea:	f7fe fd2f 	bl	8002b4c <HAL_GetTick>
 80040ee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	05d9      	lsls	r1, r3, #23
 80040f4:	d4d9      	bmi.n	80040aa <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fe fd29 	bl	8002b4c <HAL_GetTick>
 80040fa:	1b80      	subs	r0, r0, r6
 80040fc:	2864      	cmp	r0, #100	@ 0x64
 80040fe:	d9f7      	bls.n	80040f0 <HAL_RCC_OscConfig+0x21c>
 8004100:	e72c      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004102:	b9ab      	cbnz	r3, 8004130 <HAL_RCC_OscConfig+0x25c>
 8004104:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	672b      	str	r3, [r5, #112]	@ 0x70
 8004110:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004112:	f023 0304 	bic.w	r3, r3, #4
 8004116:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004118:	f7fe fd18 	bl	8002b4c <HAL_GetTick>
 800411c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004120:	079b      	lsls	r3, r3, #30
 8004122:	d5d3      	bpl.n	80040cc <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fe fd12 	bl	8002b4c <HAL_GetTick>
 8004128:	1b80      	subs	r0, r0, r6
 800412a:	4540      	cmp	r0, r8
 800412c:	d9f7      	bls.n	800411e <HAL_RCC_OscConfig+0x24a>
 800412e:	e715      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	2b05      	cmp	r3, #5
 8004132:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004134:	d103      	bne.n	800413e <HAL_RCC_OscConfig+0x26a>
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	672b      	str	r3, [r5, #112]	@ 0x70
 800413c:	e7b9      	b.n	80040b2 <HAL_RCC_OscConfig+0x1de>
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	672b      	str	r3, [r5, #112]	@ 0x70
 8004144:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	e7b5      	b.n	80040b8 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fe fcfe 	bl	8002b4c <HAL_GetTick>
 8004150:	1b40      	subs	r0, r0, r5
 8004152:	4540      	cmp	r0, r8
 8004154:	d9b7      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1f2>
 8004156:	e701      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004160:	4d38      	ldr	r5, [pc, #224]	@ (8004244 <HAL_RCC_OscConfig+0x370>)
 8004162:	68ab      	ldr	r3, [r5, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d041      	beq.n	80041f0 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 800416c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004170:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004174:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004176:	d12e      	bne.n	80041d6 <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 8004178:	f7fe fce8 	bl	8002b4c <HAL_GetTick>
 800417c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	0199      	lsls	r1, r3, #6
 8004182:	d422      	bmi.n	80041ca <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004184:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	1e5a      	subs	r2, r3, #1
 800418a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800418e:	430b      	orrs	r3, r1
 8004190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004194:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004196:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800419a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800419c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041a4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80041a6:	682b      	ldr	r3, [r5, #0]
 80041a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041ae:	f7fe fccd 	bl	8002b4c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4d24      	ldr	r5, [pc, #144]	@ (8004244 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80041b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	019a      	lsls	r2, r3, #6
 80041ba:	f53f aea1 	bmi.w	8003f00 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041be:	f7fe fcc5 	bl	8002b4c <HAL_GetTick>
 80041c2:	1b00      	subs	r0, r0, r4
 80041c4:	2802      	cmp	r0, #2
 80041c6:	d9f6      	bls.n	80041b6 <HAL_RCC_OscConfig+0x2e2>
 80041c8:	e6c8      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe fcbf 	bl	8002b4c <HAL_GetTick>
 80041ce:	1b80      	subs	r0, r0, r6
 80041d0:	2802      	cmp	r0, #2
 80041d2:	d9d4      	bls.n	800417e <HAL_RCC_OscConfig+0x2aa>
 80041d4:	e6c2      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80041d6:	f7fe fcb9 	bl	8002b4c <HAL_GetTick>
 80041da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	019b      	lsls	r3, r3, #6
 80041e0:	f57f ae8e 	bpl.w	8003f00 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fcb2 	bl	8002b4c <HAL_GetTick>
 80041e8:	1b00      	subs	r0, r0, r4
 80041ea:	2802      	cmp	r0, #2
 80041ec:	d9f6      	bls.n	80041dc <HAL_RCC_OscConfig+0x308>
 80041ee:	e6b5      	b.n	8003f5c <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80041f2:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f4:	f43f ae9b 	beq.w	8003f2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fc:	69e1      	ldr	r1, [r4, #28]
 80041fe:	428a      	cmp	r2, r1
 8004200:	f47f ae95 	bne.w	8003f2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004204:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	428a      	cmp	r2, r1
 800420c:	f47f ae8f 	bne.w	8003f2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004210:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004214:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004216:	401a      	ands	r2, r3
 8004218:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800421c:	f47f ae87 	bne.w	8003f2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004220:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004222:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8004226:	0852      	lsrs	r2, r2, #1
 8004228:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800422a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800422e:	f47f ae7e 	bne.w	8003f2e <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004232:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004234:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004238:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800423c:	bf14      	ite	ne
 800423e:	2001      	movne	r0, #1
 8004240:	2000      	moveq	r0, #0
 8004242:	e68c      	b.n	8003f5e <HAL_RCC_OscConfig+0x8a>
 8004244:	40023800 	.word	0x40023800

08004248 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4913      	ldr	r1, [pc, #76]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800424a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424c:	688b      	ldr	r3, [r1, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d01b      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x46>
 8004256:	2b08      	cmp	r3, #8
 8004258:	d11b      	bne.n	8004292 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800425c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004260:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004264:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004268:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800426c:	bf1a      	itte	ne
 800426e:	480b      	ldrne	r0, [pc, #44]	@ (800429c <HAL_RCC_GetSysClockFreq+0x54>)
 8004270:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	480b      	ldreq	r0, [pc, #44]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8004274:	fba1 0100 	umull	r0, r1, r1, r0
 8004278:	f7fc fc9c 	bl	8000bb4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800427c:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x50>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004284:	3301      	adds	r3, #1
 8004286:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004288:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800428c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800428e:	4803      	ldr	r0, [pc, #12]	@ (800429c <HAL_RCC_GetSysClockFreq+0x54>)
 8004290:	e7fc      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8004292:	4803      	ldr	r0, [pc, #12]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004294:	e7fa      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x44>
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	017d7840 	.word	0x017d7840
 80042a0:	00f42400 	.word	0x00f42400

080042a4 <HAL_RCC_ClockConfig>:
{
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80042aa:	4604      	mov	r4, r0
 80042ac:	b910      	cbnz	r0, 80042b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
}
 80042b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4a45      	ldr	r2, [pc, #276]	@ (80043cc <HAL_RCC_ClockConfig+0x128>)
 80042b6:	6813      	ldr	r3, [r2, #0]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	428b      	cmp	r3, r1
 80042be:	d328      	bcc.n	8004312 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	078f      	lsls	r7, r1, #30
 80042c4:	d430      	bmi.n	8004328 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c6:	07c8      	lsls	r0, r1, #31
 80042c8:	d443      	bmi.n	8004352 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ca:	4a40      	ldr	r2, [pc, #256]	@ (80043cc <HAL_RCC_ClockConfig+0x128>)
 80042cc:	6813      	ldr	r3, [r2, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	42ab      	cmp	r3, r5
 80042d4:	d866      	bhi.n	80043a4 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	0751      	lsls	r1, r2, #29
 80042da:	d46f      	bmi.n	80043bc <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042dc:	0713      	lsls	r3, r2, #28
 80042de:	d507      	bpl.n	80042f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e0:	4a3b      	ldr	r2, [pc, #236]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
 80042e2:	6921      	ldr	r1, [r4, #16]
 80042e4:	6893      	ldr	r3, [r2, #8]
 80042e6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80042ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f0:	f7ff ffaa 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80042f4:	4b36      	ldr	r3, [pc, #216]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
 80042f6:	4a37      	ldr	r2, [pc, #220]	@ (80043d4 <HAL_RCC_ClockConfig+0x130>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	40d8      	lsrs	r0, r3
 8004302:	4b35      	ldr	r3, [pc, #212]	@ (80043d8 <HAL_RCC_ClockConfig+0x134>)
 8004304:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004306:	4b35      	ldr	r3, [pc, #212]	@ (80043dc <HAL_RCC_ClockConfig+0x138>)
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	f7fe fbdb 	bl	8002ac4 <HAL_InitTick>
  return HAL_OK;
 800430e:	2000      	movs	r0, #0
 8004310:	e7ce      	b.n	80042b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	f023 030f 	bic.w	r3, r3, #15
 8004318:	430b      	orrs	r3, r1
 800431a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	428b      	cmp	r3, r1
 8004324:	d1c3      	bne.n	80042ae <HAL_RCC_ClockConfig+0xa>
 8004326:	e7cb      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	f011 0f04 	tst.w	r1, #4
 800432c:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
 800432e:	d003      	beq.n	8004338 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004336:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	070e      	lsls	r6, r1, #28
 800433a:	d503      	bpl.n	8004344 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004342:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	68a0      	ldr	r0, [r4, #8]
 8004348:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800434c:	4302      	orrs	r2, r0
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	e7b9      	b.n	80042c6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004352:	6861      	ldr	r1, [r4, #4]
 8004354:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
 8004356:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004358:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435a:	d11b      	bne.n	8004394 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	d0a5      	beq.n	80042ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004368:	4f19      	ldr	r7, [pc, #100]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436a:	f022 0203 	bic.w	r2, r2, #3
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004372:	f7fe fbeb 	bl	8002b4c <HAL_GetTick>
 8004376:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6862      	ldr	r2, [r4, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004384:	d0a1      	beq.n	80042ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004386:	f7fe fbe1 	bl	8002b4c <HAL_GetTick>
 800438a:	1b80      	subs	r0, r0, r6
 800438c:	4540      	cmp	r0, r8
 800438e:	d9f3      	bls.n	8004378 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004390:	2003      	movs	r0, #3
 8004392:	e78d      	b.n	80042b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004394:	2902      	cmp	r1, #2
 8004396:	d102      	bne.n	800439e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004398:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800439c:	e7e0      	b.n	8004360 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439e:	f012 0f02 	tst.w	r2, #2
 80043a2:	e7dd      	b.n	8004360 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a4:	6813      	ldr	r3, [r2, #0]
 80043a6:	f023 030f 	bic.w	r3, r3, #15
 80043aa:	432b      	orrs	r3, r5
 80043ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	42ab      	cmp	r3, r5
 80043b6:	f47f af7a 	bne.w	80042ae <HAL_RCC_ClockConfig+0xa>
 80043ba:	e78c      	b.n	80042d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4904      	ldr	r1, [pc, #16]	@ (80043d0 <HAL_RCC_ClockConfig+0x12c>)
 80043be:	68e0      	ldr	r0, [r4, #12]
 80043c0:	688b      	ldr	r3, [r1, #8]
 80043c2:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80043c6:	4303      	orrs	r3, r0
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	e787      	b.n	80042dc <HAL_RCC_ClockConfig+0x38>
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800aa1c 	.word	0x0800aa1c
 80043d8:	20000078 	.word	0x20000078
 80043dc:	20000080 	.word	0x20000080

080043e0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043e0:	6803      	ldr	r3, [r0, #0]
{
 80043e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043e6:	f013 0601 	ands.w	r6, r3, #1
{
 80043ea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043ec:	d00b      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043ee:	4aad      	ldr	r2, [pc, #692]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f0:	6891      	ldr	r1, [r2, #8]
 80043f2:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 80043f6:	6091      	str	r1, [r2, #8]
 80043f8:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80043fa:	6891      	ldr	r1, [r2, #8]
 80043fc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043fe:	fab6 f686 	clz	r6, r6
 8004402:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004404:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004406:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 800440a:	d012      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800440c:	49a5      	ldr	r1, [pc, #660]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800440e:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8004410:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004414:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004418:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 800441c:	bf08      	it	eq
 800441e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004424:	bf16      	itet	ne
 8004426:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800442a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800442c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442e:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004432:	02d8      	lsls	r0, r3, #11
 8004434:	d510      	bpl.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004436:	489b      	ldr	r0, [pc, #620]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004438:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800443a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800443e:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004442:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8004446:	ea42 0201 	orr.w	r2, r2, r1
 800444a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800444e:	f000 8186 	beq.w	800475e <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004452:	2900      	cmp	r1, #0
 8004454:	bf08      	it	eq
 8004456:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004458:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 800445c:	bf18      	it	ne
 800445e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004460:	0699      	lsls	r1, r3, #26
 8004462:	d532      	bpl.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b8f      	ldr	r3, [pc, #572]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004466:	4f90      	ldr	r7, [pc, #576]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800446a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004480:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004482:	f7fe fb63 	bl	8002b4c <HAL_GetTick>
 8004486:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	05da      	lsls	r2, r3, #23
 800448c:	f140 8169 	bpl.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004490:	4f84      	ldr	r7, [pc, #528]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004492:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004496:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800449a:	f040 816d 	bne.w	8004778 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80044a0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80044a4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 80044a8:	4a7e      	ldr	r2, [pc, #504]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044aa:	f040 818a 	bne.w	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80044ae:	6891      	ldr	r1, [r2, #8]
 80044b0:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 80044b4:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80044b8:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80044bc:	4301      	orrs	r1, r0
 80044be:	6091      	str	r1, [r2, #8]
 80044c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	06d9      	lsls	r1, r3, #27
 80044ce:	d50c      	bpl.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d0:	4a74      	ldr	r2, [pc, #464]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d2:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80044d6:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80044da:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80044de:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 80044e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80044e4:	4301      	orrs	r1, r0
 80044e6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	045a      	lsls	r2, r3, #17
 80044ec:	d508      	bpl.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ee:	496d      	ldr	r1, [pc, #436]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80044f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80044f6:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80044fa:	4302      	orrs	r2, r0
 80044fc:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004500:	041f      	lsls	r7, r3, #16
 8004502:	d508      	bpl.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004504:	4967      	ldr	r1, [pc, #412]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004506:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8004508:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800450c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8004510:	4302      	orrs	r2, r0
 8004512:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004516:	03d8      	lsls	r0, r3, #15
 8004518:	d508      	bpl.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800451a:	4962      	ldr	r1, [pc, #392]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800451c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800451e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004522:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004526:	4302      	orrs	r2, r0
 8004528:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800452c:	0399      	lsls	r1, r3, #14
 800452e:	d508      	bpl.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004530:	495c      	ldr	r1, [pc, #368]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004532:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004534:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004538:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800453c:	4302      	orrs	r2, r0
 800453e:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004542:	065a      	lsls	r2, r3, #25
 8004544:	d508      	bpl.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004546:	4957      	ldr	r1, [pc, #348]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004548:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800454a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800454e:	f022 0203 	bic.w	r2, r2, #3
 8004552:	4302      	orrs	r2, r0
 8004554:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004558:	061f      	lsls	r7, r3, #24
 800455a:	d508      	bpl.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800455c:	4951      	ldr	r1, [pc, #324]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800455e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004560:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004564:	f022 020c 	bic.w	r2, r2, #12
 8004568:	4302      	orrs	r2, r0
 800456a:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800456e:	05d8      	lsls	r0, r3, #23
 8004570:	d508      	bpl.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004572:	494c      	ldr	r1, [pc, #304]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004574:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004576:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800457a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800457e:	4302      	orrs	r2, r0
 8004580:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004584:	0599      	lsls	r1, r3, #22
 8004586:	d508      	bpl.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004588:	4946      	ldr	r1, [pc, #280]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800458a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800458c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004590:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004594:	4302      	orrs	r2, r0
 8004596:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800459a:	055a      	lsls	r2, r3, #21
 800459c:	d508      	bpl.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800459e:	4941      	ldr	r1, [pc, #260]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80045a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80045aa:	4302      	orrs	r2, r0
 80045ac:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045b0:	051f      	lsls	r7, r3, #20
 80045b2:	d508      	bpl.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045b4:	493b      	ldr	r1, [pc, #236]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80045c0:	4302      	orrs	r2, r0
 80045c2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045c6:	04d8      	lsls	r0, r3, #19
 80045c8:	d508      	bpl.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045ca:	4936      	ldr	r1, [pc, #216]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045cc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80045ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045d2:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80045d6:	4302      	orrs	r2, r0
 80045d8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045dc:	0499      	lsls	r1, r3, #18
 80045de:	d508      	bpl.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045e0:	4930      	ldr	r1, [pc, #192]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80045e4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045e8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80045ec:	4302      	orrs	r2, r0
 80045ee:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045f2:	025a      	lsls	r2, r3, #9
 80045f4:	d508      	bpl.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f6:	492b      	ldr	r1, [pc, #172]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045f8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80045fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80045fe:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004602:	4302      	orrs	r2, r0
 8004604:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004608:	029f      	lsls	r7, r3, #10
 800460a:	d50c      	bpl.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800460c:	4825      	ldr	r0, [pc, #148]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800460e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004610:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004614:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004618:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 800461c:	bf08      	it	eq
 800461e:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004620:	430a      	orrs	r2, r1
 8004622:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004626:	f013 0f08 	tst.w	r3, #8
 800462a:	bf18      	it	ne
 800462c:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800462e:	0358      	lsls	r0, r3, #13
 8004630:	d508      	bpl.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004632:	491c      	ldr	r1, [pc, #112]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004634:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004636:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800463a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800463e:	4302      	orrs	r2, r0
 8004640:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004644:	0219      	lsls	r1, r3, #8
 8004646:	d509      	bpl.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004648:	4916      	ldr	r1, [pc, #88]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800464a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800464e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8004652:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004656:	4302      	orrs	r2, r0
 8004658:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800465c:	2e01      	cmp	r6, #1
 800465e:	f000 80b4 	beq.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004662:	019a      	lsls	r2, r3, #6
 8004664:	f100 80b1 	bmi.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004668:	2d01      	cmp	r5, #1
 800466a:	d176      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800466c:	4d0d      	ldr	r5, [pc, #52]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800466e:	682b      	ldr	r3, [r5, #0]
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004674:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fe fa69 	bl	8002b4c <HAL_GetTick>
 800467a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	009f      	lsls	r7, r3, #2
 8004680:	f100 8127 	bmi.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004684:	6821      	ldr	r1, [r4, #0]
 8004686:	030e      	lsls	r6, r1, #12
 8004688:	d501      	bpl.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800468a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800468c:	b11b      	cbz	r3, 8004696 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800468e:	02cd      	lsls	r5, r1, #11
 8004690:	d523      	bpl.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004692:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004694:	bb0b      	cbnz	r3, 80046da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004696:	4a03      	ldr	r2, [pc, #12]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004698:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800469c:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 80046a0:	e004      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80046ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80046b4:	4303      	orrs	r3, r0
 80046b6:	6960      	ldr	r0, [r4, #20]
 80046b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80046bc:	69a0      	ldr	r0, [r4, #24]
 80046be:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80046c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80046ca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80046cc:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80046d0:	3801      	subs	r0, #1
 80046d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80046d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046da:	0288      	lsls	r0, r1, #10
 80046dc:	d515      	bpl.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80046de:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80046e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e4:	d111      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046e6:	4a82      	ldr	r2, [pc, #520]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80046e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046ec:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046f0:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 80046f4:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80046f8:	4303      	orrs	r3, r0
 80046fa:	6960      	ldr	r0, [r4, #20]
 80046fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004700:	6a20      	ldr	r0, [r4, #32]
 8004702:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004706:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800470a:	070a      	lsls	r2, r1, #28
 800470c:	d519      	bpl.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800470e:	4a78      	ldr	r2, [pc, #480]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004710:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004714:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004718:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800471c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004720:	430b      	orrs	r3, r1
 8004722:	6961      	ldr	r1, [r4, #20]
 8004724:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004728:	69e1      	ldr	r1, [r4, #28]
 800472a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800472e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004732:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004736:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004738:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800473c:	430b      	orrs	r3, r1
 800473e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004742:	4c6b      	ldr	r4, [pc, #428]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fe f9fe 	bl	8002b4c <HAL_GetTick>
 8004750:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f140 80c3 	bpl.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800475a:	2000      	movs	r0, #0
 800475c:	e009      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 800475e:	2601      	movs	r6, #1
 8004760:	e67a      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004762:	f7fe f9f3 	bl	8002b4c <HAL_GetTick>
 8004766:	eba0 0008 	sub.w	r0, r0, r8
 800476a:	2864      	cmp	r0, #100	@ 0x64
 800476c:	f67f ae8c 	bls.w	8004488 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004770:	2003      	movs	r0, #3
}
 8004772:	b003      	add	sp, #12
 8004774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004778:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800477c:	4293      	cmp	r3, r2
 800477e:	f43f ae8e 	beq.w	800449e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004782:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004784:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800478a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800478e:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004790:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004792:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004796:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8004798:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800479a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800479c:	07db      	lsls	r3, r3, #31
 800479e:	f57f ae7e 	bpl.w	800449e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 80047a2:	f7fe f9d3 	bl	8002b4c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80047aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047ae:	0798      	lsls	r0, r3, #30
 80047b0:	f53f ae75 	bmi.w	800449e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fe f9ca 	bl	8002b4c <HAL_GetTick>
 80047b8:	eba0 0008 	sub.w	r0, r0, r8
 80047bc:	4548      	cmp	r0, r9
 80047be:	d9f5      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80047c0:	e7d6      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c2:	6891      	ldr	r1, [r2, #8]
 80047c4:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80047c8:	e679      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 80047ca:	4e49      	ldr	r6, [pc, #292]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80047cc:	6833      	ldr	r3, [r6, #0]
 80047ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047d2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80047d4:	f7fe f9ba 	bl	8002b4c <HAL_GetTick>
 80047d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047da:	6833      	ldr	r3, [r6, #0]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	d472      	bmi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	07d7      	lsls	r7, r2, #31
 80047e4:	d512      	bpl.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80047e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047e8:	b983      	cbnz	r3, 800480c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047ea:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047ee:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047f6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6861      	ldr	r1, [r4, #4]
 80047fe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004802:	68a1      	ldr	r1, [r4, #8]
 8004804:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004808:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800480c:	0316      	lsls	r6, r2, #12
 800480e:	d503      	bpl.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8004810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004816:	d005      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004818:	02d0      	lsls	r0, r2, #11
 800481a:	d51e      	bpl.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800481c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800481e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004822:	d11a      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004824:	4932      	ldr	r1, [pc, #200]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004826:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800482a:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800482e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004832:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004836:	4303      	orrs	r3, r0
 8004838:	6860      	ldr	r0, [r4, #4]
 800483a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800483e:	68e0      	ldr	r0, [r4, #12]
 8004840:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004844:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004848:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800484c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800484e:	f020 001f 	bic.w	r0, r0, #31
 8004852:	3b01      	subs	r3, #1
 8004854:	4303      	orrs	r3, r0
 8004856:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800485a:	01d1      	lsls	r1, r2, #7
 800485c:	d511      	bpl.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800485e:	4924      	ldr	r1, [pc, #144]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8004860:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004864:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004868:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800486c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8004870:	4303      	orrs	r3, r0
 8004872:	6860      	ldr	r0, [r4, #4]
 8004874:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004878:	6920      	ldr	r0, [r4, #16]
 800487a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800487e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004882:	0192      	lsls	r2, r2, #6
 8004884:	d50d      	bpl.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004890:	68e2      	ldr	r2, [r4, #12]
 8004892:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004896:	68a2      	ldr	r2, [r4, #8]
 8004898:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800489c:	4a14      	ldr	r2, [pc, #80]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800489e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80048a2:	4e13      	ldr	r6, [pc, #76]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048aa:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80048ac:	f7fe f94e 	bl	8002b4c <HAL_GetTick>
 80048b0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048b2:	6833      	ldr	r3, [r6, #0]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	f53f aed7 	bmi.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048ba:	f7fe f947 	bl	8002b4c <HAL_GetTick>
 80048be:	1bc0      	subs	r0, r0, r7
 80048c0:	2864      	cmp	r0, #100	@ 0x64
 80048c2:	d9f6      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80048c4:	e754      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c6:	f7fe f941 	bl	8002b4c <HAL_GetTick>
 80048ca:	1bc0      	subs	r0, r0, r7
 80048cc:	2864      	cmp	r0, #100	@ 0x64
 80048ce:	d984      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80048d0:	e74e      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048d2:	f7fe f93b 	bl	8002b4c <HAL_GetTick>
 80048d6:	1b80      	subs	r0, r0, r6
 80048d8:	2864      	cmp	r0, #100	@ 0x64
 80048da:	f67f aecf 	bls.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 80048de:	e747      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048e0:	f7fe f934 	bl	8002b4c <HAL_GetTick>
 80048e4:	1b40      	subs	r0, r0, r5
 80048e6:	2864      	cmp	r0, #100	@ 0x64
 80048e8:	f67f af33 	bls.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80048ec:	e740      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x390>
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800

080048f4 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80048f4:	4b53      	ldr	r3, [pc, #332]	@ (8004a44 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 80048f6:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80048f8:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 80048fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80048fe:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004902:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004904:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004908:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800490c:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800490e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004912:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8004916:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004918:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800491c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004920:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8004922:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004926:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800492a:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800492c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004930:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004934:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004936:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800493a:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800493e:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004940:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004944:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8004948:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800494a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800494e:	f002 021f 	and.w	r2, r2, #31
 8004952:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8004954:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004958:	f3c2 2204 	ubfx	r2, r2, #8, #5
 800495c:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800495e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004962:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8004966:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8004968:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800496c:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 8004970:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8004972:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004976:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 800497a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8004982:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8004984:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004988:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 800498c:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800498e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004992:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 8004996:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8004998:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800499c:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80049a0:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80049a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049a6:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80049aa:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80049ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049b0:	f002 0203 	and.w	r2, r2, #3
 80049b4:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80049b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049ba:	f002 020c 	and.w	r2, r2, #12
 80049be:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80049c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049c4:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80049c8:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80049ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049ce:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 80049d2:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80049d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049d8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80049dc:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80049de:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049e2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80049e6:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80049e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049ec:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 80049f0:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80049f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80049f6:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 80049fa:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80049fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004a00:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8004a04:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8004a06:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004a0a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8004a0e:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8004a10:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004a14:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004a18:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004a1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004a1e:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8004a22:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004a26:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004a2a:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004a2e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8004a32:	430a      	orrs	r2, r1
 8004a34:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8004a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a3e:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	00fffff1 	.word	0x00fffff1
 8004a48:	40023800 	.word	0x40023800

08004a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a4c:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8004a50:	d140      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004a52:	4b2e      	ldr	r3, [pc, #184]	@ (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004a54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004a58:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 8004a5c:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8004a60:	d046      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004a62:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8004a66:	d04c      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	d14c      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	bf08      	it	eq
 8004a76:	4b26      	ldreq	r3, [pc, #152]	@ (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004a78:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004a7c:	bf18      	it	ne
 8004a7e:	4b25      	ldrne	r3, [pc, #148]	@ (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004a80:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004a84:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004a86:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004a8a:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8004a8e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004a92:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004a94:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004a98:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004a9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004aa0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8004aa4:	e012      	b.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004aa8:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004aac:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004aae:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004ab2:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8004ab6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8004aba:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004abc:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004ac0:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004ac4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8004ace:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004ad2:	4770      	bx	lr
 8004ad4:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8004ad8:	d115      	bne.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 8004ada:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004adc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004ae0:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 8004ae4:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8004ae8:	d002      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004aea:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004aee:	e7ba      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004afc:	d1d3      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004afe:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004b00:	e7d2      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b02:	4805      	ldr	r0, [pc, #20]	@ (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004b04:	4770      	bx	lr
    switch (saiclocksource)
 8004b06:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	017d7840 	.word	0x017d7840
 8004b18:	00bb8000 	.word	0x00bb8000

08004b1c <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004b1c:	2901      	cmp	r1, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b1e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b20:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004b22:	bf0c      	ite	eq
 8004b24:	2309      	moveq	r3, #9
 8004b26:	2301      	movne	r3, #1
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b28:	2908      	cmp	r1, #8
 8004b2a:	d105      	bne.n	8004b38 <SAI_InterruptFlag+0x1c>
 8004b2c:	f022 0102 	bic.w	r1, r2, #2
 8004b30:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8004b32:	bf08      	it	eq
 8004b34:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b38:	3a02      	subs	r2, #2
 8004b3a:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004b3c:	bf94      	ite	ls
 8004b3e:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004b42:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8004b46:	4770      	bx	lr

08004b48 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004b48:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <SAI_Disable.isra.0+0x34>)
 8004b4a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004b54:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004b56:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004b58:	6811      	ldr	r1, [r2, #0]
 8004b5a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004b5e:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004b60:	3b01      	subs	r3, #1
 8004b62:	d206      	bcs.n	8004b72 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004b64:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8004b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b6c:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
      break;
 8004b70:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004b72:	6811      	ldr	r1, [r2, #0]
 8004b74:	03c9      	lsls	r1, r1, #15
 8004b76:	d4f3      	bmi.n	8004b60 <SAI_Disable.isra.0+0x18>

  return status;
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000078 	.word	0x20000078

08004b80 <HAL_SAI_MspInit>:
}
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_SAI_Init>:
{
 8004b84:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8004b86:	4604      	mov	r4, r0
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f000 80c8 	beq.w	8004d1e <HAL_SAI_Init+0x19a>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004b8e:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 8004b92:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004b96:	b91b      	cbnz	r3, 8004ba0 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8004b98:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 8004b9c:	f7ff fff0 	bl	8004b80 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ba0:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8004ba2:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8004ba4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 8004ba8:	f7ff ffce 	bl	8004b48 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 8004bac:	68e3      	ldr	r3, [r4, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	f000 80a5 	beq.w	8004cfe <HAL_SAI_Init+0x17a>
 8004bb4:	1e98      	subs	r0, r3, #2
 8004bb6:	4243      	negs	r3, r0
 8004bb8:	4143      	adcs	r3, r0
 8004bba:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 8004bbc:	68a5      	ldr	r5, [r4, #8]
 8004bbe:	2d02      	cmp	r5, #2
 8004bc0:	f000 80a1 	beq.w	8004d06 <HAL_SAI_Init+0x182>
 8004bc4:	2d03      	cmp	r5, #3
 8004bc6:	f000 809c 	beq.w	8004d02 <HAL_SAI_Init+0x17e>
 8004bca:	1e69      	subs	r1, r5, #1
 8004bcc:	424d      	negs	r5, r1
 8004bce:	414d      	adcs	r5, r1
 8004bd0:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bd2:	6822      	ldr	r2, [r4, #0]
 8004bd4:	4953      	ldr	r1, [pc, #332]	@ (8004d24 <HAL_SAI_Init+0x1a0>)
 8004bd6:	4854      	ldr	r0, [pc, #336]	@ (8004d28 <HAL_SAI_Init+0x1a4>)
 8004bd8:	428a      	cmp	r2, r1
 8004bda:	d003      	beq.n	8004be4 <HAL_SAI_Init+0x60>
 8004bdc:	4e53      	ldr	r6, [pc, #332]	@ (8004d2c <HAL_SAI_Init+0x1a8>)
 8004bde:	42b2      	cmp	r2, r6
 8004be0:	f040 8094 	bne.w	8004d0c <HAL_SAI_Init+0x188>
    SAI1->GCR = tmpregisterGCR;
 8004be4:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004be8:	69e3      	ldr	r3, [r4, #28]
 8004bea:	b33b      	cbz	r3, 8004c3c <HAL_SAI_Init+0xb8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004bec:	428a      	cmp	r2, r1
 8004bee:	d003      	beq.n	8004bf8 <HAL_SAI_Init+0x74>
 8004bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8004d2c <HAL_SAI_Init+0x1a8>)
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f040 808d 	bne.w	8004d12 <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004bf8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004bfc:	f7ff ff26 	bl	8004a4c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	4a4b      	ldr	r2, [pc, #300]	@ (8004d30 <HAL_SAI_Init+0x1ac>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d002      	beq.n	8004c0e <HAL_SAI_Init+0x8a>
 8004c08:	3220      	adds	r2, #32
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d103      	bne.n	8004c16 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004c0e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004c12:	f7ff ff1b 	bl	8004a4c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004c16:	220a      	movs	r2, #10
 8004c18:	69e3      	ldr	r3, [r4, #28]
 8004c1a:	4350      	muls	r0, r2
 8004c1c:	025b      	lsls	r3, r3, #9
 8004c1e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8004c22:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 8004c26:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c2a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    if ((tmpval % 10) > 8)
 8004c2c:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8004c2e:	bf08      	it	eq
 8004c30:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004c32:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10;
 8004c34:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004c36:	bf04      	itt	eq
 8004c38:	085b      	lsreq	r3, r3, #1
 8004c3a:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c3c:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004c3e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004c40:	f033 0202 	bics.w	r2, r3, #2
 8004c44:	d167      	bne.n	8004d16 <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004c46:	3901      	subs	r1, #1
 8004c48:	bf18      	it	ne
 8004c4a:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c4c:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004c4e:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c50:	4838      	ldr	r0, [pc, #224]	@ (8004d34 <HAL_SAI_Init+0x1b0>)
 8004c52:	6816      	ldr	r6, [r2, #0]
 8004c54:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c56:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8004c58:	4333      	orrs	r3, r6
 8004c5a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004c5c:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c5e:	4333      	orrs	r3, r6
 8004c60:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004c62:	6810      	ldr	r0, [r2, #0]
 8004c64:	4333      	orrs	r3, r6
 8004c66:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004c68:	4333      	orrs	r3, r6
 8004c6a:	6926      	ldr	r6, [r4, #16]
 8004c6c:	4333      	orrs	r3, r6
 8004c6e:	6966      	ldr	r6, [r4, #20]
 8004c70:	4333      	orrs	r3, r6
 8004c72:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004c74:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c76:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c7a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004c7c:	432b      	orrs	r3, r5
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004c82:	6853      	ldr	r3, [r2, #4]
 8004c84:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c88:	f023 030f 	bic.w	r3, r3, #15
 8004c8c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c8e:	69a3      	ldr	r3, [r4, #24]
 8004c90:	6851      	ldr	r1, [r2, #4]
 8004c92:	4303      	orrs	r3, r0
 8004c94:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004c96:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004c98:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c9e:	4b26      	ldr	r3, [pc, #152]	@ (8004d38 <HAL_SAI_Init+0x1b4>)
 8004ca0:	6891      	ldr	r1, [r2, #8]
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ca6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004ca8:	6891      	ldr	r1, [r2, #8]
 8004caa:	4303      	orrs	r3, r0
 8004cac:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004cae:	4303      	orrs	r3, r0
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004cb4:	3901      	subs	r1, #1
 8004cb6:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004cb8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004cba:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004cbc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cc0:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004cc2:	68d3      	ldr	r3, [r2, #12]
 8004cc4:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8004cc8:	f023 030f 	bic.w	r3, r3, #15
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	0c1b      	lsrs	r3, r3, #16
 8004cd0:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004cd2:	68d1      	ldr	r1, [r2, #12]
 8004cd4:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 8004cd8:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cda:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004cdc:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004cde:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004ce4:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004ce6:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004ce8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cec:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8004cee:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004cf0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8004cf4:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8004cf8:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8004cfe:	2310      	movs	r3, #16
 8004d00:	e75c      	b.n	8004bbc <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004d02:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004d06:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8004d0a:	e762      	b.n	8004bd2 <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 8004d0c:	f8c0 3c00 	str.w	r3, [r0, #3072]	@ 0xc00
 8004d10:	e76a      	b.n	8004be8 <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 8004d12:	2000      	movs	r0, #0
 8004d14:	e774      	b.n	8004c00 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004d16:	1e4a      	subs	r2, r1, #1
 8004d18:	4251      	negs	r1, r2
 8004d1a:	4151      	adcs	r1, r2
 8004d1c:	e796      	b.n	8004c4c <HAL_SAI_Init+0xc8>
    return HAL_ERROR;
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e7ec      	b.n	8004cfc <HAL_SAI_Init+0x178>
 8004d22:	bf00      	nop
 8004d24:	40015804 	.word	0x40015804
 8004d28:	40015000 	.word	0x40015000
 8004d2c:	40015824 	.word	0x40015824
 8004d30:	40015c04 	.word	0x40015c04
 8004d34:	ff05c010 	.word	0xff05c010
 8004d38:	fff88000 	.word	0xfff88000

08004d3c <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 8004d3c:	4770      	bx	lr

08004d3e <HAL_SAI_DeInit>:
{
 8004d3e:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8004d40:	4605      	mov	r5, r0
 8004d42:	b1c0      	cbz	r0, 8004d76 <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 8004d44:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8004d46:	6806      	ldr	r6, [r0, #0]
 8004d48:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 8004d4a:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 8004d52:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d54:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
 8004d56:	f7ff fef7 	bl	8004b48 <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d5a:	6873      	ldr	r3, [r6, #4]
 8004d5c:	f043 0308 	orr.w	r3, r3, #8
 8004d60:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
 8004d62:	f7ff ffeb 	bl	8004d3c <HAL_SAI_MspDeInit>
  return HAL_OK;
 8004d66:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d68:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8004d6c:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 8004d70:	f885 407d 	strb.w	r4, [r5, #125]	@ 0x7d
}
 8004d74:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
 8004d78:	e7fc      	b.n	8004d74 <HAL_SAI_DeInit+0x36>

08004d7a <HAL_SAI_DMAStop>:
{
 8004d7a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 8004d7c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 8004d80:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d040      	beq.n	8004e08 <HAL_SAI_DMAStop+0x8e>
 8004d86:	2501      	movs	r5, #1
 8004d88:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  SAI_Disable(hsai);
 8004d8c:	f7ff fedc 	bl	8004b48 <SAI_Disable.isra.0>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d90:	6802      	ldr	r2, [r0, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004d92:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d9a:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004d9c:	bb08      	cbnz	r0, 8004de2 <HAL_SAI_DMAStop+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004da0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8004da2:	b188      	cbz	r0, 8004dc8 <HAL_SAI_DMAStop+0x4e>
 8004da4:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004da8:	2b22      	cmp	r3, #34	@ 0x22
 8004daa:	d10d      	bne.n	8004dc8 <HAL_SAI_DMAStop+0x4e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004dac:	f7fe f891 	bl	8002ed2 <HAL_DMA_Abort>
 8004db0:	b150      	cbz	r0, 8004dc8 <HAL_SAI_DMAStop+0x4e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004db2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	2b80      	cmp	r3, #128	@ 0x80
 8004db8:	d006      	beq.n	8004dc8 <HAL_SAI_DMAStop+0x4e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004dba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8004dbe:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	6853      	ldr	r3, [r2, #4]
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8004dde:	4628      	mov	r0, r5
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004de2:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004de6:	2b12      	cmp	r3, #18
 8004de8:	d1d9      	bne.n	8004d9e <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004dea:	f7fe f872 	bl	8002ed2 <HAL_DMA_Abort>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0d5      	beq.n	8004d9e <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004df2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df6:	2b80      	cmp	r3, #128	@ 0x80
 8004df8:	d0d1      	beq.n	8004d9e <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004dfa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e02:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004e06:	e7cb      	b.n	8004da0 <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 8004e08:	2502      	movs	r5, #2
 8004e0a:	e7e8      	b.n	8004dde <HAL_SAI_DMAStop+0x64>

08004e0c <HAL_SAI_Transmit_DMA>:
{
 8004e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e10:	460e      	mov	r6, r1
 8004e12:	4604      	mov	r4, r0
 8004e14:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8004e16:	f7fd fe99 	bl	8002b4c <HAL_GetTick>
 8004e1a:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0))
 8004e1c:	b34e      	cbz	r6, 8004e72 <HAL_SAI_Transmit_DMA+0x66>
 8004e1e:	b345      	cbz	r5, 8004e72 <HAL_SAI_Transmit_DMA+0x66>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004e20:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	d153      	bne.n	8004ed2 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_LOCK(hsai);
 8004e2a:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d04f      	beq.n	8004ed2 <HAL_SAI_Transmit_DMA+0xc6>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e32:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004e36:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e38:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e3a:	4631      	mov	r1, r6
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004e3c:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004e40:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e44:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <HAL_SAI_Transmit_DMA+0xcc>)
    __HAL_LOCK(hsai);
 8004e46:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 8004e4a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8004e4e:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 8004e52:	6666      	str	r6, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004e54:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e56:	4b21      	ldr	r3, [pc, #132]	@ (8004edc <HAL_SAI_Transmit_DMA+0xd0>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e58:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004e5a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004e5c:	4b20      	ldr	r3, [pc, #128]	@ (8004ee0 <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e5e:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8004e60:	e9c0 3813 	strd	r3, r8, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004e64:	462b      	mov	r3, r5
 8004e66:	f7fd fff7 	bl	8002e58 <HAL_DMA_Start_IT>
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	b128      	cbz	r0, 8004e7a <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8004e6e:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8004e72:	2501      	movs	r5, #1
}
 8004e74:	4628      	mov	r0, r5
 8004e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7ff fe4d 	bl	8004b1c <SAI_InterruptFlag>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	4302      	orrs	r2, r0
 8004e88:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004e90:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	695e      	ldr	r6, [r3, #20]
 8004e96:	f416 26e0 	ands.w	r6, r6, #458752	@ 0x70000
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	03d2      	lsls	r2, r2, #15
 8004ea0:	d403      	bmi.n	8004eaa <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ea8:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8004eb0:	e7e0      	b.n	8004e74 <HAL_SAI_Transmit_DMA+0x68>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004eb2:	f7fd fe4b 	bl	8002b4c <HAL_GetTick>
 8004eb6:	1bc0      	subs	r0, r0, r7
 8004eb8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8004ebc:	d9e9      	bls.n	8004e92 <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ebe:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8004ec2:	2503      	movs	r5, #3
        __HAL_UNLOCK(hsai);
 8004ec4:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ecc:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8004ed0:	e7d0      	b.n	8004e74 <HAL_SAI_Transmit_DMA+0x68>
    __HAL_LOCK(hsai);
 8004ed2:	2502      	movs	r5, #2
 8004ed4:	e7ce      	b.n	8004e74 <HAL_SAI_Transmit_DMA+0x68>
 8004ed6:	bf00      	nop
 8004ed8:	08004fb9 	.word	0x08004fb9
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08005005 	.word	0x08005005

08004ee4 <HAL_SAI_Receive_DMA>:
{
 8004ee4:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 8004ee6:	460a      	mov	r2, r1
{
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 8004eec:	b331      	cbz	r1, 8004f3c <HAL_SAI_Receive_DMA+0x58>
 8004eee:	b32b      	cbz	r3, 8004f3c <HAL_SAI_Receive_DMA+0x58>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004ef0:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
 8004ef4:	2901      	cmp	r1, #1
 8004ef6:	b2c8      	uxtb	r0, r1
 8004ef8:	d13a      	bne.n	8004f70 <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 8004efa:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
 8004efe:	2901      	cmp	r1, #1
 8004f00:	d036      	beq.n	8004f70 <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f02:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f04:	2122      	movs	r1, #34	@ 0x22
    __HAL_LOCK(hsai);
 8004f06:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004f0a:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f0e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004f10:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f14:	4917      	ldr	r1, [pc, #92]	@ (8004f74 <HAL_SAI_Receive_DMA+0x90>)
    hsai->pBuffPtr = pData;
 8004f16:	6662      	str	r2, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 8004f18:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 8004f1c:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004f20:	6401      	str	r1, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004f22:	4915      	ldr	r1, [pc, #84]	@ (8004f78 <HAL_SAI_Receive_DMA+0x94>)
 8004f24:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004f26:	4915      	ldr	r1, [pc, #84]	@ (8004f7c <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8004f28:	e9c0 1613 	strd	r1, r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004f2c:	6821      	ldr	r1, [r4, #0]
 8004f2e:	311c      	adds	r1, #28
 8004f30:	f7fd ff92 	bl	8002e58 <HAL_DMA_Start_IT>
 8004f34:	4605      	mov	r5, r0
 8004f36:	b120      	cbz	r0, 8004f42 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 8004f38:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8004f3c:	2501      	movs	r5, #1
}
 8004f3e:	4628      	mov	r0, r5
 8004f40:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f42:	4601      	mov	r1, r0
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7ff fde9 	bl	8004b1c <SAI_InterruptFlag>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	4302      	orrs	r2, r0
 8004f50:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004f58:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	03d2      	lsls	r2, r2, #15
 8004f5e:	d403      	bmi.n	8004f68 <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f66:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8004f6e:	e7e6      	b.n	8004f3e <HAL_SAI_Receive_DMA+0x5a>
    __HAL_LOCK(hsai);
 8004f70:	2502      	movs	r5, #2
 8004f72:	e7e4      	b.n	8004f3e <HAL_SAI_Receive_DMA+0x5a>
 8004f74:	08004ffb 	.word	0x08004ffb
 8004f78:	08004fc3 	.word	0x08004fc3
 8004f7c:	08005005 	.word	0x08005005

08004f80 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004f80:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004f82:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f84:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f8a:	d011      	beq.n	8004fb0 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004f8c:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8004f8e:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f90:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004f92:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8004f94:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004f98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004f9c:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004f9e:	f7ff fdbd 	bl	8004b1c <SAI_InterruptFlag>
 8004fa2:	692b      	ldr	r3, [r5, #16]
 8004fa4:	ea23 0300 	bic.w	r3, r3, r0
 8004fa8:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f7fc fe29 	bl	8001c08 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}

08004fb8 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004fb8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004fba:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004fbc:	f7fc fe28 	bl	8001c10 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004fc0:	bd08      	pop	{r3, pc}

08004fc2 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004fc2:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004fc4:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fcc:	d011      	beq.n	8004ff2 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004fce:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8004fd0:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004fd2:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004fda:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8004fdc:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004fe0:	f7ff fd9c 	bl	8004b1c <SAI_InterruptFlag>
 8004fe4:	692b      	ldr	r3, [r5, #16]
 8004fe6:	ea23 0300 	bic.w	r3, r3, r0
 8004fea:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004fec:	2301      	movs	r3, #1
 8004fee:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	f7fc ff78 	bl	8001ee8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}

08004ffa <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004ffa:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8004ffc:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004ffe:	f7fc ff77 	bl	8001ef0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005002:	bd08      	pop	{r3, pc}

08005004 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005004:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8005006:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005008:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800500c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005010:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005014:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	2b01      	cmp	r3, #1
 800501a:	d003      	beq.n	8005024 <SAI_DMAError+0x20>
 800501c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10c      	bne.n	800503e <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005024:	6802      	ldr	r2, [r0, #0]
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800502c:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800502e:	f7ff fd8b 	bl	8004b48 <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005032:	2301      	movs	r3, #1
 8005034:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800503e:	f7fc ff5b 	bl	8001ef8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005042:	bd08      	pop	{r3, pc}

08005044 <HAL_SAI_GetState>:
  return hsai->State;
 8005044:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 8005048:	4770      	bx	lr

0800504a <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800504a:	4770      	bx	lr

0800504c <HAL_SDRAM_Init>:
{
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8005050:	4604      	mov	r4, r0
 8005052:	b1c8      	cbz	r0, 8005088 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005054:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005058:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800505c:	b91b      	cbnz	r3, 8005066 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 800505e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005062:	f7ff fff2 	bl	800504a <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005066:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005068:	1d21      	adds	r1, r4, #4
 800506a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800506c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005070:	f000 f843 	bl	80050fa <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005074:	6862      	ldr	r2, [r4, #4]
 8005076:	4629      	mov	r1, r5
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	f000 f876 	bl	800516a <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 800507e:	2301      	movs	r3, #1
  return HAL_OK;
 8005080:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005082:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8005086:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005088:	2001      	movs	r0, #1
 800508a:	e7fc      	b.n	8005086 <HAL_SDRAM_Init+0x3a>

0800508c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800508c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800508e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8005092:	4605      	mov	r5, r0
 8005094:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005096:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005098:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800509a:	d010      	beq.n	80050be <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800509c:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80050a0:	2c01      	cmp	r4, #1
 80050a2:	d110      	bne.n	80050c6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050a4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80050a6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050a8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80050ac:	f000 f893 	bl	80051d6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80050b0:	6833      	ldr	r3, [r6, #0]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d104      	bne.n	80050c0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80050b6:	2305      	movs	r3, #5
 80050b8:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050bc:	2000      	movs	r0, #0
}
 80050be:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80050c0:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 80050c4:	e7fa      	b.n	80050bc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80050c6:	2001      	movs	r0, #1
 80050c8:	e7f9      	b.n	80050be <HAL_SDRAM_SendCommand+0x32>

080050ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80050ca:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80050cc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80050d0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	b2d8      	uxtb	r0, r3
 80050d6:	d00d      	beq.n	80050f4 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80050d8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	b2dd      	uxtb	r5, r3
 80050e0:	d109      	bne.n	80050f6 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050e2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80050e4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050e6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80050ea:	f000 f886 	bl	80051fa <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050ee:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050f0:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 80050f4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80050f6:	2001      	movs	r0, #1
 80050f8:	e7fc      	b.n	80050f4 <HAL_SDRAM_ProgramRefreshRate+0x2a>

080050fa <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80050fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80050fe:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 8005102:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 8005106:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800510a:	ea43 0308 	orr.w	r3, r3, r8
 800510e:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8005112:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005116:	6809      	ldr	r1, [r1, #0]
 8005118:	b991      	cbnz	r1, 8005140 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800511a:	ea43 030e 	orr.w	r3, r3, lr
 800511e:	6801      	ldr	r1, [r0, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 8005126:	ea43 030c 	orr.w	r3, r3, ip
 800512a:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800512e:	433b      	orrs	r3, r7
 8005130:	4333      	orrs	r3, r6
 8005132:	432b      	orrs	r3, r5
 8005134:	4323      	orrs	r3, r4
 8005136:	430b      	orrs	r3, r1
 8005138:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800513a:	2000      	movs	r0, #0
 800513c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005140:	6801      	ldr	r1, [r0, #0]
 8005142:	ea43 030e 	orr.w	r3, r3, lr
 8005146:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800514a:	430b      	orrs	r3, r1
 800514c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800514e:	ea42 030c 	orr.w	r3, r2, ip
 8005152:	6841      	ldr	r1, [r0, #4]
 8005154:	433b      	orrs	r3, r7
 8005156:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800515a:	4333      	orrs	r3, r6
 800515c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8005160:	432b      	orrs	r3, r5
 8005162:	4323      	orrs	r3, r4
 8005164:	4313      	orrs	r3, r2
 8005166:	6043      	str	r3, [r0, #4]
 8005168:	e7e7      	b.n	800513a <FMC_SDRAM_Init+0x40>

0800516a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800516a:	68cb      	ldr	r3, [r1, #12]
 800516c:	f103 3cff 	add.w	ip, r3, #4294967295
 8005170:	694b      	ldr	r3, [r1, #20]
{
 8005172:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005174:	3b01      	subs	r3, #1
 8005176:	680f      	ldr	r7, [r1, #0]
 8005178:	684c      	ldr	r4, [r1, #4]
 800517a:	688e      	ldr	r6, [r1, #8]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	690d      	ldr	r5, [r1, #16]
 8005180:	3c01      	subs	r4, #1
 8005182:	6989      	ldr	r1, [r1, #24]
 8005184:	3e01      	subs	r6, #1
 8005186:	3d01      	subs	r5, #1
 8005188:	3f01      	subs	r7, #1
 800518a:	3901      	subs	r1, #1
 800518c:	0124      	lsls	r4, r4, #4
 800518e:	0236      	lsls	r6, r6, #8
 8005190:	042d      	lsls	r5, r5, #16
 8005192:	0609      	lsls	r1, r1, #24
 8005194:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8005198:	b95a      	cbnz	r2, 80051b2 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800519a:	433b      	orrs	r3, r7
 800519c:	6882      	ldr	r2, [r0, #8]
 800519e:	4323      	orrs	r3, r4
 80051a0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80051a4:	4333      	orrs	r3, r6
 80051a6:	432b      	orrs	r3, r5
 80051a8:	430b      	orrs	r3, r1
 80051aa:	4313      	orrs	r3, r2
 80051ac:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80051ae:	2000      	movs	r0, #0
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80051b2:	6882      	ldr	r2, [r0, #8]
 80051b4:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80051b8:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80051bc:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80051be:	ea44 0306 	orr.w	r3, r4, r6
 80051c2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80051c4:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80051c6:	68c2      	ldr	r2, [r0, #12]
 80051c8:	432b      	orrs	r3, r5
 80051ca:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80051ce:	430b      	orrs	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60c3      	str	r3, [r0, #12]
 80051d4:	e7eb      	b.n	80051ae <FMC_SDRAM_Timing_Init+0x44>

080051d6 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80051d6:	6902      	ldr	r2, [r0, #16]
{
 80051d8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80051da:	e9d1 3400 	ldrd	r3, r4, [r1]
 80051de:	0d92      	lsrs	r2, r2, #22
 80051e0:	4323      	orrs	r3, r4
 80051e2:	68cc      	ldr	r4, [r1, #12]
 80051e4:	0592      	lsls	r2, r2, #22
 80051e6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80051ea:	4313      	orrs	r3, r2
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	3a01      	subs	r2, #1
 80051f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80051f4:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80051f6:	2000      	movs	r0, #0
 80051f8:	bd10      	pop	{r4, pc}

080051fa <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80051fa:	6943      	ldr	r3, [r0, #20]
 80051fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005200:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005204:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8005208:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800520a:	2000      	movs	r0, #0
 800520c:	4770      	bx	lr
	...

08005210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005216:	e003      	b.n	8005220 <LoopCopyDataInit>

08005218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005218:	4b0c      	ldr	r3, [pc, #48]	@ (800524c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800521a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800521c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800521e:	3104      	adds	r1, #4

08005220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005220:	480b      	ldr	r0, [pc, #44]	@ (8005250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005228:	d3f6      	bcc.n	8005218 <CopyDataInit>
  ldr  r2, =_sbss
 800522a:	4a0b      	ldr	r2, [pc, #44]	@ (8005258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800522c:	e002      	b.n	8005234 <LoopFillZerobss>

0800522e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800522e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005230:	f842 3b04 	str.w	r3, [r2], #4

08005234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005238:	d3f9      	bcc.n	800522e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800523a:	f7fd fc1b 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800523e:	f000 fcfb 	bl	8005c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005242:	f000 fb99 	bl	8005978 <main>
  bx  lr    
 8005246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005248:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800524c:	0800ad78 	.word	0x0800ad78
  ldr  r0, =_sdata
 8005250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005254:	200001b4 	.word	0x200001b4
  ldr  r2, =_sbss
 8005258:	200001c0 	.word	0x200001c0
  ldr  r3, = _ebss
 800525c:	20021000 	.word	0x20021000

08005260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005260:	e7fe      	b.n	8005260 <ADC_IRQHandler>
	...

08005264 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8005264:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8005266:	4c07      	ldr	r4, [pc, #28]	@ (8005284 <GetData+0x20>)
 8005268:	6825      	ldr	r5, [r4, #0]
 800526a:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 800526c:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800526e:	1846      	adds	r6, r0, r1
 8005270:	42b5      	cmp	r5, r6
 8005272:	d901      	bls.n	8005278 <GetData+0x14>
 8005274:	4298      	cmp	r0, r3
 8005276:	d100      	bne.n	800527a <GetData+0x16>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }
  return ReadDataNbr;
}
 8005278:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800527a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800527e:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 8005280:	3001      	adds	r0, #1
 8005282:	e7f4      	b.n	800526e <GetData+0xa>
 8005284:	200007c0 	.word	0x200007c0

08005288 <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005288:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 800528c:	4a06      	ldr	r2, [pc, #24]	@ (80052a8 <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 800528e:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8005292:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8005296:	3020      	adds	r0, #32
    while (op_size > 0) {
 8005298:	4298      	cmp	r0, r3
 800529a:	d1fa      	bne.n	8005292 <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 800529c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80052a0:	f3bf 8f6f 	isb	sy
}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <AUDIO_Start>:
{
 80052ac:	b570      	push	{r4, r5, r6, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80052ae:	4d11      	ldr	r5, [pc, #68]	@ (80052f4 <AUDIO_Start+0x48>)
 80052b0:	2400      	movs	r4, #0
  bytesread = GetData( (void *)AudioStartAddress,
 80052b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  AudioFileSize = audio_file_size;
 80052b6:	462a      	mov	r2, r5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80052b8:	f885 4824 	strb.w	r4, [r5, #2084]	@ 0x824
  AudioStartAddress = audio_start_address;
 80052bc:	f8c5 0828 	str.w	r0, [r5, #2088]	@ 0x828
  AudioFileSize = audio_file_size;
 80052c0:	f842 1b20 	str.w	r1, [r2], #32
  bytesread = GetData( (void *)AudioStartAddress,
 80052c4:	4621      	mov	r1, r4
 80052c6:	f7ff ffcd 	bl	8005264 <GetData>
  if(bytesread > 0)
 80052ca:	4606      	mov	r6, r0
 80052cc:	b178      	cbz	r0, 80052ee <AUDIO_Start+0x42>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80052ce:	4610      	mov	r0, r2
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80052d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80052d4:	f7ff ffd8 	bl	8005288 <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80052d8:	f105 0020 	add.w	r0, r5, #32
 80052dc:	f7fc fc4a 	bl	8001b74 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 80052e0:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 80052e2:	4620      	mov	r0, r4
    buffer_ctl.fptr = bytesread;
 80052e4:	f8c5 6820 	str.w	r6, [r5, #2080]	@ 0x820
    audio_state = AUDIO_STATE_PLAYING;      
 80052e8:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
}
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_ERROR_IO;
 80052ee:	2002      	movs	r0, #2
 80052f0:	e7fc      	b.n	80052ec <AUDIO_Start+0x40>
 80052f2:	bf00      	nop
 80052f4:	200007c0 	.word	0x200007c0

080052f8 <AUDIO_Process>:
{
 80052f8:	b538      	push	{r3, r4, r5, lr}
  switch(audio_state)
 80052fa:	4c22      	ldr	r4, [pc, #136]	@ (8005384 <AUDIO_Process+0x8c>)
 80052fc:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8005300:	2b02      	cmp	r3, #2
 8005302:	d13c      	bne.n	800537e <AUDIO_Process+0x86>
    if(buffer_ctl.fptr >= AudioFileSize)
 8005304:	f8d4 2820 	ldr.w	r2, [r4, #2080]	@ 0x820
 8005308:	2500      	movs	r5, #0
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	429a      	cmp	r2, r3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 800530e:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
      buffer_ctl.fptr = 0; 
 8005312:	bf24      	itt	cs
 8005314:	f8c4 5820 	strcs.w	r5, [r4, #2080]	@ 0x820
      error_state = AUDIO_ERROR_EOF;
 8005318:	2503      	movcs	r5, #3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 800531a:	2b01      	cmp	r3, #1
 800531c:	d114      	bne.n	8005348 <AUDIO_Process+0x50>
      bytesread = GetData((void *)AudioStartAddress,
 800531e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005322:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <AUDIO_Process+0x90>)
 8005324:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 8005328:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 800532c:	f7ff ff9a 	bl	8005264 <GetData>
      if( bytesread >0)
 8005330:	b150      	cbz	r0, 8005348 <AUDIO_Process+0x50>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread; 
 8005338:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 800533c:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 800533e:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread; 
 8005340:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8005344:	f7ff ffa0 	bl	8005288 <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8005348:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
 800534c:	2b02      	cmp	r3, #2
 800534e:	d114      	bne.n	800537a <AUDIO_Process+0x82>
      bytesread = GetData((void *)AudioStartAddress,
 8005350:	4a0e      	ldr	r2, [pc, #56]	@ (800538c <AUDIO_Process+0x94>)
 8005352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005356:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 800535a:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 800535e:	f7ff ff81 	bl	8005264 <GetData>
      if( bytesread > 0)
 8005362:	b150      	cbz	r0, 800537a <AUDIO_Process+0x82>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8005364:	2300      	movs	r3, #0
 8005366:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread;
 800536a:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 800536e:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8005370:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread;
 8005372:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8005376:	f7ff ff87 	bl	8005288 <SCB_CleanDCache_by_Addr.constprop.0>
}
 800537a:	4628      	mov	r0, r5
 800537c:	bd38      	pop	{r3, r4, r5, pc}
    error_state = AUDIO_ERROR_NOTREADY;
 800537e:	2501      	movs	r5, #1
 8005380:	e7fb      	b.n	800537a <AUDIO_Process+0x82>
 8005382:	bf00      	nop
 8005384:	200007c0 	.word	0x200007c0
 8005388:	200007e0 	.word	0x200007e0
 800538c:	20000be0 	.word	0x20000be0

08005390 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8005390:	4b03      	ldr	r3, [pc, #12]	@ (80053a0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8005392:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 8005396:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8005398:	bf08      	it	eq
 800539a:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 800539e:	4770      	bx	lr
 80053a0:	200007c0 	.word	0x200007c0

080053a4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 80053a4:	4b04      	ldr	r3, [pc, #16]	@ (80053b8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 80053a6:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 80053aa:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 80053ac:	bf04      	itt	eq
 80053ae:	2201      	moveq	r2, #1
 80053b0:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	200007c0 	.word	0x200007c0

080053bc <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80053bc:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80053be:	4806      	ldr	r0, [pc, #24]	@ (80053d8 <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 80053c0:	f7fc ff32 	bl	8002228 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 80053c4:	200e      	movs	r0, #14
 80053c6:	4905      	ldr	r1, [pc, #20]	@ (80053dc <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 80053c8:	f7fd f8b6 	bl	8002538 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80053cc:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80053ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80053d2:	f7fc baf3 	b.w	80019bc <BSP_PB_GetState>
 80053d6:	bf00      	nop
 80053d8:	ffff0000 	.word	0xffff0000
 80053dc:	0800aa64 	.word	0x0800aa64

080053e0 <Setup>:

  Start_Audio();
}


void Setup (void) {
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

static void AudioRec_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80053e2:	f04f 30ff 	mov.w	r0, #4294967295
 80053e6:	f7fc ff43 	bl	8002270 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80053ea:	486f      	ldr	r0, [pc, #444]	@ (80055a8 <Setup+0x1c8>)
 80053ec:	f7fc ff10 	bl	8002210 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 80053f0:	f7fc feb4 	bl	800215c <BSP_LCD_GetXSize>
 80053f4:	2100      	movs	r1, #0
 80053f6:	b282      	uxth	r2, r0
 80053f8:	235a      	movs	r3, #90	@ 0x5a
 80053fa:	4608      	mov	r0, r1
 80053fc:	f7fd f8ac 	bl	8002558 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005400:	f04f 30ff 	mov.w	r0, #4294967295
 8005404:	f7fc ff04 	bl	8002210 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8005408:	4867      	ldr	r0, [pc, #412]	@ (80055a8 <Setup+0x1c8>)
 800540a:	f7fc ff0d 	bl	8002228 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800540e:	4867      	ldr	r0, [pc, #412]	@ (80055ac <Setup+0x1cc>)
 8005410:	f7fc ff16 	bl	8002240 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD", CENTER_MODE);
 8005414:	2100      	movs	r1, #0
 8005416:	2301      	movs	r3, #1
 8005418:	4a65      	ldr	r2, [pc, #404]	@ (80055b0 <Setup+0x1d0>)
 800541a:	4608      	mov	r0, r1
 800541c:	f7fd f838 	bl	8002490 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8005420:	4864      	ldr	r0, [pc, #400]	@ (80055b4 <Setup+0x1d4>)
 8005422:	f7fc ff0d 	bl	8002240 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next effect", CENTER_MODE);
 8005426:	2301      	movs	r3, #1
 8005428:	4a63      	ldr	r2, [pc, #396]	@ (80055b8 <Setup+0x1d8>)
 800542a:	211e      	movs	r1, #30
 800542c:	2000      	movs	r0, #0
 800542e:	f7fd f82f 	bl	8002490 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8005432:	f46f 407f 	mvn.w	r0, #65280	@ 0xff00
 8005436:	f7fc feeb 	bl	8002210 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 800543a:	f7fc fe8f 	bl	800215c <BSP_LCD_GetXSize>
 800543e:	4604      	mov	r4, r0
 8005440:	f7fc fe98 	bl	8002174 <BSP_LCD_GetYSize>
 8005444:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 8005448:	f1a4 0214 	sub.w	r2, r4, #20
 800544c:	2164      	movs	r1, #100	@ 0x64
 800544e:	b29b      	uxth	r3, r3
 8005450:	200a      	movs	r0, #10
 8005452:	b292      	uxth	r2, r2
 8005454:	f7fc ff86 	bl	8002364 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8005458:	f7fc fe80 	bl	800215c <BSP_LCD_GetXSize>
 800545c:	4604      	mov	r4, r0
 800545e:	f7fc fe89 	bl	8002174 <BSP_LCD_GetYSize>
 8005462:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 8005466:	f1a4 0216 	sub.w	r2, r4, #22
 800546a:	2165      	movs	r1, #101	@ 0x65
 800546c:	b29b      	uxth	r3, r3
 800546e:	200b      	movs	r0, #11
 8005470:	b292      	uxth	r2, r2
 8005472:	f7fc ff77 	bl	8002364 <BSP_LCD_DrawRect>
	  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8005476:	2202      	movs	r2, #2
 8005478:	2110      	movs	r1, #16
 800547a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800547e:	f7fc fe29 	bl	80020d4 <BSP_AUDIO_IN_Init>
 8005482:	4604      	mov	r4, r0
	    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
	  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8005488:	2c00      	cmp	r4, #0
 800548a:	d169      	bne.n	8005560 <Setup+0x180>
	    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800548c:	f7fc fecc 	bl	8002228 <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8005490:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8005494:	f7fc febc 	bl	8002210 <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8005498:	f7fc fe6c 	bl	8002174 <BSP_LCD_GetYSize>
 800549c:	2301      	movs	r3, #1
 800549e:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 80054a2:	4a46      	ldr	r2, [pc, #280]	@ (80055bc <Setup+0x1dc>)
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80054a4:	b289      	uxth	r1, r1
	  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80054a6:	2400      	movs	r4, #0
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80054a8:	2000      	movs	r0, #0
	  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80054aa:	4d45      	ldr	r5, [pc, #276]	@ (80055c0 <Setup+0x1e0>)
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80054ac:	f7fc fff0 	bl	8002490 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
	  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80054b4:	602c      	str	r4, [r5, #0]
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80054b6:	f7fc feb7 	bl	8002228 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80054ba:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80054be:	f7fc fea7 	bl	8002210 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80054c2:	f7fc fe57 	bl	8002174 <BSP_LCD_GetYSize>
 80054c6:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80054ca:	2301      	movs	r3, #1
 80054cc:	4620      	mov	r0, r4
 80054ce:	4a3d      	ldr	r2, [pc, #244]	@ (80055c4 <Setup+0x1e4>)
 80054d0:	b289      	uxth	r1, r1
	  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80054d2:	4c3d      	ldr	r4, [pc, #244]	@ (80055c8 <Setup+0x1e8>)
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 80054d4:	f7fc ffdc 	bl	8002490 <BSP_LCD_DisplayStringAt>
	  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80054d8:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80054dc:	483b      	ldr	r0, [pc, #236]	@ (80055cc <Setup+0x1ec>)
 80054de:	f7fc fcdf 	bl	8001ea0 <BSP_AUDIO_IN_Record>
	    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80054e2:	682b      	ldr	r3, [r5, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d151      	bne.n	800558c <Setup+0x1ac>
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80054e8:	f5a4 407f 	sub.w	r0, r4, #65280	@ 0xff00
	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80054ec:	2300      	movs	r3, #0
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80054ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80054f2:	4936      	ldr	r1, [pc, #216]	@ (80055cc <Setup+0x1ec>)
 80054f4:	38fe      	subs	r0, #254	@ 0xfe
	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80054f6:	602b      	str	r3, [r5, #0]
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80054f8:	f000 fbca 	bl	8005c90 <memcpy>
	    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80054fc:	682e      	ldr	r6, [r5, #0]
 80054fe:	2e02      	cmp	r6, #2
 8005500:	d14d      	bne.n	800559e <Setup+0x1be>
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8005502:	4620      	mov	r0, r4
	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005504:	2700      	movs	r7, #0
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8005506:	f504 34ff 	add.w	r4, r4, #130560	@ 0x1fe00
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 800550a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800550e:	4930      	ldr	r1, [pc, #192]	@ (80055d0 <Setup+0x1f0>)
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8005510:	f504 74fe 	add.w	r4, r4, #508	@ 0x1fc
	    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8005514:	602f      	str	r7, [r5, #0]
	    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8005516:	f000 fbbb 	bl	8005c90 <memcpy>
	  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800551a:	4b2e      	ldr	r3, [pc, #184]	@ (80055d4 <Setup+0x1f4>)
 800551c:	429c      	cmp	r4, r3
 800551e:	d1e0      	bne.n	80054e2 <Setup+0x102>
	  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8005520:	4630      	mov	r0, r6
 8005522:	f7fc fcc7 	bl	8001eb4 <BSP_AUDIO_IN_Stop>
	  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	f7fc fe7d 	bl	8002228 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800552e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8005532:	f7fc fe6d 	bl	8002210 <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 8005536:	f7fc fe1d 	bl	8002174 <BSP_LCD_GetYSize>
 800553a:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 800553e:	2301      	movs	r3, #1
 8005540:	4638      	mov	r0, r7
 8005542:	4a25      	ldr	r2, [pc, #148]	@ (80055d8 <Setup+0x1f8>)
 8005544:	b289      	uxth	r1, r1
 8005546:	f7fc ffa3 	bl	8002490 <BSP_LCD_DisplayStringAt>
	  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 80, DEFAULT_AUDIO_IN_FREQ);
 800554a:	4630      	mov	r0, r6
 800554c:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8005550:	2150      	movs	r1, #80	@ 0x50
 8005552:	f7fc fc3b 	bl	8001dcc <BSP_AUDIO_OUT_Init>
	  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8005556:	2005      	movs	r0, #5
}
 8005558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800555c:	f7fc bb40 	b.w	8001be0 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005560:	f7fc fe62 	bl	8002228 <BSP_LCD_SetBackColor>
	    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005564:	481d      	ldr	r0, [pc, #116]	@ (80055dc <Setup+0x1fc>)
 8005566:	f7fc fe53 	bl	8002210 <BSP_LCD_SetTextColor>
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 800556a:	f7fc fe03 	bl	8002174 <BSP_LCD_GetYSize>
 800556e:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 8005572:	2301      	movs	r3, #1
 8005574:	4a1a      	ldr	r2, [pc, #104]	@ (80055e0 <Setup+0x200>)
 8005576:	b289      	uxth	r1, r1
 8005578:	2000      	movs	r0, #0
 800557a:	f7fc ff89 	bl	8002490 <BSP_LCD_DisplayStringAt>
	    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800557e:	f7fc fdf9 	bl	8002174 <BSP_LCD_GetYSize>
 8005582:	2301      	movs	r3, #1
 8005584:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8005588:	4a16      	ldr	r2, [pc, #88]	@ (80055e4 <Setup+0x204>)
 800558a:	e78b      	b.n	80054a4 <Setup+0xc4>
	      if (CheckForUserInput() > 0)
 800558c:	f000 fafe 	bl	8005b8c <CheckForUserInput>
 8005590:	2800      	cmp	r0, #0
 8005592:	d0a6      	beq.n	80054e2 <Setup+0x102>
	        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005594:	2002      	movs	r0, #2
}
 8005596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800559a:	f7fc bb09 	b.w	8001bb0 <BSP_AUDIO_OUT_Stop>
	      if (CheckForUserInput() > 0)
 800559e:	f000 faf5 	bl	8005b8c <CheckForUserInput>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d0aa      	beq.n	80054fc <Setup+0x11c>
 80055a6:	e7f5      	b.n	8005594 <Setup+0x1b4>
 80055a8:	ff008000 	.word	0xff008000
 80055ac:	2000004c 	.word	0x2000004c
 80055b0:	0800aa7b 	.word	0x0800aa7b
 80055b4:	2000005c 	.word	0x2000005c
 80055b8:	0800aa88 	.word	0x0800aa88
 80055bc:	0800aaaa 	.word	0x0800aaaa
 80055c0:	20000ff4 	.word	0x20000ff4
 80055c4:	0800aaf1 	.word	0x0800aaf1
 80055c8:	c01257fe 	.word	0xc01257fe
 80055cc:	20000ff8 	.word	0x20000ff8
 80055d0:	20010ff6 	.word	0x20010ff6
 80055d4:	c01a57ee 	.word	0xc01a57ee
 80055d8:	0800ab0a 	.word	0x0800ab0a
 80055dc:	ffff0000 	.word	0xffff0000
 80055e0:	0800aac3 	.word	0x0800aac3
 80055e4:	0800aadc 	.word	0x0800aadc

080055e8 <Start_Audio>:
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 80055e8:	490c      	ldr	r1, [pc, #48]	@ (800561c <Start_Audio+0x34>)
 80055ea:	480d      	ldr	r0, [pc, #52]	@ (8005620 <Start_Audio+0x38>)
void Start_Audio (void) {
 80055ec:	b508      	push	{r3, lr}
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 80055ee:	f7ff fe5d 	bl	80052ac <AUDIO_Start>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t *)"PLAYBACK DONE", CENTER_MODE);
 80055f2:	f7fc fdbf 	bl	8002174 <BSP_LCD_GetYSize>
 80055f6:	f1a0 0128 	sub.w	r1, r0, #40	@ 0x28
 80055fa:	2301      	movs	r3, #1
 80055fc:	4a09      	ldr	r2, [pc, #36]	@ (8005624 <Start_Audio+0x3c>)
 80055fe:	b289      	uxth	r1, r1
 8005600:	2000      	movs	r0, #0
 8005602:	f7fc ff45 	bl	8002490 <BSP_LCD_DisplayStringAt>
	AUDIO_Process();
 8005606:	f7ff fe77 	bl	80052f8 <AUDIO_Process>
	if (CheckForUserInput() > 0)
 800560a:	f000 fabf 	bl	8005b8c <CheckForUserInput>
 800560e:	2800      	cmp	r0, #0
 8005610:	d0f9      	beq.n	8005606 <Start_Audio+0x1e>
	  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005612:	2002      	movs	r0, #2
}
 8005614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8005618:	f7fc baca 	b.w	8001bb0 <BSP_AUDIO_OUT_Stop>
 800561c:	0007fff0 	.word	0x0007fff0
 8005620:	c0115800 	.word	0xc0115800
 8005624:	0800ab2c 	.word	0x0800ab2c

08005628 <AudioRec_demo>:
{
 8005628:	b508      	push	{r3, lr}
  Setup();
 800562a:	f7ff fed9 	bl	80053e0 <Setup>
}
 800562e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Start_Audio();
 8005632:	f7ff bfd9 	b.w	80055e8 <Start_Audio>
	...

08005638 <AudioRec_vibrato>:
{
 8005638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 800563c:	2400      	movs	r4, #0
 800563e:	4e20      	ldr	r6, [pc, #128]	@ (80056c0 <AudioRec_vibrato+0x88>)
    vibrato = sin(2.0 * 3.14159265358979323846 * VIBRATO_FREQUENCY * i / DEFAULT_AUDIO_IN_FREQ) * VIBRATO_DEPTH;
 8005640:	f04f 0800 	mov.w	r8, #0
 8005644:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80056cc <AudioRec_vibrato+0x94>
    if ((i + vibrato_offset) < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS) && (i + vibrato_offset) >= 0) {
 8005648:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80056d0 <AudioRec_vibrato+0x98>
  Setup();
 800564c:	f7ff fec8 	bl	80053e0 <Setup>
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 8005650:	4f1c      	ldr	r7, [pc, #112]	@ (80056c4 <AudioRec_vibrato+0x8c>)
    vibrato = sin(2.0 * 3.14159265358979323846 * VIBRATO_FREQUENCY * i / DEFAULT_AUDIO_IN_FREQ) * VIBRATO_DEPTH;
 8005652:	4620      	mov	r0, r4
 8005654:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 8005658:	f7fa ff20 	bl	800049c <__aeabi_ui2d>
 800565c:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8005660:	a315      	add	r3, pc, #84	@ (adr r3, 80056b8 <AudioRec_vibrato+0x80>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f7fa ff93 	bl	8000590 <__aeabi_dmul>
 800566a:	2200      	movs	r2, #0
 800566c:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <AudioRec_vibrato+0x90>)
 800566e:	f7fb f8b9 	bl	80007e4 <__aeabi_ddiv>
 8005672:	ec41 0b10 	vmov	d0, r0, r1
 8005676:	f000 fb1b 	bl	8005cb0 <sin>
 800567a:	4642      	mov	r2, r8
 800567c:	464b      	mov	r3, r9
 800567e:	ec51 0b10 	vmov	r0, r1, d0
 8005682:	f7fa ff85 	bl	8000590 <__aeabi_dmul>
 8005686:	f7fb fa45 	bl	8000b14 <__aeabi_d2f>
 800568a:	ee07 0a90 	vmov	s15, r0
    vibrato_offset = (int32_t)vibrato;
 800568e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005692:	ee17 3a90 	vmov	r3, s15
    if ((i + vibrato_offset) < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS) && (i + vibrato_offset) >= 0) {
 8005696:	1919      	adds	r1, r3, r4
      *dst_ptr = *(src_ptr + vibrato_offset);
 8005698:	005a      	lsls	r2, r3, #1
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 800569a:	3401      	adds	r4, #1
    if ((i + vibrato_offset) < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS) && (i + vibrato_offset) >= 0) {
 800569c:	4559      	cmp	r1, fp
      *dst_ptr = *(src_ptr - vibrato_offset);
 800569e:	bf8a      	itet	hi
 80056a0:	1aad      	subhi	r5, r5, r2
      *dst_ptr = *(src_ptr + vibrato_offset);
 80056a2:	f835 3013 	ldrhls.w	r3, [r5, r3, lsl #1]
      *dst_ptr = *(src_ptr - vibrato_offset);
 80056a6:	882b      	ldrhhi	r3, [r5, #0]
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 80056a8:	42bc      	cmp	r4, r7
 80056aa:	f82a 3006 	strh.w	r3, [sl, r6]
 80056ae:	d1d0      	bne.n	8005652 <AudioRec_vibrato+0x1a>
}
 80056b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Start_Audio();
 80056b4:	f7ff bf98 	b.w	80055e8 <Start_Audio>
 80056b8:	54442d18 	.word	0x54442d18
 80056bc:	404921fb 	.word	0x404921fb
 80056c0:	c0115800 	.word	0xc0115800
 80056c4:	0003fff8 	.word	0x0003fff8
 80056c8:	40cf4000 	.word	0x40cf4000
 80056cc:	3ff80000 	.word	0x3ff80000
 80056d0:	0003fff7 	.word	0x0003fff7

080056d4 <AudioRec_nightcore>:
{
 80056d4:	b508      	push	{r3, lr}
  Setup();
 80056d6:	f7ff fe83 	bl	80053e0 <Setup>
  dst_ptr = (uint16_t *)AUDIO_REC_START_ADDR;
 80056da:	4808      	ldr	r0, [pc, #32]	@ (80056fc <AudioRec_nightcore+0x28>)
	  *dst_ptr = *(src_ptr + i * 2);
 80056dc:	4908      	ldr	r1, [pc, #32]	@ (8005700 <AudioRec_nightcore+0x2c>)
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS) / 2; i++) {
 80056de:	4b09      	ldr	r3, [pc, #36]	@ (8005704 <AudioRec_nightcore+0x30>)
	  *dst_ptr = *(src_ptr + i * 2);
 80056e0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 80056e4:	f820 2b02 	strh.w	r2, [r0], #2
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS) / 2; i++) {
 80056e8:	4298      	cmp	r0, r3
 80056ea:	d1f9      	bne.n	80056e0 <AudioRec_nightcore+0xc>
	  *(dst_ptr + i) = *(src_ptr + i);
 80056ec:	4a06      	ldr	r2, [pc, #24]	@ (8005708 <AudioRec_nightcore+0x34>)
 80056ee:	4903      	ldr	r1, [pc, #12]	@ (80056fc <AudioRec_nightcore+0x28>)
 80056f0:	f000 face 	bl	8005c90 <memcpy>
}
 80056f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Start_Audio();
 80056f8:	f7ff bf76 	b.w	80055e8 <Start_Audio>
 80056fc:	c0115800 	.word	0xc0115800
 8005700:	3feea800 	.word	0x3feea800
 8005704:	c01557f8 	.word	0xc01557f8
 8005708:	0003fff8 	.word	0x0003fff8

0800570c <AudioRec_reverb>:
{
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
  float tap_delay[NUM_TAPS] = {0.1, 0.2, 0.3, 0.4, 0.5};
 800570e:	4c32      	ldr	r4, [pc, #200]	@ (80057d8 <AudioRec_reverb+0xcc>)
{
 8005710:	b091      	sub	sp, #68	@ 0x44
  Setup();
 8005712:	f7ff fe65 	bl	80053e0 <Setup>
      delay_samples[i] = (uint32_t)(tap_delay[i] * DEFAULT_AUDIO_IN_FREQ);
 8005716:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80057dc <AudioRec_reverb+0xd0>
  float tap_delay[NUM_TAPS] = {0.1, 0.2, 0.3, 0.4, 0.5};
 800571a:	ad01      	add	r5, sp, #4
 800571c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800571e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005720:	f854 3b04 	ldr.w	r3, [r4], #4
 8005724:	602b      	str	r3, [r5, #0]
  float tap_gain[NUM_TAPS] = {0.7, 0.5, 0.3, 0.2, 0.1};
 8005726:	ad06      	add	r5, sp, #24
 8005728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800572a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	a901      	add	r1, sp, #4
 8005730:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005732:	602b      	str	r3, [r5, #0]
  for (i = 0; i < NUM_TAPS; i++) {
 8005734:	2300      	movs	r3, #0
      delay_samples[i] = (uint32_t)(tap_delay[i] * DEFAULT_AUDIO_IN_FREQ);
 8005736:	ecf1 7a01 	vldmia	r1!, {s15}
  for (i = 0; i < NUM_TAPS; i++) {
 800573a:	3301      	adds	r3, #1
      delay_samples[i] = (uint32_t)(tap_delay[i] * DEFAULT_AUDIO_IN_FREQ);
 800573c:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (i = 0; i < NUM_TAPS; i++) {
 8005740:	2b05      	cmp	r3, #5
      delay_samples[i] = (uint32_t)(tap_delay[i] * DEFAULT_AUDIO_IN_FREQ);
 8005742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005746:	ece2 7a01 	vstmia	r2!, {s15}
  for (i = 0; i < NUM_TAPS; i++) {
 800574a:	d1f4      	bne.n	8005736 <AudioRec_reverb+0x2a>
  for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 800574c:	2300      	movs	r3, #0
      float out_sample = audio_ptr[i];
 800574e:	4924      	ldr	r1, [pc, #144]	@ (80057e0 <AudioRec_reverb+0xd4>)
      if (out_sample > 32767) {
 8005750:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80057e4 <AudioRec_reverb+0xd8>
      } else if (out_sample < -32768) {
 8005754:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80057e8 <AudioRec_reverb+0xdc>
  for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 8005758:	4f24      	ldr	r7, [pc, #144]	@ (80057ec <AudioRec_reverb+0xe0>)
      float out_sample = audio_ptr[i];
 800575a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
          uint32_t delay_index = (i >= delay_samples[j]) ? (i - delay_samples[j]) : (AUDIO_BUFFER_SIZE / 2 + i - delay_samples[j]);
 800575e:	f503 347f 	add.w	r4, r3, #261120	@ 0x3fc00
      float out_sample = audio_ptr[i];
 8005762:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005766:	ad06      	add	r5, sp, #24
 8005768:	ee07 2a90 	vmov	s15, r2
 800576c:	ae0b      	add	r6, sp, #44	@ 0x2c
      for (j = 0; j < NUM_TAPS; j++) {
 800576e:	2000      	movs	r0, #0
          uint32_t delay_index = (i >= delay_samples[j]) ? (i - delay_samples[j]) : (AUDIO_BUFFER_SIZE / 2 + i - delay_samples[j]);
 8005770:	f504 747e 	add.w	r4, r4, #1016	@ 0x3f8
      float out_sample = audio_ptr[i];
 8005774:	eef8 7a67 	vcvt.f32.u32	s15, s15
          uint32_t delay_index = (i >= delay_samples[j]) ? (i - delay_samples[j]) : (AUDIO_BUFFER_SIZE / 2 + i - delay_samples[j]);
 8005778:	f856 2b04 	ldr.w	r2, [r6], #4
      for (j = 0; j < NUM_TAPS; j++) {
 800577c:	3001      	adds	r0, #1
          out_sample += tap_gain[j] * delay_buffer[delay_index];
 800577e:	ecf5 5a01 	vldmia	r5!, {s11}
          uint32_t delay_index = (i >= delay_samples[j]) ? (i - delay_samples[j]) : (AUDIO_BUFFER_SIZE / 2 + i - delay_samples[j]);
 8005782:	429a      	cmp	r2, r3
 8005784:	bf94      	ite	ls
 8005786:	1a9a      	subls	r2, r3, r2
 8005788:	1aa2      	subhi	r2, r4, r2
      for (j = 0; j < NUM_TAPS; j++) {
 800578a:	2805      	cmp	r0, #5
          out_sample += tap_gain[j] * delay_buffer[delay_index];
 800578c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005790:	ee07 2a10 	vmov	s14, r2
 8005794:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005798:	eee5 7a87 	vfma.f32	s15, s11, s14
      for (j = 0; j < NUM_TAPS; j++) {
 800579c:	d1ec      	bne.n	8005778 <AudioRec_reverb+0x6c>
      if (out_sample > 32767) {
 800579e:	eef4 7ac6 	vcmpe.f32	s15, s12
 80057a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a6:	dc14      	bgt.n	80057d2 <AudioRec_reverb+0xc6>
          out_sample = -32768;
 80057a8:	eef4 7a66 	vcmp.f32	s15, s13
 80057ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b0:	bf48      	it	mi
 80057b2:	eef0 7a66 	vmovmi.f32	s15, s13
      delay_buffer[i] = (uint16_t)out_sample;
 80057b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 80057ba:	3301      	adds	r3, #1
 80057bc:	42bb      	cmp	r3, r7
      delay_buffer[i] = (uint16_t)out_sample;
 80057be:	ee17 2a90 	vmov	r2, s15
 80057c2:	f82c 2001 	strh.w	r2, [ip, r1]
  for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 80057c6:	d1c8      	bne.n	800575a <AudioRec_reverb+0x4e>
}
 80057c8:	b011      	add	sp, #68	@ 0x44
 80057ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Start_Audio();
 80057ce:	f7ff bf0b 	b.w	80055e8 <Start_Audio>
          out_sample = 32767;
 80057d2:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80057e4 <AudioRec_reverb+0xd8>
 80057d6:	e7ee      	b.n	80057b6 <AudioRec_reverb+0xaa>
 80057d8:	0800aa3c 	.word	0x0800aa3c
 80057dc:	467a0000 	.word	0x467a0000
 80057e0:	c0115800 	.word	0xc0115800
 80057e4:	46fffe00 	.word	0x46fffe00
 80057e8:	c7000000 	.word	0xc7000000
 80057ec:	0003fff8 	.word	0x0003fff8

080057f0 <AudioRec_distortion>:
{
 80057f0:	b510      	push	{r4, lr}
  Setup();
 80057f2:	f7ff fdf5 	bl	80053e0 <Setup>
    else if (sample < -10000) sample = -10000;
 80057f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005828 <AudioRec_distortion+0x38>)
  src_ptr = (uint16_t *)(AUDIO_REC_START_ADDR);
 80057f8:	4a0c      	ldr	r2, [pc, #48]	@ (800582c <AudioRec_distortion+0x3c>)
    *src_ptr = (uint16_t)(sample + 32768); // Convert back to unsigned 16-bit
 80057fa:	f242 7010 	movw	r0, #10000	@ 0x2710
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 80057fe:	490c      	ldr	r1, [pc, #48]	@ (8005830 <AudioRec_distortion+0x40>)
    int32_t sample = (int32_t)(*src_ptr) - 32768; // Convert to signed 16-bit
 8005800:	8813      	ldrh	r3, [r2, #0]
 8005802:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
    else if (sample < -10000) sample = -10000;
 8005806:	42a3      	cmp	r3, r4
 8005808:	bfb8      	it	lt
 800580a:	4623      	movlt	r3, r4
    *src_ptr = (uint16_t)(sample + 32768); // Convert back to unsigned 16-bit
 800580c:	4283      	cmp	r3, r0
 800580e:	bfa8      	it	ge
 8005810:	4603      	movge	r3, r0
 8005812:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8005816:	f822 3b02 	strh.w	r3, [r2], #2
  for (i = 0; i < (AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS); i++) {
 800581a:	428a      	cmp	r2, r1
 800581c:	d1f0      	bne.n	8005800 <AudioRec_distortion+0x10>
}
 800581e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Start_Audio();
 8005822:	f7ff bee1 	b.w	80055e8 <Start_Audio>
 8005826:	bf00      	nop
 8005828:	ffffd8f0 	.word	0xffffd8f0
 800582c:	c0115800 	.word	0xc0115800
 8005830:	c01957f0 	.word	0xc01957f0

08005834 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8005834:	4b01      	ldr	r3, [pc, #4]	@ (800583c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 8005836:	2202      	movs	r2, #2
 8005838:	601a      	str	r2, [r3, #0]
  return;
}
 800583a:	4770      	bx	lr
 800583c:	20000ff4 	.word	0x20000ff4

08005840 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8005840:	4b01      	ldr	r3, [pc, #4]	@ (8005848 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]
  return;
}
 8005846:	4770      	bx	lr
 8005848:	20000ff4 	.word	0x20000ff4

0800584c <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 800584c:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800584e:	480a      	ldr	r0, [pc, #40]	@ (8005878 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 8005850:	f7fc fcea 	bl	8002228 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 8005854:	f7fc fd00 	bl	8002258 <BSP_LCD_GetFont>
 8005858:	88c1      	ldrh	r1, [r0, #6]
 800585a:	2301      	movs	r3, #1
 800585c:	2000      	movs	r0, #0
 800585e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005862:	4a06      	ldr	r2, [pc, #24]	@ (800587c <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8005864:	0049      	lsls	r1, r1, #1
 8005866:	b289      	uxth	r1, r1
 8005868:	f7fc fe12 	bl	8002490 <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800586c:	2002      	movs	r0, #2
  {
    return;
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800586e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005872:	f7fc b8a3 	b.w	80019bc <BSP_PB_GetState>
 8005876:	bf00      	nop
 8005878:	ffff0000 	.word	0xffff0000
 800587c:	0800aa64 	.word	0x0800aa64

08005880 <Display_DemoDescription>:
  * @brief  Display main demo messages.
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8005880:	b530      	push	{r4, r5, lr}
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8005882:	2001      	movs	r0, #1
{
 8005884:	b08f      	sub	sp, #60	@ 0x3c
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8005886:	f7fc fcbd 	bl	8002204 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800588a:	4831      	ldr	r0, [pc, #196]	@ (8005950 <Display_DemoDescription+0xd0>)
 800588c:	f7fc fcd8 	bl	8002240 <BSP_LCD_SetFont>
  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
  BSP_LCD_Clear(LCD_COLOR_WHITE);

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8005890:	4d30      	ldr	r5, [pc, #192]	@ (8005954 <Display_DemoDescription+0xd4>)
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	f7fc fcc7 	bl	8002228 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800589a:	f04f 30ff 	mov.w	r0, #4294967295
 800589e:	f7fc fce7 	bl	8002270 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80058a2:	4628      	mov	r0, r5
 80058a4:	f7fc fcb4 	bl	8002210 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G", CENTER_MODE);
 80058a8:	2301      	movs	r3, #1
 80058aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005958 <Display_DemoDescription+0xd8>)
 80058ac:	210a      	movs	r1, #10
 80058ae:	2000      	movs	r0, #0
 80058b0:	f7fc fdee 	bl	8002490 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Voice Modulator", CENTER_MODE);
 80058b4:	2301      	movs	r3, #1
 80058b6:	4a29      	ldr	r2, [pc, #164]	@ (800595c <Display_DemoDescription+0xdc>)
 80058b8:	2123      	movs	r1, #35	@ 0x23
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fc fde8 	bl	8002490 <BSP_LCD_DisplayStringAt>


  BSP_LCD_SetFont(&Font12);
 80058c0:	4827      	ldr	r0, [pc, #156]	@ (8005960 <Display_DemoDescription+0xe0>)
 80058c2:	f7fc fcbd 	bl	8002240 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Jakub Swiatek, Mateusz Bywalec", CENTER_MODE);
 80058c6:	f7fc fc55 	bl	8002174 <BSP_LCD_GetYSize>
 80058ca:	f1a0 0114 	sub.w	r1, r0, #20
 80058ce:	2301      	movs	r3, #1
 80058d0:	4a24      	ldr	r2, [pc, #144]	@ (8005964 <Display_DemoDescription+0xe4>)
 80058d2:	b289      	uxth	r1, r1
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fc fddb 	bl	8002490 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetFont(&Font16);
 80058da:	4823      	ldr	r0, [pc, #140]	@ (8005968 <Display_DemoDescription+0xe8>)
 80058dc:	f7fc fcb0 	bl	8002240 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7fc fc95 	bl	8002210 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 80058e6:	f7fc fc45 	bl	8002174 <BSP_LCD_GetYSize>
 80058ea:	4604      	mov	r4, r0
 80058ec:	f7fc fc36 	bl	800215c <BSP_LCD_GetXSize>
 80058f0:	233c      	movs	r3, #60	@ 0x3c
 80058f2:	0861      	lsrs	r1, r4, #1
 80058f4:	b282      	uxth	r2, r0
 80058f6:	2000      	movs	r0, #0
 80058f8:	310f      	adds	r1, #15
 80058fa:	b289      	uxth	r1, r1
 80058fc:	f7fc fe2c 	bl	8002558 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	f7fc fc84 	bl	8002210 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8005908:	4628      	mov	r0, r5
 800590a:	f7fc fc8d 	bl	8002228 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to:", CENTER_MODE);
 800590e:	f7fc fc31 	bl	8002174 <BSP_LCD_GetYSize>
 8005912:	2301      	movs	r3, #1
 8005914:	0841      	lsrs	r1, r0, #1
 8005916:	4a15      	ldr	r2, [pc, #84]	@ (800596c <Display_DemoDescription+0xec>)
 8005918:	2000      	movs	r0, #0
 800591a:	311e      	adds	r1, #30
 800591c:	b289      	uxth	r1, r1
 800591e:	f7fc fdb7 	bl	8002490 <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc, "%s", BSP_examples[DemoIndex].DemoName);
 8005922:	4b13      	ldr	r3, [pc, #76]	@ (8005970 <Display_DemoDescription+0xf0>)
 8005924:	223c      	movs	r2, #60	@ 0x3c
 8005926:	4913      	ldr	r1, [pc, #76]	@ (8005974 <Display_DemoDescription+0xf4>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	a801      	add	r0, sp, #4
 800592c:	fb02 1103 	mla	r1, r2, r3, r1
 8005930:	3104      	adds	r1, #4
 8005932:	f000 f9a5 	bl	8005c80 <strcpy>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 8005936:	f7fc fc1d 	bl	8002174 <BSP_LCD_GetYSize>
 800593a:	2301      	movs	r3, #1
 800593c:	0841      	lsrs	r1, r0, #1
 800593e:	aa01      	add	r2, sp, #4
 8005940:	2000      	movs	r0, #0
 8005942:	312d      	adds	r1, #45	@ 0x2d
 8005944:	b289      	uxth	r1, r1
 8005946:	f7fc fda3 	bl	8002490 <BSP_LCD_DisplayStringAt>
}
 800594a:	b00f      	add	sp, #60	@ 0x3c
 800594c:	bd30      	pop	{r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	2000004c 	.word	0x2000004c
 8005954:	ff008000 	.word	0xff008000
 8005958:	0800ab3a 	.word	0x0800ab3a
 800595c:	0800ab45 	.word	0x0800ab45
 8005960:	2000005c 	.word	0x2000005c
 8005964:	0800ab55 	.word	0x0800ab55
 8005968:	20000064 	.word	0x20000064
 800596c:	0800ab74 	.word	0x0800ab74
 8005970:	20020ff4 	.word	0x20020ff4
 8005974:	20000084 	.word	0x20000084

08005978 <main>:
{
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	b094      	sub	sp, #80	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800597c:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_Disable();
 8005980:	f7fd f962 	bl	8002c48 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005984:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005986:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005988:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800598a:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800598e:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005992:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8005994:	f04f 4610 	mov.w	r6, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005998:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800599c:	f7fd f972 	bl	8002c84 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80059a0:	4b71      	ldr	r3, [pc, #452]	@ (8005b68 <main+0x1f0>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80059a2:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80059a6:	f04f 4540 	mov.w	r5, #3221225472	@ 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059aa:	a808      	add	r0, sp, #32
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80059ac:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80059b0:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 80059b4:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059b6:	f7fd f965 	bl	8002c84 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80059ba:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059be:	a808      	add	r0, sp, #32
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80059c0:	950b      	str	r5, [sp, #44]	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80059c2:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80059c6:	4b69      	ldr	r3, [pc, #420]	@ (8005b6c <main+0x1f4>)
 80059c8:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059cc:	f7fd f95a 	bl	8002c84 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80059d0:	f240 3301 	movw	r3, #769	@ 0x301
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80059d4:	f04f 4c20 	mov.w	ip, #2684354560	@ 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059d8:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80059da:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80059de:	4b64      	ldr	r3, [pc, #400]	@ (8005b70 <main+0x1f8>)
 80059e0:	e9cd c309 	strd	ip, r3, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80059e4:	4b63      	ldr	r3, [pc, #396]	@ (8005b74 <main+0x1fc>)
 80059e6:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80059e8:	f7fd f94c 	bl	8002c84 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80059ec:	2004      	movs	r0, #4
 80059ee:	f7fd f939 	bl	8002c64 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 80059f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059f6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80059fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005b78 <main+0x200>)
 80059fc:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a04:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005a08:	6953      	ldr	r3, [r2, #20]
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a14:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005a18:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005a1c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005a20:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005a24:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005a28:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005a2c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8005a30:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005a32:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005a36:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005a38:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8005a3c:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005a3e:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8005a42:	d2f9      	bcs.n	8005a38 <main+0xc0>
    } while(sets-- != 0U);
 8005a44:	3b20      	subs	r3, #32
 8005a46:	f113 0f20 	cmn.w	r3, #32
 8005a4a:	d1f2      	bne.n	8005a32 <main+0xba>
 8005a4c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005a50:	6953      	ldr	r3, [r2, #20]
 8005a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a56:	6153      	str	r3, [r2, #20]
 8005a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005a5c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005a60:	f7fd f852 	bl	8002b08 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a64:	4b45      	ldr	r3, [pc, #276]	@ (8005b7c <main+0x204>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a66:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005a68:	2419      	movs	r4, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a6c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	9301      	str	r3, [sp, #4]
 8005a7a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a7c:	4b40      	ldr	r3, [pc, #256]	@ (8005b80 <main+0x208>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005a84:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a86:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a98:	e9cd 0308 	strd	r0, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a9c:	2302      	movs	r3, #2
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005a9e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005aa0:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005aa4:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005aa6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005aaa:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 8005aac:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005ab0:	9313      	str	r3, [sp, #76]	@ 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005ab2:	f7fe fa0f 	bl	8003ed4 <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 8005ab6:	b118      	cbz	r0, 8005ac0 <main+0x148>
 8005ab8:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <main+0x20c>)
 8005aba:	6853      	ldr	r3, [r2, #4]
 8005abc:	3301      	adds	r3, #1
 8005abe:	6053      	str	r3, [r2, #4]
  ret = HAL_PWREx_ActivateOverDrive();
 8005ac0:	f7fe f9d0 	bl	8003e64 <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 8005ac4:	b118      	cbz	r0, 8005ace <main+0x156>
 8005ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b84 <main+0x20c>)
 8005ac8:	6853      	ldr	r3, [r2, #4]
 8005aca:	3301      	adds	r3, #1
 8005acc:	6053      	str	r3, [r2, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ad2:	2100      	movs	r1, #0
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005ad4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ad6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ada:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005ade:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005ae6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ae8:	9307      	str	r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005aea:	f7fe fbdb 	bl	80042a4 <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 8005aee:	b118      	cbz	r0, 8005af8 <main+0x180>
 8005af0:	4a24      	ldr	r2, [pc, #144]	@ (8005b84 <main+0x20c>)
 8005af2:	6853      	ldr	r3, [r2, #4]
 8005af4:	3301      	adds	r3, #1
 8005af6:	6053      	str	r3, [r2, #4]
  BSP_LED_Init(LED1);
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fb fee9 	bl	80018d0 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8005afe:	2100      	movs	r1, #0
 8005b00:	2002      	movs	r0, #2
 8005b02:	f7fb ff09 	bl	8001918 <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 8005b06:	f7fc fe19 	bl	800273c <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 8005b0a:	b118      	cbz	r0, 8005b14 <main+0x19c>
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b84 <main+0x20c>)
 8005b0e:	6853      	ldr	r3, [r2, #4]
 8005b10:	3301      	adds	r3, #1
 8005b12:	6053      	str	r3, [r2, #4]
      BSP_examples[DemoIndex++].DemoFunc();
 8005b14:	4c1b      	ldr	r4, [pc, #108]	@ (8005b84 <main+0x20c>)
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8005b16:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
      BSP_examples[DemoIndex++].DemoFunc();
 8005b1a:	4e1b      	ldr	r6, [pc, #108]	@ (8005b88 <main+0x210>)
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7fc fb35 	bl	800218c <BSP_LCD_LayerDefaultInit>
  Display_DemoDescription();
 8005b22:	f7ff fead 	bl	8005880 <Display_DemoDescription>
    if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005b26:	2002      	movs	r0, #2
 8005b28:	f7fb ff48 	bl	80019bc <BSP_PB_GetState>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0fa      	beq.n	8005b26 <main+0x1ae>
      HAL_Delay(10);
 8005b30:	200a      	movs	r0, #10
 8005b32:	f7fd f811 	bl	8002b58 <HAL_Delay>
      while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8005b36:	2002      	movs	r0, #2
 8005b38:	f7fb ff40 	bl	80019bc <BSP_PB_GetState>
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d1f9      	bne.n	8005b36 <main+0x1be>
      BSP_examples[DemoIndex++].DemoFunc();
 8005b42:	7823      	ldrb	r3, [r4, #0]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	7022      	strb	r2, [r4, #0]
 8005b48:	223c      	movs	r2, #60	@ 0x3c
 8005b4a:	4353      	muls	r3, r2
 8005b4c:	58f3      	ldr	r3, [r6, r3]
 8005b4e:	4798      	blx	r3
      if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8005b50:	7823      	ldrb	r3, [r4, #0]
 8005b52:	2b04      	cmp	r3, #4
        NbLoop++;
 8005b54:	bf81      	itttt	hi
 8005b56:	f896 312c 	ldrbhi.w	r3, [r6, #300]	@ 0x12c
        DemoIndex = 0;
 8005b5a:	7025      	strbhi	r5, [r4, #0]
        NbLoop++;
 8005b5c:	3301      	addhi	r3, #1
 8005b5e:	f886 312c 	strbhi.w	r3, [r6, #300]	@ 0x12c
      Display_DemoDescription();
 8005b62:	f7ff fe8d 	bl	8005880 <Display_DemoDescription>
 8005b66:	e7de      	b.n	8005b26 <main+0x1ae>
 8005b68:	03000018 	.word	0x03000018
 8005b6c:	03000019 	.word	0x03000019
 8005b70:	0300000c 	.word	0x0300000c
 8005b74:	01000101 	.word	0x01000101
 8005b78:	e000ed00 	.word	0xe000ed00
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40007000 	.word	0x40007000
 8005b84:	20020ff4 	.word	0x20020ff4
 8005b88:	20000084 	.word	0x20000084

08005b8c <CheckForUserInput>:
{
 8005b8c:	b508      	push	{r3, lr}
  if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f7fb ff14 	bl	80019bc <BSP_PB_GetState>
 8005b94:	b140      	cbz	r0, 8005ba8 <CheckForUserInput+0x1c>
    HAL_Delay(10);
 8005b96:	200a      	movs	r0, #10
 8005b98:	f7fc ffde 	bl	8002b58 <HAL_Delay>
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f7fb ff0d 	bl	80019bc <BSP_PB_GetState>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d1fa      	bne.n	8005b9c <CheckForUserInput+0x10>
    return 1 ;
 8005ba6:	2001      	movs	r0, #1
}
 8005ba8:	bd08      	pop	{r3, pc}
	...

08005bac <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == KEY_BUTTON_PIN)
 8005bac:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 8005bb0:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 8005bb2:	d109      	bne.n	8005bc8 <HAL_GPIO_EXTI_Callback+0x1c>
    if ((HAL_GetTick() - debounce_time) > 50)
 8005bb4:	4c05      	ldr	r4, [pc, #20]	@ (8005bcc <HAL_GPIO_EXTI_Callback+0x20>)
 8005bb6:	f7fc ffc9 	bl	8002b4c <HAL_GetTick>
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	1ac0      	subs	r0, r0, r3
 8005bbe:	2832      	cmp	r0, #50	@ 0x32
 8005bc0:	d902      	bls.n	8005bc8 <HAL_GPIO_EXTI_Callback+0x1c>
      debounce_time = HAL_GetTick();
 8005bc2:	f7fc ffc3 	bl	8002b4c <HAL_GetTick>
 8005bc6:	60a0      	str	r0, [r4, #8]
}
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	20020ff4 	.word	0x20020ff4

08005bd0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005bd0:	4770      	bx	lr

08005bd2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005bd2:	e7fe      	b.n	8005bd2 <HardFault_Handler>

08005bd4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005bd4:	e7fe      	b.n	8005bd4 <MemManage_Handler>

08005bd6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005bd6:	e7fe      	b.n	8005bd6 <BusFault_Handler>

08005bd8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005bd8:	e7fe      	b.n	8005bd8 <UsageFault_Handler>

08005bda <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8005bda:	4770      	bx	lr

08005bdc <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8005bdc:	4770      	bx	lr

08005bde <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8005bde:	4770      	bx	lr

08005be0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8005be0:	f7fc bfa8 	b.w	8002b34 <HAL_IncTick>

08005be4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8005be4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005be8:	f7fd bcae 	b.w	8003548 <HAL_GPIO_EXTI_IRQHandler>

08005bec <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005bec:	2004      	movs	r0, #4
 8005bee:	f7fd bcab 	b.w	8003548 <HAL_GPIO_EXTI_IRQHandler>
	...

08005bf4 <EXTI15_10_IRQHandler>:
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 8005bf4:	4b04      	ldr	r3, [pc, #16]	@ (8005c08 <EXTI15_10_IRQHandler+0x14>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	049b      	lsls	r3, r3, #18
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8005bfa:	bf4c      	ite	mi
 8005bfc:	f44f 4020 	movmi.w	r0, #40960	@ 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8005c00:	f44f 6000 	movpl.w	r0, #2048	@ 0x800
 8005c04:	f7fd bca0 	b.w	8003548 <HAL_GPIO_EXTI_IRQHandler>
 8005c08:	40013c00 	.word	0x40013c00

08005c0c <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8005c0c:	4b01      	ldr	r3, [pc, #4]	@ (8005c14 <DMA2_Stream7_IRQHandler+0x8>)
 8005c0e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005c10:	f7fd b99e 	b.w	8002f50 <HAL_DMA_IRQHandler>
 8005c14:	20000310 	.word	0x20000310

08005c18 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
 8005c18:	4b01      	ldr	r3, [pc, #4]	@ (8005c20 <DMA2_Stream0_IRQHandler+0x8>)
 8005c1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c1c:	f7fd b998 	b.w	8002f50 <HAL_DMA_IRQHandler>
 8005c20:	2000069c 	.word	0x2000069c

08005c24 <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
 8005c24:	e7fe      	b.n	8005c24 <DMA2_Stream1_IRQHandler>
	...

08005c28 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005c28:	4b01      	ldr	r3, [pc, #4]	@ (8005c30 <DMA2_Stream4_IRQHandler+0x8>)
 8005c2a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005c2c:	f7fd b990 	b.w	8002f50 <HAL_DMA_IRQHandler>
 8005c30:	2000028c 	.word	0x2000028c

08005c34 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
  BSP_CAMERA_IRQHandler();
 8005c34:	e7fe      	b.n	8005c34 <DCMI_IRQHandler>
	...

08005c38 <__libc_init_array>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c70 <__libc_init_array+0x38>)
 8005c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c74 <__libc_init_array+0x3c>)
 8005c3e:	1b64      	subs	r4, r4, r5
 8005c40:	10a4      	asrs	r4, r4, #2
 8005c42:	2600      	movs	r6, #0
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d109      	bne.n	8005c5c <__libc_init_array+0x24>
 8005c48:	4d0b      	ldr	r5, [pc, #44]	@ (8005c78 <__libc_init_array+0x40>)
 8005c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c7c <__libc_init_array+0x44>)
 8005c4c:	f001 f860 	bl	8006d10 <_init>
 8005c50:	1b64      	subs	r4, r4, r5
 8005c52:	10a4      	asrs	r4, r4, #2
 8005c54:	2600      	movs	r6, #0
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	d105      	bne.n	8005c66 <__libc_init_array+0x2e>
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c60:	4798      	blx	r3
 8005c62:	3601      	adds	r6, #1
 8005c64:	e7ee      	b.n	8005c44 <__libc_init_array+0xc>
 8005c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6a:	4798      	blx	r3
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	e7f2      	b.n	8005c56 <__libc_init_array+0x1e>
 8005c70:	0800ad70 	.word	0x0800ad70
 8005c74:	0800ad70 	.word	0x0800ad70
 8005c78:	0800ad70 	.word	0x0800ad70
 8005c7c:	0800ad74 	.word	0x0800ad74

08005c80 <strcpy>:
 8005c80:	4603      	mov	r3, r0
 8005c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c86:	f803 2b01 	strb.w	r2, [r3], #1
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	d1f9      	bne.n	8005c82 <strcpy+0x2>
 8005c8e:	4770      	bx	lr

08005c90 <memcpy>:
 8005c90:	440a      	add	r2, r1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c98:	d100      	bne.n	8005c9c <memcpy+0xc>
 8005c9a:	4770      	bx	lr
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ca6:	4291      	cmp	r1, r2
 8005ca8:	d1f9      	bne.n	8005c9e <memcpy+0xe>
 8005caa:	bd10      	pop	{r4, pc}
 8005cac:	0000      	movs	r0, r0
	...

08005cb0 <sin>:
 8005cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cb2:	ec53 2b10 	vmov	r2, r3, d0
 8005cb6:	4826      	ldr	r0, [pc, #152]	@ (8005d50 <sin+0xa0>)
 8005cb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005cbc:	4281      	cmp	r1, r0
 8005cbe:	d807      	bhi.n	8005cd0 <sin+0x20>
 8005cc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005d48 <sin+0x98>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	b005      	add	sp, #20
 8005cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ccc:	f000 b90c 	b.w	8005ee8 <__kernel_sin>
 8005cd0:	4820      	ldr	r0, [pc, #128]	@ (8005d54 <sin+0xa4>)
 8005cd2:	4281      	cmp	r1, r0
 8005cd4:	d908      	bls.n	8005ce8 <sin+0x38>
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f7fa faa1 	bl	8000220 <__aeabi_dsub>
 8005cde:	ec41 0b10 	vmov	d0, r0, r1
 8005ce2:	b005      	add	sp, #20
 8005ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ce8:	4668      	mov	r0, sp
 8005cea:	f000 f9b9 	bl	8006060 <__ieee754_rem_pio2>
 8005cee:	f000 0003 	and.w	r0, r0, #3
 8005cf2:	2801      	cmp	r0, #1
 8005cf4:	d00c      	beq.n	8005d10 <sin+0x60>
 8005cf6:	2802      	cmp	r0, #2
 8005cf8:	d011      	beq.n	8005d1e <sin+0x6e>
 8005cfa:	b9e8      	cbnz	r0, 8005d38 <sin+0x88>
 8005cfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d00:	ed9d 0b00 	vldr	d0, [sp]
 8005d04:	2001      	movs	r0, #1
 8005d06:	f000 f8ef 	bl	8005ee8 <__kernel_sin>
 8005d0a:	ec51 0b10 	vmov	r0, r1, d0
 8005d0e:	e7e6      	b.n	8005cde <sin+0x2e>
 8005d10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d14:	ed9d 0b00 	vldr	d0, [sp]
 8005d18:	f000 f81e 	bl	8005d58 <__kernel_cos>
 8005d1c:	e7f5      	b.n	8005d0a <sin+0x5a>
 8005d1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d22:	ed9d 0b00 	vldr	d0, [sp]
 8005d26:	2001      	movs	r0, #1
 8005d28:	f000 f8de 	bl	8005ee8 <__kernel_sin>
 8005d2c:	ec53 2b10 	vmov	r2, r3, d0
 8005d30:	4610      	mov	r0, r2
 8005d32:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005d36:	e7d2      	b.n	8005cde <sin+0x2e>
 8005d38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d3c:	ed9d 0b00 	vldr	d0, [sp]
 8005d40:	f000 f80a 	bl	8005d58 <__kernel_cos>
 8005d44:	e7f2      	b.n	8005d2c <sin+0x7c>
 8005d46:	bf00      	nop
	...
 8005d50:	3fe921fb 	.word	0x3fe921fb
 8005d54:	7fefffff 	.word	0x7fefffff

08005d58 <__kernel_cos>:
 8005d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ec57 6b10 	vmov	r6, r7, d0
 8005d60:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005d64:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005d68:	ed8d 1b00 	vstr	d1, [sp]
 8005d6c:	d206      	bcs.n	8005d7c <__kernel_cos+0x24>
 8005d6e:	4630      	mov	r0, r6
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fea7 	bl	8000ac4 <__aeabi_d2iz>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f000 8088 	beq.w	8005e8c <__kernel_cos+0x134>
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	463b      	mov	r3, r7
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fc04 	bl	8000590 <__aeabi_dmul>
 8005d88:	4b51      	ldr	r3, [pc, #324]	@ (8005ed0 <__kernel_cos+0x178>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	460d      	mov	r5, r1
 8005d90:	f7fa fbfe 	bl	8000590 <__aeabi_dmul>
 8005d94:	a340      	add	r3, pc, #256	@ (adr r3, 8005e98 <__kernel_cos+0x140>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	468b      	mov	fp, r1
 8005d9e:	4620      	mov	r0, r4
 8005da0:	4629      	mov	r1, r5
 8005da2:	f7fa fbf5 	bl	8000590 <__aeabi_dmul>
 8005da6:	a33e      	add	r3, pc, #248	@ (adr r3, 8005ea0 <__kernel_cos+0x148>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa fa3a 	bl	8000224 <__adddf3>
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	f7fa fbec 	bl	8000590 <__aeabi_dmul>
 8005db8:	a33b      	add	r3, pc, #236	@ (adr r3, 8005ea8 <__kernel_cos+0x150>)
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f7fa fa2f 	bl	8000220 <__aeabi_dsub>
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	f7fa fbe3 	bl	8000590 <__aeabi_dmul>
 8005dca:	a339      	add	r3, pc, #228	@ (adr r3, 8005eb0 <__kernel_cos+0x158>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fa28 	bl	8000224 <__adddf3>
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	f7fa fbda 	bl	8000590 <__aeabi_dmul>
 8005ddc:	a336      	add	r3, pc, #216	@ (adr r3, 8005eb8 <__kernel_cos+0x160>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f7fa fa1d 	bl	8000220 <__aeabi_dsub>
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f7fa fbd1 	bl	8000590 <__aeabi_dmul>
 8005dee:	a334      	add	r3, pc, #208	@ (adr r3, 8005ec0 <__kernel_cos+0x168>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fa16 	bl	8000224 <__adddf3>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	f7fa fbc8 	bl	8000590 <__aeabi_dmul>
 8005e00:	4622      	mov	r2, r4
 8005e02:	462b      	mov	r3, r5
 8005e04:	f7fa fbc4 	bl	8000590 <__aeabi_dmul>
 8005e08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	460d      	mov	r5, r1
 8005e10:	4630      	mov	r0, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	f7fa fbbc 	bl	8000590 <__aeabi_dmul>
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7fa f9fe 	bl	8000220 <__aeabi_dsub>
 8005e24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <__kernel_cos+0x17c>)
 8005e26:	4598      	cmp	r8, r3
 8005e28:	4606      	mov	r6, r0
 8005e2a:	460f      	mov	r7, r1
 8005e2c:	d810      	bhi.n	8005e50 <__kernel_cos+0xf8>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4650      	mov	r0, sl
 8005e34:	4659      	mov	r1, fp
 8005e36:	f7fa f9f3 	bl	8000220 <__aeabi_dsub>
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4926      	ldr	r1, [pc, #152]	@ (8005ed8 <__kernel_cos+0x180>)
 8005e3e:	4602      	mov	r2, r0
 8005e40:	2000      	movs	r0, #0
 8005e42:	f7fa f9ed 	bl	8000220 <__aeabi_dsub>
 8005e46:	ec41 0b10 	vmov	d0, r0, r1
 8005e4a:	b003      	add	sp, #12
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	4b22      	ldr	r3, [pc, #136]	@ (8005edc <__kernel_cos+0x184>)
 8005e52:	4921      	ldr	r1, [pc, #132]	@ (8005ed8 <__kernel_cos+0x180>)
 8005e54:	4598      	cmp	r8, r3
 8005e56:	bf8c      	ite	hi
 8005e58:	4d21      	ldrhi	r5, [pc, #132]	@ (8005ee0 <__kernel_cos+0x188>)
 8005e5a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005e5e:	2400      	movs	r4, #0
 8005e60:	4622      	mov	r2, r4
 8005e62:	462b      	mov	r3, r5
 8005e64:	2000      	movs	r0, #0
 8005e66:	f7fa f9db 	bl	8000220 <__aeabi_dsub>
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	4689      	mov	r9, r1
 8005e70:	462b      	mov	r3, r5
 8005e72:	4650      	mov	r0, sl
 8005e74:	4659      	mov	r1, fp
 8005e76:	f7fa f9d3 	bl	8000220 <__aeabi_dsub>
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	f7fa f9cf 	bl	8000220 <__aeabi_dsub>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	e7da      	b.n	8005e42 <__kernel_cos+0xea>
 8005e8c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005ec8 <__kernel_cos+0x170>
 8005e90:	e7db      	b.n	8005e4a <__kernel_cos+0xf2>
 8005e92:	bf00      	nop
 8005e94:	f3af 8000 	nop.w
 8005e98:	be8838d4 	.word	0xbe8838d4
 8005e9c:	bda8fae9 	.word	0xbda8fae9
 8005ea0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ea4:	3e21ee9e 	.word	0x3e21ee9e
 8005ea8:	809c52ad 	.word	0x809c52ad
 8005eac:	3e927e4f 	.word	0x3e927e4f
 8005eb0:	19cb1590 	.word	0x19cb1590
 8005eb4:	3efa01a0 	.word	0x3efa01a0
 8005eb8:	16c15177 	.word	0x16c15177
 8005ebc:	3f56c16c 	.word	0x3f56c16c
 8005ec0:	5555554c 	.word	0x5555554c
 8005ec4:	3fa55555 	.word	0x3fa55555
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	3fe00000 	.word	0x3fe00000
 8005ed4:	3fd33332 	.word	0x3fd33332
 8005ed8:	3ff00000 	.word	0x3ff00000
 8005edc:	3fe90000 	.word	0x3fe90000
 8005ee0:	3fd20000 	.word	0x3fd20000
 8005ee4:	00000000 	.word	0x00000000

08005ee8 <__kernel_sin>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	ec55 4b10 	vmov	r4, r5, d0
 8005ef0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005efa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005efe:	4680      	mov	r8, r0
 8005f00:	d205      	bcs.n	8005f0e <__kernel_sin+0x26>
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fddd 	bl	8000ac4 <__aeabi_d2iz>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d052      	beq.n	8005fb4 <__kernel_sin+0xcc>
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	4620      	mov	r0, r4
 8005f14:	4629      	mov	r1, r5
 8005f16:	f7fa fb3b 	bl	8000590 <__aeabi_dmul>
 8005f1a:	4682      	mov	sl, r0
 8005f1c:	468b      	mov	fp, r1
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa fb33 	bl	8000590 <__aeabi_dmul>
 8005f2a:	a342      	add	r3, pc, #264	@ (adr r3, 8006034 <__kernel_sin+0x14c>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	e9cd 0100 	strd	r0, r1, [sp]
 8005f34:	4650      	mov	r0, sl
 8005f36:	4659      	mov	r1, fp
 8005f38:	f7fa fb2a 	bl	8000590 <__aeabi_dmul>
 8005f3c:	a33f      	add	r3, pc, #252	@ (adr r3, 800603c <__kernel_sin+0x154>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f7fa f96d 	bl	8000220 <__aeabi_dsub>
 8005f46:	4652      	mov	r2, sl
 8005f48:	465b      	mov	r3, fp
 8005f4a:	f7fa fb21 	bl	8000590 <__aeabi_dmul>
 8005f4e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006044 <__kernel_sin+0x15c>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa f966 	bl	8000224 <__adddf3>
 8005f58:	4652      	mov	r2, sl
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	f7fa fb18 	bl	8000590 <__aeabi_dmul>
 8005f60:	a33a      	add	r3, pc, #232	@ (adr r3, 800604c <__kernel_sin+0x164>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa f95b 	bl	8000220 <__aeabi_dsub>
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	f7fa fb0f 	bl	8000590 <__aeabi_dmul>
 8005f72:	a338      	add	r3, pc, #224	@ (adr r3, 8006054 <__kernel_sin+0x16c>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f954 	bl	8000224 <__adddf3>
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	f1b8 0f00 	cmp.w	r8, #0
 8005f84:	d11b      	bne.n	8005fbe <__kernel_sin+0xd6>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	f7fa faff 	bl	8000590 <__aeabi_dmul>
 8005f92:	a325      	add	r3, pc, #148	@ (adr r3, 8006028 <__kernel_sin+0x140>)
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f7fa f942 	bl	8000220 <__aeabi_dsub>
 8005f9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa0:	f7fa faf6 	bl	8000590 <__aeabi_dmul>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa f93a 	bl	8000224 <__adddf3>
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	ec45 4b10 	vmov	d0, r4, r5
 8005fb8:	b005      	add	sp, #20
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <__kernel_sin+0x148>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f7fa fae3 	bl	8000590 <__aeabi_dmul>
 8005fca:	4632      	mov	r2, r6
 8005fcc:	4680      	mov	r8, r0
 8005fce:	4689      	mov	r9, r1
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fd6:	f7fa fadb 	bl	8000590 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4640      	mov	r0, r8
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	f7fa f91d 	bl	8000220 <__aeabi_dsub>
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	465b      	mov	r3, fp
 8005fea:	f7fa fad1 	bl	8000590 <__aeabi_dmul>
 8005fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ff2:	f7fa f915 	bl	8000220 <__aeabi_dsub>
 8005ff6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006028 <__kernel_sin+0x140>)
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	460f      	mov	r7, r1
 8006000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006004:	f7fa fac4 	bl	8000590 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fa f908 	bl	8000224 <__adddf3>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4620      	mov	r0, r4
 800601a:	4629      	mov	r1, r5
 800601c:	f7fa f900 	bl	8000220 <__aeabi_dsub>
 8006020:	e7c6      	b.n	8005fb0 <__kernel_sin+0xc8>
 8006022:	bf00      	nop
 8006024:	f3af 8000 	nop.w
 8006028:	55555549 	.word	0x55555549
 800602c:	3fc55555 	.word	0x3fc55555
 8006030:	3fe00000 	.word	0x3fe00000
 8006034:	5acfd57c 	.word	0x5acfd57c
 8006038:	3de5d93a 	.word	0x3de5d93a
 800603c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006040:	3e5ae5e6 	.word	0x3e5ae5e6
 8006044:	57b1fe7d 	.word	0x57b1fe7d
 8006048:	3ec71de3 	.word	0x3ec71de3
 800604c:	19c161d5 	.word	0x19c161d5
 8006050:	3f2a01a0 	.word	0x3f2a01a0
 8006054:	1110f8a6 	.word	0x1110f8a6
 8006058:	3f811111 	.word	0x3f811111
 800605c:	00000000 	.word	0x00000000

08006060 <__ieee754_rem_pio2>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	ec57 6b10 	vmov	r6, r7, d0
 8006068:	4bc5      	ldr	r3, [pc, #788]	@ (8006380 <__ieee754_rem_pio2+0x320>)
 800606a:	b08d      	sub	sp, #52	@ 0x34
 800606c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006070:	4598      	cmp	r8, r3
 8006072:	4604      	mov	r4, r0
 8006074:	9704      	str	r7, [sp, #16]
 8006076:	d807      	bhi.n	8006088 <__ieee754_rem_pio2+0x28>
 8006078:	2200      	movs	r2, #0
 800607a:	2300      	movs	r3, #0
 800607c:	ed80 0b00 	vstr	d0, [r0]
 8006080:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006084:	2500      	movs	r5, #0
 8006086:	e028      	b.n	80060da <__ieee754_rem_pio2+0x7a>
 8006088:	4bbe      	ldr	r3, [pc, #760]	@ (8006384 <__ieee754_rem_pio2+0x324>)
 800608a:	4598      	cmp	r8, r3
 800608c:	d878      	bhi.n	8006180 <__ieee754_rem_pio2+0x120>
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	4dbd      	ldr	r5, [pc, #756]	@ (8006388 <__ieee754_rem_pio2+0x328>)
 8006092:	2b00      	cmp	r3, #0
 8006094:	4630      	mov	r0, r6
 8006096:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006348 <__ieee754_rem_pio2+0x2e8>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	4639      	mov	r1, r7
 800609e:	dd38      	ble.n	8006112 <__ieee754_rem_pio2+0xb2>
 80060a0:	f7fa f8be 	bl	8000220 <__aeabi_dsub>
 80060a4:	45a8      	cmp	r8, r5
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	d01a      	beq.n	80060e2 <__ieee754_rem_pio2+0x82>
 80060ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x2f0>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f8b5 	bl	8000220 <__aeabi_dsub>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4680      	mov	r8, r0
 80060bc:	4689      	mov	r9, r1
 80060be:	4630      	mov	r0, r6
 80060c0:	4639      	mov	r1, r7
 80060c2:	f7fa f8ad 	bl	8000220 <__aeabi_dsub>
 80060c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x2f0>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f7fa f8a8 	bl	8000220 <__aeabi_dsub>
 80060d0:	e9c4 8900 	strd	r8, r9, [r4]
 80060d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060d8:	2501      	movs	r5, #1
 80060da:	4628      	mov	r0, r5
 80060dc:	b00d      	add	sp, #52	@ 0x34
 80060de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006358 <__ieee754_rem_pio2+0x2f8>)
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f7fa f89a 	bl	8000220 <__aeabi_dsub>
 80060ec:	a39c      	add	r3, pc, #624	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x300>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	f7fa f893 	bl	8000220 <__aeabi_dsub>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4680      	mov	r8, r0
 8006100:	4689      	mov	r9, r1
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa f88b 	bl	8000220 <__aeabi_dsub>
 800610a:	a395      	add	r3, pc, #596	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x300>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	e7dc      	b.n	80060cc <__ieee754_rem_pio2+0x6c>
 8006112:	f7fa f887 	bl	8000224 <__adddf3>
 8006116:	45a8      	cmp	r8, r5
 8006118:	4606      	mov	r6, r0
 800611a:	460f      	mov	r7, r1
 800611c:	d018      	beq.n	8006150 <__ieee754_rem_pio2+0xf0>
 800611e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x2f0>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f7fa f87e 	bl	8000224 <__adddf3>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4680      	mov	r8, r0
 800612e:	4689      	mov	r9, r1
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa f874 	bl	8000220 <__aeabi_dsub>
 8006138:	a385      	add	r3, pc, #532	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x2f0>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa f871 	bl	8000224 <__adddf3>
 8006142:	f04f 35ff 	mov.w	r5, #4294967295
 8006146:	e9c4 8900 	strd	r8, r9, [r4]
 800614a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800614e:	e7c4      	b.n	80060da <__ieee754_rem_pio2+0x7a>
 8006150:	a381      	add	r3, pc, #516	@ (adr r3, 8006358 <__ieee754_rem_pio2+0x2f8>)
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f7fa f865 	bl	8000224 <__adddf3>
 800615a:	a381      	add	r3, pc, #516	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x300>)
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	4606      	mov	r6, r0
 8006162:	460f      	mov	r7, r1
 8006164:	f7fa f85e 	bl	8000224 <__adddf3>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4680      	mov	r8, r0
 800616e:	4689      	mov	r9, r1
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa f854 	bl	8000220 <__aeabi_dsub>
 8006178:	a379      	add	r3, pc, #484	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x300>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	e7de      	b.n	800613e <__ieee754_rem_pio2+0xde>
 8006180:	4b82      	ldr	r3, [pc, #520]	@ (800638c <__ieee754_rem_pio2+0x32c>)
 8006182:	4598      	cmp	r8, r3
 8006184:	f200 80d1 	bhi.w	800632a <__ieee754_rem_pio2+0x2ca>
 8006188:	f000 f966 	bl	8006458 <fabs>
 800618c:	ec57 6b10 	vmov	r6, r7, d0
 8006190:	a375      	add	r3, pc, #468	@ (adr r3, 8006368 <__ieee754_rem_pio2+0x308>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa f9f9 	bl	8000590 <__aeabi_dmul>
 800619e:	4b7c      	ldr	r3, [pc, #496]	@ (8006390 <__ieee754_rem_pio2+0x330>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fa f83f 	bl	8000224 <__adddf3>
 80061a6:	f7fa fc8d 	bl	8000ac4 <__aeabi_d2iz>
 80061aa:	4605      	mov	r5, r0
 80061ac:	f7fa f986 	bl	80004bc <__aeabi_i2d>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b8:	a363      	add	r3, pc, #396	@ (adr r3, 8006348 <__ieee754_rem_pio2+0x2e8>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fa f9e7 	bl	8000590 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4630      	mov	r0, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa f829 	bl	8000220 <__aeabi_dsub>
 80061ce:	a360      	add	r3, pc, #384	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x2f0>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	4682      	mov	sl, r0
 80061d6:	468b      	mov	fp, r1
 80061d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061dc:	f7fa f9d8 	bl	8000590 <__aeabi_dmul>
 80061e0:	2d1f      	cmp	r5, #31
 80061e2:	4606      	mov	r6, r0
 80061e4:	460f      	mov	r7, r1
 80061e6:	dc0c      	bgt.n	8006202 <__ieee754_rem_pio2+0x1a2>
 80061e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006394 <__ieee754_rem_pio2+0x334>)
 80061ea:	1e6a      	subs	r2, r5, #1
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	4543      	cmp	r3, r8
 80061f2:	d006      	beq.n	8006202 <__ieee754_rem_pio2+0x1a2>
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa f810 	bl	8000220 <__aeabi_dsub>
 8006200:	e00e      	b.n	8006220 <__ieee754_rem_pio2+0x1c0>
 8006202:	463b      	mov	r3, r7
 8006204:	4632      	mov	r2, r6
 8006206:	4650      	mov	r0, sl
 8006208:	4659      	mov	r1, fp
 800620a:	f7fa f809 	bl	8000220 <__aeabi_dsub>
 800620e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006218:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800621c:	2b10      	cmp	r3, #16
 800621e:	dc02      	bgt.n	8006226 <__ieee754_rem_pio2+0x1c6>
 8006220:	e9c4 0100 	strd	r0, r1, [r4]
 8006224:	e039      	b.n	800629a <__ieee754_rem_pio2+0x23a>
 8006226:	a34c      	add	r3, pc, #304	@ (adr r3, 8006358 <__ieee754_rem_pio2+0x2f8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006230:	f7fa f9ae 	bl	8000590 <__aeabi_dmul>
 8006234:	4606      	mov	r6, r0
 8006236:	460f      	mov	r7, r1
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4650      	mov	r0, sl
 800623e:	4659      	mov	r1, fp
 8006240:	f7f9 ffee 	bl	8000220 <__aeabi_dsub>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4680      	mov	r8, r0
 800624a:	4689      	mov	r9, r1
 800624c:	4650      	mov	r0, sl
 800624e:	4659      	mov	r1, fp
 8006250:	f7f9 ffe6 	bl	8000220 <__aeabi_dsub>
 8006254:	4632      	mov	r2, r6
 8006256:	463b      	mov	r3, r7
 8006258:	f7f9 ffe2 	bl	8000220 <__aeabi_dsub>
 800625c:	a340      	add	r3, pc, #256	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x300>)
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626a:	f7fa f991 	bl	8000590 <__aeabi_dmul>
 800626e:	4632      	mov	r2, r6
 8006270:	463b      	mov	r3, r7
 8006272:	f7f9 ffd5 	bl	8000220 <__aeabi_dsub>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4606      	mov	r6, r0
 800627c:	460f      	mov	r7, r1
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7f9 ffcd 	bl	8000220 <__aeabi_dsub>
 8006286:	9a05      	ldr	r2, [sp, #20]
 8006288:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b31      	cmp	r3, #49	@ 0x31
 8006290:	dc20      	bgt.n	80062d4 <__ieee754_rem_pio2+0x274>
 8006292:	e9c4 0100 	strd	r0, r1, [r4]
 8006296:	46c2      	mov	sl, r8
 8006298:	46cb      	mov	fp, r9
 800629a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800629e:	4650      	mov	r0, sl
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	4659      	mov	r1, fp
 80062a6:	f7f9 ffbb 	bl	8000220 <__aeabi_dsub>
 80062aa:	463b      	mov	r3, r7
 80062ac:	4632      	mov	r2, r6
 80062ae:	f7f9 ffb7 	bl	8000220 <__aeabi_dsub>
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062ba:	f6bf af0e 	bge.w	80060da <__ieee754_rem_pio2+0x7a>
 80062be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062c8:	f8c4 8000 	str.w	r8, [r4]
 80062cc:	60a0      	str	r0, [r4, #8]
 80062ce:	60e3      	str	r3, [r4, #12]
 80062d0:	426d      	negs	r5, r5
 80062d2:	e702      	b.n	80060da <__ieee754_rem_pio2+0x7a>
 80062d4:	a326      	add	r3, pc, #152	@ (adr r3, 8006370 <__ieee754_rem_pio2+0x310>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062de:	f7fa f957 	bl	8000590 <__aeabi_dmul>
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7f9 ff97 	bl	8000220 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4682      	mov	sl, r0
 80062f8:	468b      	mov	fp, r1
 80062fa:	4640      	mov	r0, r8
 80062fc:	4649      	mov	r1, r9
 80062fe:	f7f9 ff8f 	bl	8000220 <__aeabi_dsub>
 8006302:	4632      	mov	r2, r6
 8006304:	463b      	mov	r3, r7
 8006306:	f7f9 ff8b 	bl	8000220 <__aeabi_dsub>
 800630a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006378 <__ieee754_rem_pio2+0x318>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	4606      	mov	r6, r0
 8006312:	460f      	mov	r7, r1
 8006314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006318:	f7fa f93a 	bl	8000590 <__aeabi_dmul>
 800631c:	4632      	mov	r2, r6
 800631e:	463b      	mov	r3, r7
 8006320:	f7f9 ff7e 	bl	8000220 <__aeabi_dsub>
 8006324:	4606      	mov	r6, r0
 8006326:	460f      	mov	r7, r1
 8006328:	e764      	b.n	80061f4 <__ieee754_rem_pio2+0x194>
 800632a:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <__ieee754_rem_pio2+0x338>)
 800632c:	4598      	cmp	r8, r3
 800632e:	d935      	bls.n	800639c <__ieee754_rem_pio2+0x33c>
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	4630      	mov	r0, r6
 8006336:	4639      	mov	r1, r7
 8006338:	f7f9 ff72 	bl	8000220 <__aeabi_dsub>
 800633c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006340:	e9c4 0100 	strd	r0, r1, [r4]
 8006344:	e69e      	b.n	8006084 <__ieee754_rem_pio2+0x24>
 8006346:	bf00      	nop
 8006348:	54400000 	.word	0x54400000
 800634c:	3ff921fb 	.word	0x3ff921fb
 8006350:	1a626331 	.word	0x1a626331
 8006354:	3dd0b461 	.word	0x3dd0b461
 8006358:	1a600000 	.word	0x1a600000
 800635c:	3dd0b461 	.word	0x3dd0b461
 8006360:	2e037073 	.word	0x2e037073
 8006364:	3ba3198a 	.word	0x3ba3198a
 8006368:	6dc9c883 	.word	0x6dc9c883
 800636c:	3fe45f30 	.word	0x3fe45f30
 8006370:	2e000000 	.word	0x2e000000
 8006374:	3ba3198a 	.word	0x3ba3198a
 8006378:	252049c1 	.word	0x252049c1
 800637c:	397b839a 	.word	0x397b839a
 8006380:	3fe921fb 	.word	0x3fe921fb
 8006384:	4002d97b 	.word	0x4002d97b
 8006388:	3ff921fb 	.word	0x3ff921fb
 800638c:	413921fb 	.word	0x413921fb
 8006390:	3fe00000 	.word	0x3fe00000
 8006394:	0800ab8c 	.word	0x0800ab8c
 8006398:	7fefffff 	.word	0x7fefffff
 800639c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80063a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80063a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80063a8:	4630      	mov	r0, r6
 80063aa:	460f      	mov	r7, r1
 80063ac:	f7fa fb8a 	bl	8000ac4 <__aeabi_d2iz>
 80063b0:	f7fa f884 	bl	80004bc <__aeabi_i2d>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063c0:	f7f9 ff2e 	bl	8000220 <__aeabi_dsub>
 80063c4:	4b22      	ldr	r3, [pc, #136]	@ (8006450 <__ieee754_rem_pio2+0x3f0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	f7fa f8e2 	bl	8000590 <__aeabi_dmul>
 80063cc:	460f      	mov	r7, r1
 80063ce:	4606      	mov	r6, r0
 80063d0:	f7fa fb78 	bl	8000ac4 <__aeabi_d2iz>
 80063d4:	f7fa f872 	bl	80004bc <__aeabi_i2d>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063e4:	f7f9 ff1c 	bl	8000220 <__aeabi_dsub>
 80063e8:	4b19      	ldr	r3, [pc, #100]	@ (8006450 <__ieee754_rem_pio2+0x3f0>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	f7fa f8d0 	bl	8000590 <__aeabi_dmul>
 80063f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80063f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80063f8:	f04f 0803 	mov.w	r8, #3
 80063fc:	2600      	movs	r6, #0
 80063fe:	2700      	movs	r7, #0
 8006400:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	46c2      	mov	sl, r8
 800640a:	f108 38ff 	add.w	r8, r8, #4294967295
 800640e:	f7fa fb27 	bl	8000a60 <__aeabi_dcmpeq>
 8006412:	2800      	cmp	r0, #0
 8006414:	d1f4      	bne.n	8006400 <__ieee754_rem_pio2+0x3a0>
 8006416:	4b0f      	ldr	r3, [pc, #60]	@ (8006454 <__ieee754_rem_pio2+0x3f4>)
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	2302      	movs	r3, #2
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	462a      	mov	r2, r5
 8006420:	4653      	mov	r3, sl
 8006422:	4621      	mov	r1, r4
 8006424:	a806      	add	r0, sp, #24
 8006426:	f000 f81f 	bl	8006468 <__kernel_rem_pio2>
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	4605      	mov	r5, r0
 8006430:	f6bf ae53 	bge.w	80060da <__ieee754_rem_pio2+0x7a>
 8006434:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006438:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800643c:	e9c4 2300 	strd	r2, r3, [r4]
 8006440:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006444:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006448:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800644c:	e740      	b.n	80062d0 <__ieee754_rem_pio2+0x270>
 800644e:	bf00      	nop
 8006450:	41700000 	.word	0x41700000
 8006454:	0800ac0c 	.word	0x0800ac0c

08006458 <fabs>:
 8006458:	ec51 0b10 	vmov	r0, r1, d0
 800645c:	4602      	mov	r2, r0
 800645e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006462:	ec43 2b10 	vmov	d0, r2, r3
 8006466:	4770      	bx	lr

08006468 <__kernel_rem_pio2>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	ed2d 8b02 	vpush	{d8}
 8006470:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006474:	f112 0f14 	cmn.w	r2, #20
 8006478:	9306      	str	r3, [sp, #24]
 800647a:	9104      	str	r1, [sp, #16]
 800647c:	4bbe      	ldr	r3, [pc, #760]	@ (8006778 <__kernel_rem_pio2+0x310>)
 800647e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006480:	9008      	str	r0, [sp, #32]
 8006482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	f103 33ff 	add.w	r3, r3, #4294967295
 800648e:	bfa8      	it	ge
 8006490:	1ed4      	subge	r4, r2, #3
 8006492:	9305      	str	r3, [sp, #20]
 8006494:	bfb2      	itee	lt
 8006496:	2400      	movlt	r4, #0
 8006498:	2318      	movge	r3, #24
 800649a:	fb94 f4f3 	sdivge	r4, r4, r3
 800649e:	f06f 0317 	mvn.w	r3, #23
 80064a2:	fb04 3303 	mla	r3, r4, r3, r3
 80064a6:	eb03 0b02 	add.w	fp, r3, r2
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	9a05      	ldr	r2, [sp, #20]
 80064ae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006768 <__kernel_rem_pio2+0x300>
 80064b2:	eb03 0802 	add.w	r8, r3, r2
 80064b6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80064b8:	1aa7      	subs	r7, r4, r2
 80064ba:	ae20      	add	r6, sp, #128	@ 0x80
 80064bc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80064c0:	2500      	movs	r5, #0
 80064c2:	4545      	cmp	r5, r8
 80064c4:	dd13      	ble.n	80064ee <__kernel_rem_pio2+0x86>
 80064c6:	9b06      	ldr	r3, [sp, #24]
 80064c8:	aa20      	add	r2, sp, #128	@ 0x80
 80064ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80064ce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80064d2:	f04f 0800 	mov.w	r8, #0
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	4598      	cmp	r8, r3
 80064da:	dc31      	bgt.n	8006540 <__kernel_rem_pio2+0xd8>
 80064dc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006768 <__kernel_rem_pio2+0x300>
 80064e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064e8:	462f      	mov	r7, r5
 80064ea:	2600      	movs	r6, #0
 80064ec:	e01b      	b.n	8006526 <__kernel_rem_pio2+0xbe>
 80064ee:	42ef      	cmn	r7, r5
 80064f0:	d407      	bmi.n	8006502 <__kernel_rem_pio2+0x9a>
 80064f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80064f6:	f7f9 ffe1 	bl	80004bc <__aeabi_i2d>
 80064fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80064fe:	3501      	adds	r5, #1
 8006500:	e7df      	b.n	80064c2 <__kernel_rem_pio2+0x5a>
 8006502:	ec51 0b18 	vmov	r0, r1, d8
 8006506:	e7f8      	b.n	80064fa <__kernel_rem_pio2+0x92>
 8006508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800650c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006510:	f7fa f83e 	bl	8000590 <__aeabi_dmul>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651c:	f7f9 fe82 	bl	8000224 <__adddf3>
 8006520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006524:	3601      	adds	r6, #1
 8006526:	9b05      	ldr	r3, [sp, #20]
 8006528:	429e      	cmp	r6, r3
 800652a:	f1a7 0708 	sub.w	r7, r7, #8
 800652e:	ddeb      	ble.n	8006508 <__kernel_rem_pio2+0xa0>
 8006530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006534:	f108 0801 	add.w	r8, r8, #1
 8006538:	ecaa 7b02 	vstmia	sl!, {d7}
 800653c:	3508      	adds	r5, #8
 800653e:	e7ca      	b.n	80064d6 <__kernel_rem_pio2+0x6e>
 8006540:	9b00      	ldr	r3, [sp, #0]
 8006542:	f8dd 8000 	ldr.w	r8, [sp]
 8006546:	aa0c      	add	r2, sp, #48	@ 0x30
 8006548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800654c:	930a      	str	r3, [sp, #40]	@ 0x28
 800654e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006550:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006554:	9309      	str	r3, [sp, #36]	@ 0x24
 8006556:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800655a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800655c:	ab98      	add	r3, sp, #608	@ 0x260
 800655e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006562:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006566:	ed8d 7b02 	vstr	d7, [sp, #8]
 800656a:	ac0c      	add	r4, sp, #48	@ 0x30
 800656c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800656e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006572:	46a1      	mov	r9, r4
 8006574:	46c2      	mov	sl, r8
 8006576:	f1ba 0f00 	cmp.w	sl, #0
 800657a:	f1a5 0508 	sub.w	r5, r5, #8
 800657e:	dc77      	bgt.n	8006670 <__kernel_rem_pio2+0x208>
 8006580:	4658      	mov	r0, fp
 8006582:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006586:	f000 fac7 	bl	8006b18 <scalbn>
 800658a:	ec57 6b10 	vmov	r6, r7, d0
 800658e:	2200      	movs	r2, #0
 8006590:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7f9 fffa 	bl	8000590 <__aeabi_dmul>
 800659c:	ec41 0b10 	vmov	d0, r0, r1
 80065a0:	f000 fb3a 	bl	8006c18 <floor>
 80065a4:	4b75      	ldr	r3, [pc, #468]	@ (800677c <__kernel_rem_pio2+0x314>)
 80065a6:	ec51 0b10 	vmov	r0, r1, d0
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7f9 fff0 	bl	8000590 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7f9 fe32 	bl	8000220 <__aeabi_dsub>
 80065bc:	460f      	mov	r7, r1
 80065be:	4606      	mov	r6, r0
 80065c0:	f7fa fa80 	bl	8000ac4 <__aeabi_d2iz>
 80065c4:	9002      	str	r0, [sp, #8]
 80065c6:	f7f9 ff79 	bl	80004bc <__aeabi_i2d>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7f9 fe25 	bl	8000220 <__aeabi_dsub>
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	dd6c      	ble.n	80066ba <__kernel_rem_pio2+0x252>
 80065e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80065e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80065e6:	9d02      	ldr	r5, [sp, #8]
 80065e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065ec:	f1cb 0018 	rsb	r0, fp, #24
 80065f0:	fa43 f200 	asr.w	r2, r3, r0
 80065f4:	4415      	add	r5, r2
 80065f6:	4082      	lsls	r2, r0
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	aa0c      	add	r2, sp, #48	@ 0x30
 80065fc:	9502      	str	r5, [sp, #8]
 80065fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006602:	f1cb 0217 	rsb	r2, fp, #23
 8006606:	fa43 f902 	asr.w	r9, r3, r2
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	dd64      	ble.n	80066da <__kernel_rem_pio2+0x272>
 8006610:	9b02      	ldr	r3, [sp, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	3301      	adds	r3, #1
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	4615      	mov	r5, r2
 800661a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800661e:	4590      	cmp	r8, r2
 8006620:	f300 80b8 	bgt.w	8006794 <__kernel_rem_pio2+0x32c>
 8006624:	f1bb 0f00 	cmp.w	fp, #0
 8006628:	dd07      	ble.n	800663a <__kernel_rem_pio2+0x1d2>
 800662a:	f1bb 0f01 	cmp.w	fp, #1
 800662e:	f000 80bf 	beq.w	80067b0 <__kernel_rem_pio2+0x348>
 8006632:	f1bb 0f02 	cmp.w	fp, #2
 8006636:	f000 80c6 	beq.w	80067c6 <__kernel_rem_pio2+0x35e>
 800663a:	f1b9 0f02 	cmp.w	r9, #2
 800663e:	d14c      	bne.n	80066da <__kernel_rem_pio2+0x272>
 8006640:	4632      	mov	r2, r6
 8006642:	463b      	mov	r3, r7
 8006644:	494e      	ldr	r1, [pc, #312]	@ (8006780 <__kernel_rem_pio2+0x318>)
 8006646:	2000      	movs	r0, #0
 8006648:	f7f9 fdea 	bl	8000220 <__aeabi_dsub>
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	2d00      	cmp	r5, #0
 8006652:	d042      	beq.n	80066da <__kernel_rem_pio2+0x272>
 8006654:	4658      	mov	r0, fp
 8006656:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006770 <__kernel_rem_pio2+0x308>
 800665a:	f000 fa5d 	bl	8006b18 <scalbn>
 800665e:	4630      	mov	r0, r6
 8006660:	4639      	mov	r1, r7
 8006662:	ec53 2b10 	vmov	r2, r3, d0
 8006666:	f7f9 fddb 	bl	8000220 <__aeabi_dsub>
 800666a:	4606      	mov	r6, r0
 800666c:	460f      	mov	r7, r1
 800666e:	e034      	b.n	80066da <__kernel_rem_pio2+0x272>
 8006670:	4b44      	ldr	r3, [pc, #272]	@ (8006784 <__kernel_rem_pio2+0x31c>)
 8006672:	2200      	movs	r2, #0
 8006674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006678:	f7f9 ff8a 	bl	8000590 <__aeabi_dmul>
 800667c:	f7fa fa22 	bl	8000ac4 <__aeabi_d2iz>
 8006680:	f7f9 ff1c 	bl	80004bc <__aeabi_i2d>
 8006684:	4b40      	ldr	r3, [pc, #256]	@ (8006788 <__kernel_rem_pio2+0x320>)
 8006686:	2200      	movs	r2, #0
 8006688:	4606      	mov	r6, r0
 800668a:	460f      	mov	r7, r1
 800668c:	f7f9 ff80 	bl	8000590 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006698:	f7f9 fdc2 	bl	8000220 <__aeabi_dsub>
 800669c:	f7fa fa12 	bl	8000ac4 <__aeabi_d2iz>
 80066a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066a4:	f849 0b04 	str.w	r0, [r9], #4
 80066a8:	4639      	mov	r1, r7
 80066aa:	4630      	mov	r0, r6
 80066ac:	f7f9 fdba 	bl	8000224 <__adddf3>
 80066b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b8:	e75d      	b.n	8006576 <__kernel_rem_pio2+0x10e>
 80066ba:	d107      	bne.n	80066cc <__kernel_rem_pio2+0x264>
 80066bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80066c0:	aa0c      	add	r2, sp, #48	@ 0x30
 80066c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80066ca:	e79e      	b.n	800660a <__kernel_rem_pio2+0x1a2>
 80066cc:	4b2f      	ldr	r3, [pc, #188]	@ (800678c <__kernel_rem_pio2+0x324>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	f7fa f9e4 	bl	8000a9c <__aeabi_dcmpge>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d143      	bne.n	8006760 <__kernel_rem_pio2+0x2f8>
 80066d8:	4681      	mov	r9, r0
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7fa f9bd 	bl	8000a60 <__aeabi_dcmpeq>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f000 80bf 	beq.w	800686a <__kernel_rem_pio2+0x402>
 80066ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80066f0:	2200      	movs	r2, #0
 80066f2:	9900      	ldr	r1, [sp, #0]
 80066f4:	428b      	cmp	r3, r1
 80066f6:	da6e      	bge.n	80067d6 <__kernel_rem_pio2+0x36e>
 80066f8:	2a00      	cmp	r2, #0
 80066fa:	f000 8089 	beq.w	8006810 <__kernel_rem_pio2+0x3a8>
 80066fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006702:	ab0c      	add	r3, sp, #48	@ 0x30
 8006704:	f1ab 0b18 	sub.w	fp, fp, #24
 8006708:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f6      	beq.n	80066fe <__kernel_rem_pio2+0x296>
 8006710:	4658      	mov	r0, fp
 8006712:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006770 <__kernel_rem_pio2+0x308>
 8006716:	f000 f9ff 	bl	8006b18 <scalbn>
 800671a:	f108 0301 	add.w	r3, r8, #1
 800671e:	00da      	lsls	r2, r3, #3
 8006720:	9205      	str	r2, [sp, #20]
 8006722:	ec55 4b10 	vmov	r4, r5, d0
 8006726:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006728:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006784 <__kernel_rem_pio2+0x31c>
 800672c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006730:	4646      	mov	r6, r8
 8006732:	f04f 0a00 	mov.w	sl, #0
 8006736:	2e00      	cmp	r6, #0
 8006738:	f280 80cf 	bge.w	80068da <__kernel_rem_pio2+0x472>
 800673c:	4644      	mov	r4, r8
 800673e:	2c00      	cmp	r4, #0
 8006740:	f2c0 80fd 	blt.w	800693e <__kernel_rem_pio2+0x4d6>
 8006744:	4b12      	ldr	r3, [pc, #72]	@ (8006790 <__kernel_rem_pio2+0x328>)
 8006746:	461f      	mov	r7, r3
 8006748:	ab70      	add	r3, sp, #448	@ 0x1c0
 800674a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800674e:	9306      	str	r3, [sp, #24]
 8006750:	f04f 0a00 	mov.w	sl, #0
 8006754:	f04f 0b00 	mov.w	fp, #0
 8006758:	2600      	movs	r6, #0
 800675a:	eba8 0504 	sub.w	r5, r8, r4
 800675e:	e0e2      	b.n	8006926 <__kernel_rem_pio2+0x4be>
 8006760:	f04f 0902 	mov.w	r9, #2
 8006764:	e754      	b.n	8006610 <__kernel_rem_pio2+0x1a8>
 8006766:	bf00      	nop
	...
 8006774:	3ff00000 	.word	0x3ff00000
 8006778:	0800ad58 	.word	0x0800ad58
 800677c:	40200000 	.word	0x40200000
 8006780:	3ff00000 	.word	0x3ff00000
 8006784:	3e700000 	.word	0x3e700000
 8006788:	41700000 	.word	0x41700000
 800678c:	3fe00000 	.word	0x3fe00000
 8006790:	0800ad18 	.word	0x0800ad18
 8006794:	f854 3b04 	ldr.w	r3, [r4], #4
 8006798:	b945      	cbnz	r5, 80067ac <__kernel_rem_pio2+0x344>
 800679a:	b123      	cbz	r3, 80067a6 <__kernel_rem_pio2+0x33e>
 800679c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80067a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80067a4:	2301      	movs	r3, #1
 80067a6:	3201      	adds	r2, #1
 80067a8:	461d      	mov	r5, r3
 80067aa:	e738      	b.n	800661e <__kernel_rem_pio2+0x1b6>
 80067ac:	1acb      	subs	r3, r1, r3
 80067ae:	e7f7      	b.n	80067a0 <__kernel_rem_pio2+0x338>
 80067b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80067b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80067be:	a90c      	add	r1, sp, #48	@ 0x30
 80067c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80067c4:	e739      	b.n	800663a <__kernel_rem_pio2+0x1d2>
 80067c6:	f108 32ff 	add.w	r2, r8, #4294967295
 80067ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80067d4:	e7f3      	b.n	80067be <__kernel_rem_pio2+0x356>
 80067d6:	a90c      	add	r1, sp, #48	@ 0x30
 80067d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80067dc:	3b01      	subs	r3, #1
 80067de:	430a      	orrs	r2, r1
 80067e0:	e787      	b.n	80066f2 <__kernel_rem_pio2+0x28a>
 80067e2:	3401      	adds	r4, #1
 80067e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d0fa      	beq.n	80067e2 <__kernel_rem_pio2+0x37a>
 80067ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067f2:	eb0d 0503 	add.w	r5, sp, r3
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	aa20      	add	r2, sp, #128	@ 0x80
 80067fa:	4443      	add	r3, r8
 80067fc:	f108 0701 	add.w	r7, r8, #1
 8006800:	3d98      	subs	r5, #152	@ 0x98
 8006802:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006806:	4444      	add	r4, r8
 8006808:	42bc      	cmp	r4, r7
 800680a:	da04      	bge.n	8006816 <__kernel_rem_pio2+0x3ae>
 800680c:	46a0      	mov	r8, r4
 800680e:	e6a2      	b.n	8006556 <__kernel_rem_pio2+0xee>
 8006810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006812:	2401      	movs	r4, #1
 8006814:	e7e6      	b.n	80067e4 <__kernel_rem_pio2+0x37c>
 8006816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006818:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800681c:	f7f9 fe4e 	bl	80004bc <__aeabi_i2d>
 8006820:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006ae8 <__kernel_rem_pio2+0x680>
 8006824:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006828:	ed8d 7b02 	vstr	d7, [sp, #8]
 800682c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006830:	46b2      	mov	sl, r6
 8006832:	f04f 0800 	mov.w	r8, #0
 8006836:	9b05      	ldr	r3, [sp, #20]
 8006838:	4598      	cmp	r8, r3
 800683a:	dd05      	ble.n	8006848 <__kernel_rem_pio2+0x3e0>
 800683c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006840:	3701      	adds	r7, #1
 8006842:	eca5 7b02 	vstmia	r5!, {d7}
 8006846:	e7df      	b.n	8006808 <__kernel_rem_pio2+0x3a0>
 8006848:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800684c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006850:	f7f9 fe9e 	bl	8000590 <__aeabi_dmul>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685c:	f7f9 fce2 	bl	8000224 <__adddf3>
 8006860:	f108 0801 	add.w	r8, r8, #1
 8006864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006868:	e7e5      	b.n	8006836 <__kernel_rem_pio2+0x3ce>
 800686a:	f1cb 0000 	rsb	r0, fp, #0
 800686e:	ec47 6b10 	vmov	d0, r6, r7
 8006872:	f000 f951 	bl	8006b18 <scalbn>
 8006876:	ec55 4b10 	vmov	r4, r5, d0
 800687a:	4b9d      	ldr	r3, [pc, #628]	@ (8006af0 <__kernel_rem_pio2+0x688>)
 800687c:	2200      	movs	r2, #0
 800687e:	4620      	mov	r0, r4
 8006880:	4629      	mov	r1, r5
 8006882:	f7fa f90b 	bl	8000a9c <__aeabi_dcmpge>
 8006886:	b300      	cbz	r0, 80068ca <__kernel_rem_pio2+0x462>
 8006888:	4b9a      	ldr	r3, [pc, #616]	@ (8006af4 <__kernel_rem_pio2+0x68c>)
 800688a:	2200      	movs	r2, #0
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fe7e 	bl	8000590 <__aeabi_dmul>
 8006894:	f7fa f916 	bl	8000ac4 <__aeabi_d2iz>
 8006898:	4606      	mov	r6, r0
 800689a:	f7f9 fe0f 	bl	80004bc <__aeabi_i2d>
 800689e:	4b94      	ldr	r3, [pc, #592]	@ (8006af0 <__kernel_rem_pio2+0x688>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	f7f9 fe75 	bl	8000590 <__aeabi_dmul>
 80068a6:	460b      	mov	r3, r1
 80068a8:	4602      	mov	r2, r0
 80068aa:	4629      	mov	r1, r5
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7f9 fcb7 	bl	8000220 <__aeabi_dsub>
 80068b2:	f7fa f907 	bl	8000ac4 <__aeabi_d2iz>
 80068b6:	ab0c      	add	r3, sp, #48	@ 0x30
 80068b8:	f10b 0b18 	add.w	fp, fp, #24
 80068bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80068c0:	f108 0801 	add.w	r8, r8, #1
 80068c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80068c8:	e722      	b.n	8006710 <__kernel_rem_pio2+0x2a8>
 80068ca:	4620      	mov	r0, r4
 80068cc:	4629      	mov	r1, r5
 80068ce:	f7fa f8f9 	bl	8000ac4 <__aeabi_d2iz>
 80068d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80068d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80068d8:	e71a      	b.n	8006710 <__kernel_rem_pio2+0x2a8>
 80068da:	ab0c      	add	r3, sp, #48	@ 0x30
 80068dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80068e0:	f7f9 fdec 	bl	80004bc <__aeabi_i2d>
 80068e4:	4622      	mov	r2, r4
 80068e6:	462b      	mov	r3, r5
 80068e8:	f7f9 fe52 	bl	8000590 <__aeabi_dmul>
 80068ec:	4652      	mov	r2, sl
 80068ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80068f2:	465b      	mov	r3, fp
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7f9 fe4a 	bl	8000590 <__aeabi_dmul>
 80068fc:	3e01      	subs	r6, #1
 80068fe:	4604      	mov	r4, r0
 8006900:	460d      	mov	r5, r1
 8006902:	e718      	b.n	8006736 <__kernel_rem_pio2+0x2ce>
 8006904:	9906      	ldr	r1, [sp, #24]
 8006906:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800690a:	9106      	str	r1, [sp, #24]
 800690c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006910:	f7f9 fe3e 	bl	8000590 <__aeabi_dmul>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4650      	mov	r0, sl
 800691a:	4659      	mov	r1, fp
 800691c:	f7f9 fc82 	bl	8000224 <__adddf3>
 8006920:	3601      	adds	r6, #1
 8006922:	4682      	mov	sl, r0
 8006924:	468b      	mov	fp, r1
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	429e      	cmp	r6, r3
 800692a:	dc01      	bgt.n	8006930 <__kernel_rem_pio2+0x4c8>
 800692c:	42b5      	cmp	r5, r6
 800692e:	dae9      	bge.n	8006904 <__kernel_rem_pio2+0x49c>
 8006930:	ab48      	add	r3, sp, #288	@ 0x120
 8006932:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006936:	e9c5 ab00 	strd	sl, fp, [r5]
 800693a:	3c01      	subs	r4, #1
 800693c:	e6ff      	b.n	800673e <__kernel_rem_pio2+0x2d6>
 800693e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006940:	2b02      	cmp	r3, #2
 8006942:	dc0b      	bgt.n	800695c <__kernel_rem_pio2+0x4f4>
 8006944:	2b00      	cmp	r3, #0
 8006946:	dc39      	bgt.n	80069bc <__kernel_rem_pio2+0x554>
 8006948:	d05d      	beq.n	8006a06 <__kernel_rem_pio2+0x59e>
 800694a:	9b02      	ldr	r3, [sp, #8]
 800694c:	f003 0007 	and.w	r0, r3, #7
 8006950:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006954:	ecbd 8b02 	vpop	{d8}
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800695e:	2b03      	cmp	r3, #3
 8006960:	d1f3      	bne.n	800694a <__kernel_rem_pio2+0x4e2>
 8006962:	9b05      	ldr	r3, [sp, #20]
 8006964:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006968:	eb0d 0403 	add.w	r4, sp, r3
 800696c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006970:	4625      	mov	r5, r4
 8006972:	46c2      	mov	sl, r8
 8006974:	f1ba 0f00 	cmp.w	sl, #0
 8006978:	f1a5 0508 	sub.w	r5, r5, #8
 800697c:	dc6b      	bgt.n	8006a56 <__kernel_rem_pio2+0x5ee>
 800697e:	4645      	mov	r5, r8
 8006980:	2d01      	cmp	r5, #1
 8006982:	f1a4 0408 	sub.w	r4, r4, #8
 8006986:	f300 8087 	bgt.w	8006a98 <__kernel_rem_pio2+0x630>
 800698a:	9c05      	ldr	r4, [sp, #20]
 800698c:	ab48      	add	r3, sp, #288	@ 0x120
 800698e:	441c      	add	r4, r3
 8006990:	2000      	movs	r0, #0
 8006992:	2100      	movs	r1, #0
 8006994:	f1b8 0f01 	cmp.w	r8, #1
 8006998:	f300 809c 	bgt.w	8006ad4 <__kernel_rem_pio2+0x66c>
 800699c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80069a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80069a4:	f1b9 0f00 	cmp.w	r9, #0
 80069a8:	f040 80a6 	bne.w	8006af8 <__kernel_rem_pio2+0x690>
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	e9c3 7800 	strd	r7, r8, [r3]
 80069b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80069b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80069ba:	e7c6      	b.n	800694a <__kernel_rem_pio2+0x4e2>
 80069bc:	9d05      	ldr	r5, [sp, #20]
 80069be:	ab48      	add	r3, sp, #288	@ 0x120
 80069c0:	441d      	add	r5, r3
 80069c2:	4644      	mov	r4, r8
 80069c4:	2000      	movs	r0, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	2c00      	cmp	r4, #0
 80069ca:	da35      	bge.n	8006a38 <__kernel_rem_pio2+0x5d0>
 80069cc:	f1b9 0f00 	cmp.w	r9, #0
 80069d0:	d038      	beq.n	8006a44 <__kernel_rem_pio2+0x5dc>
 80069d2:	4602      	mov	r2, r0
 80069d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069d8:	9c04      	ldr	r4, [sp, #16]
 80069da:	e9c4 2300 	strd	r2, r3, [r4]
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80069e6:	f7f9 fc1b 	bl	8000220 <__aeabi_dsub>
 80069ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80069ec:	2401      	movs	r4, #1
 80069ee:	45a0      	cmp	r8, r4
 80069f0:	da2b      	bge.n	8006a4a <__kernel_rem_pio2+0x5e2>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	d002      	beq.n	80069fe <__kernel_rem_pio2+0x596>
 80069f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069fc:	4619      	mov	r1, r3
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006a04:	e7a1      	b.n	800694a <__kernel_rem_pio2+0x4e2>
 8006a06:	9c05      	ldr	r4, [sp, #20]
 8006a08:	ab48      	add	r3, sp, #288	@ 0x120
 8006a0a:	441c      	add	r4, r3
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	2100      	movs	r1, #0
 8006a10:	f1b8 0f00 	cmp.w	r8, #0
 8006a14:	da09      	bge.n	8006a2a <__kernel_rem_pio2+0x5c2>
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	d002      	beq.n	8006a22 <__kernel_rem_pio2+0x5ba>
 8006a1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a20:	4619      	mov	r1, r3
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	e9c3 0100 	strd	r0, r1, [r3]
 8006a28:	e78f      	b.n	800694a <__kernel_rem_pio2+0x4e2>
 8006a2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a2e:	f7f9 fbf9 	bl	8000224 <__adddf3>
 8006a32:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a36:	e7eb      	b.n	8006a10 <__kernel_rem_pio2+0x5a8>
 8006a38:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006a3c:	f7f9 fbf2 	bl	8000224 <__adddf3>
 8006a40:	3c01      	subs	r4, #1
 8006a42:	e7c1      	b.n	80069c8 <__kernel_rem_pio2+0x560>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	e7c6      	b.n	80069d8 <__kernel_rem_pio2+0x570>
 8006a4a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006a4e:	f7f9 fbe9 	bl	8000224 <__adddf3>
 8006a52:	3401      	adds	r4, #1
 8006a54:	e7cb      	b.n	80069ee <__kernel_rem_pio2+0x586>
 8006a56:	ed95 7b00 	vldr	d7, [r5]
 8006a5a:	ed8d 7b00 	vstr	d7, [sp]
 8006a5e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a66:	ec53 2b17 	vmov	r2, r3, d7
 8006a6a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a6e:	f7f9 fbd9 	bl	8000224 <__adddf3>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4606      	mov	r6, r0
 8006a78:	460f      	mov	r7, r1
 8006a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a7e:	f7f9 fbcf 	bl	8000220 <__aeabi_dsub>
 8006a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a86:	f7f9 fbcd 	bl	8000224 <__adddf3>
 8006a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a8e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006a92:	e9c5 6700 	strd	r6, r7, [r5]
 8006a96:	e76d      	b.n	8006974 <__kernel_rem_pio2+0x50c>
 8006a98:	ed94 7b00 	vldr	d7, [r4]
 8006a9c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006aa0:	ec51 0b17 	vmov	r0, r1, d7
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	465b      	mov	r3, fp
 8006aa8:	ed8d 7b00 	vstr	d7, [sp]
 8006aac:	f7f9 fbba 	bl	8000224 <__adddf3>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006abc:	f7f9 fbb0 	bl	8000220 <__aeabi_dsub>
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	f7f9 fbae 	bl	8000224 <__adddf3>
 8006ac8:	3d01      	subs	r5, #1
 8006aca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ace:	e9c4 6700 	strd	r6, r7, [r4]
 8006ad2:	e755      	b.n	8006980 <__kernel_rem_pio2+0x518>
 8006ad4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006ad8:	f7f9 fba4 	bl	8000224 <__adddf3>
 8006adc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ae0:	e758      	b.n	8006994 <__kernel_rem_pio2+0x52c>
 8006ae2:	bf00      	nop
 8006ae4:	f3af 8000 	nop.w
	...
 8006af0:	41700000 	.word	0x41700000
 8006af4:	3e700000 	.word	0x3e700000
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	9a04      	ldr	r2, [sp, #16]
 8006afc:	601f      	str	r7, [r3, #0]
 8006afe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006b02:	605c      	str	r4, [r3, #4]
 8006b04:	609d      	str	r5, [r3, #8]
 8006b06:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006b0a:	60d3      	str	r3, [r2, #12]
 8006b0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b10:	6110      	str	r0, [r2, #16]
 8006b12:	6153      	str	r3, [r2, #20]
 8006b14:	e719      	b.n	800694a <__kernel_rem_pio2+0x4e2>
 8006b16:	bf00      	nop

08006b18 <scalbn>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	ec55 4b10 	vmov	r4, r5, d0
 8006b1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006b22:	4606      	mov	r6, r0
 8006b24:	462b      	mov	r3, r5
 8006b26:	b991      	cbnz	r1, 8006b4e <scalbn+0x36>
 8006b28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006b2c:	4323      	orrs	r3, r4
 8006b2e:	d03d      	beq.n	8006bac <scalbn+0x94>
 8006b30:	4b35      	ldr	r3, [pc, #212]	@ (8006c08 <scalbn+0xf0>)
 8006b32:	4620      	mov	r0, r4
 8006b34:	4629      	mov	r1, r5
 8006b36:	2200      	movs	r2, #0
 8006b38:	f7f9 fd2a 	bl	8000590 <__aeabi_dmul>
 8006b3c:	4b33      	ldr	r3, [pc, #204]	@ (8006c0c <scalbn+0xf4>)
 8006b3e:	429e      	cmp	r6, r3
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	da0f      	bge.n	8006b66 <scalbn+0x4e>
 8006b46:	a328      	add	r3, pc, #160	@ (adr r3, 8006be8 <scalbn+0xd0>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	e01e      	b.n	8006b8c <scalbn+0x74>
 8006b4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006b52:	4291      	cmp	r1, r2
 8006b54:	d10b      	bne.n	8006b6e <scalbn+0x56>
 8006b56:	4622      	mov	r2, r4
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7f9 fb62 	bl	8000224 <__adddf3>
 8006b60:	4604      	mov	r4, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	e022      	b.n	8006bac <scalbn+0x94>
 8006b66:	460b      	mov	r3, r1
 8006b68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006b6c:	3936      	subs	r1, #54	@ 0x36
 8006b6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006b72:	4296      	cmp	r6, r2
 8006b74:	dd0d      	ble.n	8006b92 <scalbn+0x7a>
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	a11d      	add	r1, pc, #116	@ (adr r1, 8006bf0 <scalbn+0xd8>)
 8006b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b7e:	da02      	bge.n	8006b86 <scalbn+0x6e>
 8006b80:	a11d      	add	r1, pc, #116	@ (adr r1, 8006bf8 <scalbn+0xe0>)
 8006b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b86:	a31a      	add	r3, pc, #104	@ (adr r3, 8006bf0 <scalbn+0xd8>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f7f9 fd00 	bl	8000590 <__aeabi_dmul>
 8006b90:	e7e6      	b.n	8006b60 <scalbn+0x48>
 8006b92:	1872      	adds	r2, r6, r1
 8006b94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006b98:	428a      	cmp	r2, r1
 8006b9a:	dcec      	bgt.n	8006b76 <scalbn+0x5e>
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	dd08      	ble.n	8006bb2 <scalbn+0x9a>
 8006ba0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006ba4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006ba8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bac:	ec45 4b10 	vmov	d0, r4, r5
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006bb6:	da08      	bge.n	8006bca <scalbn+0xb2>
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	a10b      	add	r1, pc, #44	@ (adr r1, 8006be8 <scalbn+0xd0>)
 8006bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc0:	dac1      	bge.n	8006b46 <scalbn+0x2e>
 8006bc2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006c00 <scalbn+0xe8>)
 8006bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc8:	e7bd      	b.n	8006b46 <scalbn+0x2e>
 8006bca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006bce:	3236      	adds	r2, #54	@ 0x36
 8006bd0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006bd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <scalbn+0xf8>)
 8006bdc:	4629      	mov	r1, r5
 8006bde:	2200      	movs	r2, #0
 8006be0:	e7d4      	b.n	8006b8c <scalbn+0x74>
 8006be2:	bf00      	nop
 8006be4:	f3af 8000 	nop.w
 8006be8:	c2f8f359 	.word	0xc2f8f359
 8006bec:	01a56e1f 	.word	0x01a56e1f
 8006bf0:	8800759c 	.word	0x8800759c
 8006bf4:	7e37e43c 	.word	0x7e37e43c
 8006bf8:	8800759c 	.word	0x8800759c
 8006bfc:	fe37e43c 	.word	0xfe37e43c
 8006c00:	c2f8f359 	.word	0xc2f8f359
 8006c04:	81a56e1f 	.word	0x81a56e1f
 8006c08:	43500000 	.word	0x43500000
 8006c0c:	ffff3cb0 	.word	0xffff3cb0
 8006c10:	3c900000 	.word	0x3c900000
 8006c14:	00000000 	.word	0x00000000

08006c18 <floor>:
 8006c18:	ec51 0b10 	vmov	r0, r1, d0
 8006c1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c24:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006c28:	2e13      	cmp	r6, #19
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	4680      	mov	r8, r0
 8006c30:	dc34      	bgt.n	8006c9c <floor+0x84>
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	da17      	bge.n	8006c66 <floor+0x4e>
 8006c36:	a332      	add	r3, pc, #200	@ (adr r3, 8006d00 <floor+0xe8>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 faf2 	bl	8000224 <__adddf3>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	f7f9 ff34 	bl	8000ab0 <__aeabi_dcmpgt>
 8006c48:	b150      	cbz	r0, 8006c60 <floor+0x48>
 8006c4a:	2c00      	cmp	r4, #0
 8006c4c:	da55      	bge.n	8006cfa <floor+0xe2>
 8006c4e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006c52:	432c      	orrs	r4, r5
 8006c54:	2500      	movs	r5, #0
 8006c56:	42ac      	cmp	r4, r5
 8006c58:	4c2b      	ldr	r4, [pc, #172]	@ (8006d08 <floor+0xf0>)
 8006c5a:	bf08      	it	eq
 8006c5c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006c60:	4621      	mov	r1, r4
 8006c62:	4628      	mov	r0, r5
 8006c64:	e023      	b.n	8006cae <floor+0x96>
 8006c66:	4f29      	ldr	r7, [pc, #164]	@ (8006d0c <floor+0xf4>)
 8006c68:	4137      	asrs	r7, r6
 8006c6a:	ea01 0307 	and.w	r3, r1, r7
 8006c6e:	4303      	orrs	r3, r0
 8006c70:	d01d      	beq.n	8006cae <floor+0x96>
 8006c72:	a323      	add	r3, pc, #140	@ (adr r3, 8006d00 <floor+0xe8>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 fad4 	bl	8000224 <__adddf3>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f7f9 ff16 	bl	8000ab0 <__aeabi_dcmpgt>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0eb      	beq.n	8006c60 <floor+0x48>
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	bfbe      	ittt	lt
 8006c8c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006c90:	4133      	asrlt	r3, r6
 8006c92:	18e4      	addlt	r4, r4, r3
 8006c94:	ea24 0407 	bic.w	r4, r4, r7
 8006c98:	2500      	movs	r5, #0
 8006c9a:	e7e1      	b.n	8006c60 <floor+0x48>
 8006c9c:	2e33      	cmp	r6, #51	@ 0x33
 8006c9e:	dd0a      	ble.n	8006cb6 <floor+0x9e>
 8006ca0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006ca4:	d103      	bne.n	8006cae <floor+0x96>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	f7f9 fabb 	bl	8000224 <__adddf3>
 8006cae:	ec41 0b10 	vmov	d0, r0, r1
 8006cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006cba:	f04f 37ff 	mov.w	r7, #4294967295
 8006cbe:	40df      	lsrs	r7, r3
 8006cc0:	4207      	tst	r7, r0
 8006cc2:	d0f4      	beq.n	8006cae <floor+0x96>
 8006cc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006d00 <floor+0xe8>)
 8006cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cca:	f7f9 faab 	bl	8000224 <__adddf3>
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f7f9 feed 	bl	8000ab0 <__aeabi_dcmpgt>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d0c2      	beq.n	8006c60 <floor+0x48>
 8006cda:	2c00      	cmp	r4, #0
 8006cdc:	da0a      	bge.n	8006cf4 <floor+0xdc>
 8006cde:	2e14      	cmp	r6, #20
 8006ce0:	d101      	bne.n	8006ce6 <floor+0xce>
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	e006      	b.n	8006cf4 <floor+0xdc>
 8006ce6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006cea:	2301      	movs	r3, #1
 8006cec:	40b3      	lsls	r3, r6
 8006cee:	441d      	add	r5, r3
 8006cf0:	4545      	cmp	r5, r8
 8006cf2:	d3f6      	bcc.n	8006ce2 <floor+0xca>
 8006cf4:	ea25 0507 	bic.w	r5, r5, r7
 8006cf8:	e7b2      	b.n	8006c60 <floor+0x48>
 8006cfa:	2500      	movs	r5, #0
 8006cfc:	462c      	mov	r4, r5
 8006cfe:	e7af      	b.n	8006c60 <floor+0x48>
 8006d00:	8800759c 	.word	0x8800759c
 8006d04:	7e37e43c 	.word	0x7e37e43c
 8006d08:	bff00000 	.word	0xbff00000
 8006d0c:	000fffff 	.word	0x000fffff

08006d10 <_init>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr

08006d1c <_fini>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr
